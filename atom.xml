<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[An Android Coder]]></title>
  <subtitle><![CDATA[CoderRobin's Blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://coderrobin.com/"/>
  <updated>2015-04-06T04:23:04.000Z</updated>
  <id>http://coderrobin.com/</id>
  
  <author>
    <name><![CDATA[CoderRobin]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Gradle笔记]]></title>
    <link href="http://coderrobin.com/2015/04/06/gradle%E7%AC%94%E8%AE%B0/"/>
    <id>http://coderrobin.com/2015/04/06/gradle笔记/</id>
    <published>2015-04-06T02:36:32.000Z</published>
    <updated>2015-04-06T04:23:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="范例">范例</h1><h2 id="{@projectName}/build-gradle">{@projectName}/build.gradle</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">	<span class="keyword">repositories</span> &#123;</span><br><span class="line">    	jcenter()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">dependencies</span> &#123;</span><br><span class="line">	<span class="comment">//gradle版本</span></span><br><span class="line">    	<span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.0.0'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">	<span class="keyword">repositories</span> &#123;</span><br><span class="line">    	jcenter()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="{@projectName}/settings-gradle">{@projectName}/settings.gradle</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含的module</span></span><br><span class="line"> <span class="keyword">include</span> <span class="string">':app'</span>, <span class="string">':library'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="{@ModuleName}/build-gradle">{@ModuleName}/build.gradle</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明使用的插件，表明要编译的内容和产物</span></span><br><span class="line">apply plugin:</span><br><span class="line"> <span class="string">'com.android.application'</span>   表明该module为android应用，产生apk</span><br><span class="line"><span class="string">'com.android.library'</span> 表明module为android库，产生jar包或aar</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// 编译SDK的版本</span></span><br><span class="line">    compileSdkVersion <span class="number">21</span></span><br><span class="line">    <span class="comment">// build tools的版本</span></span><br><span class="line">    buildToolsVersion <span class="string">"21.1.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="comment">// 应用的包名</span></span><br><span class="line">        applicationId <span class="string">"com.coderrobin.test"</span></span><br><span class="line">	<span class="comment">//支持的最小android sdk版本</span></span><br><span class="line">        minSdkVersion <span class="number">14</span> </span><br><span class="line">	<span class="comment">//目标版本（编译用的sdk）</span></span><br><span class="line">        targetSdkVersion <span class="number">21</span></span><br><span class="line">	<span class="comment">//版本号</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">	<span class="comment">//版本名称</span></span><br><span class="line">        versionName <span class="string">"1.0.0"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java版本</span></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_7</span><br><span class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_7</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">signingConfigs &#123;</span><br><span class="line">   release&#123;</span><br><span class="line">       storeFile <span class="keyword">file</span>(<span class="string">"gradle.keystore"</span>)</span><br><span class="line">    	storePassword <span class="string">"gradle"</span></span><br><span class="line">    	keyAlias <span class="string">"gradle"</span></span><br><span class="line">    	keyPassword <span class="string">"gradle"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译类型</span></span><br><span class="line">buildTypes &#123;</span><br><span class="line">	release &#123;</span><br><span class="line">	</span><br><span class="line">    	applicationIdSuffix <span class="string">'.release'</span></span><br><span class="line">    	signingConfig signingConfigs.release</span><br><span class="line">    	zipAlignEnabled <span class="keyword">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	debug &#123;</span><br><span class="line">    	applicationIdSuffix <span class="string">'.debug'</span></span><br><span class="line">    	zipAlignEnabled <span class="keyword">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	buildtypesnochange &#123;</span><br><span class="line">    	signingConfig signingConfigs.release</span><br><span class="line">    	zipAlignEnabled <span class="keyword">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	productFlavors &#123;</span><br><span class="line">		playstore &#123;</span><br><span class="line">    			applicationId <span class="string">'com.coderrobin.test.playstore'</span></span><br><span class="line">		&#125;</span><br><span class="line">		amazonstore &#123;</span><br><span class="line">    			applicationId <span class="string">'com.coderrobin.test.amazonstore'</span></span><br><span class="line">		&#125;</span><br><span class="line">	productflavorsnochange &#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除lint检查的error</span></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">      abortOnError <span class="keyword">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// 编译libs目录下的所有jar包</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:support-v4:21.0.2'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':libs'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Groovy_的基本语法">Groovy 的基本语法</h1><h2 id="方法调用">方法调用</h2><p>apply plugin: ‘com.android.application’<br>以上语句中的apply是一个方法，给它传递了一个参数plugin，plugin 的值是’com.android.application</p>
<h2 id="闭包">闭包</h2><p>Groovy中花括号包含的部分为一个闭包（Closure）。例如下面的代码<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">compileOptions &#123;  </span><br><span class="line">       sourceCompatibility JavaVersion<span class="string">.VERSION_1_7</span>  </span><br><span class="line">       targetCompatibility JavaVersion<span class="string">.VERSION_1_7</span>  </span><br><span class="line">   &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>compileOptions 是一个方法， 它的参数是一个闭包，这个闭包内依次执行了两个方法 — sourceCompatibility 和targetCompatibility， 参数都是JavaVersion.VERSION17。</p>
<h2 id="闭包嵌套">闭包嵌套</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> signingConfigs &#123;</span><br><span class="line">   release&#123;</span><br><span class="line">       storeFile <span class="type">file</span>(<span class="string">"gradle.keystore"</span>)</span><br><span class="line">    	storePassword <span class="string">"gradle"</span></span><br><span class="line">    	keyAlias <span class="string">"gradle"</span></span><br><span class="line">    	keyPassword <span class="string">"gradle"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>signingConfigs是一个方法，参数为一个闭包，该闭包中有release方法，其参数是一个闭包，该闭包内含有storeFile，storePassword,keyAlias,keyPassword方法</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="范例">范例</h1><h2 id="{@projectName}/build-gradle">{@projectName}/build.gradle</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">	<span class="keyword">repositories</span> &#123;</span><br><span class="line">    	jcenter()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">dependencies</span> &#123;</span><br><span class="line">	<span class="comment">//gradle版本</span></span><br><span class="line">    	<span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.0.0'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">	<span class="keyword">repositories</span> &#123;</span><br><span class="line">    	jcenter()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="{@projectName}/settings-gradle">{@projectName}/settings.gradle</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含的module</span></span><br><span class="line"> <span class="keyword">include</span> <span class="string">':app'</span>, <span class="string">':library'</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="gradle" scheme="http://coderrobin.com/tags/gradle/"/>
    
      <category term="读书笔记" scheme="http://coderrobin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Spinner设置下拉框高度]]></title>
    <link href="http://coderrobin.com/2015/03/05/Android-Spinner%E8%AE%BE%E7%BD%AE%E4%B8%8B%E6%8B%89%E6%A1%86%E9%AB%98%E5%BA%A6/"/>
    <id>http://coderrobin.com/2015/03/05/Android-Spinner设置下拉框高度/</id>
    <published>2015-03-05T14:32:25.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>最近有用到Spinner控件，然后查了下api再google了一圈，竟然发现没有设置下拉框高度的接口。于是大概看了下spinner源码。发现其中有个私有成员变量SpinnerPopup mPopup便是下拉框控件，当spinner mode是 MODE_DROPDOWN,实际上是一个DropdownPopu，该类又继承了ListPopupWindow，而listPopupwindow有个getListview方法 得到实际展示的listview，于是便可以利用反射实现了设置spinner下拉框的高度和下拉框的listview的各种属性，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDropDownHeight</span><span class="params">(<span class="keyword">int</span> pHeight)</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Field field=Spinner.<span class="keyword">class</span>.getDeclaredField(<span class="string">"mPopup"</span>);</span><br><span class="line">		field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">		ListPopupWindow popUp=(ListPopupWindow)field.get(mSpinner);</span><br><span class="line">		popUp.setHeight(pHeight);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近有用到Spinner控件，然后查了下api再google了一圈，竟然发现没有设置下拉框高度的接口。于是大概看了下spinner源码。发现其中有个私有成员变量SpinnerPopup mPopup便是下拉框控件，当spinner mode是 MODE_DROPDOWN,实]]>
    </summary>
    
      <category term="反射" scheme="http://coderrobin.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Annotation基础]]></title>
    <link href="http://coderrobin.com/2015/03/02/Java-Annotation%E5%9F%BA%E7%A1%80/"/>
    <id>http://coderrobin.com/2015/03/02/Java-Annotation基础/</id>
    <published>2015-03-02T14:12:37.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>在Android开发中，为了提高开发效率，各个注解框架（如Butter Knife，Dagger 等）越来越流行，为了方便理解和使用这些注解框架，需要对Java Annotation有个初步的了解。<br><a id="more"></a></p>
<h1 id="基础入门">基础入门</h1><p>类、方法、变量、参数、包都可以被注解.</p>
<h2 id="作用">作用</h2><p>1.为编译器提供辅助信息 — Annotations可以为编译器提供而外信息，以便于检测错误，抑制警告等.<br>2.编译源代码时进行而外操作 — 软件工具可以通过处理Annotation信息来生成原代码，xml文件等等.<br>3.运行时处理 — 有一些annotation甚至可以在程序运行时被检测，使用.<br>如java自带的标准 Annotation<br>Override：标记此为重载方法<br>Deprecated:标记该方法已弃用<br>SuppressWarnings:标记忽略某项 Warning</p>
<h2 id="元注解">元注解</h2><p>元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：</p>
<h3 id="@Target：">@Target：</h3><p>@Target说明了Annotation所修饰的对象范围：<br>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）<br>取值(ElementType)有：<br>1.CONSTRUCTOR:用于描述构造器<br>2.FIELD:用于描述域<br>3.LOCAL_VARIABLE:用于描述局部变量<br>4.METHOD:用于描述方法<br>5.PACKAGE:用于描述包<br>6.PARAMETER:用于描述参数<br>7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p>
<h3 id="@Retention：">@Retention：</h3><p>@Retention定义了该Annotation的作用时间<br>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期<br>取值（RetentionPoicy）有：<br>1.SOURCE:在源文件中有效<br>2.CLASS:在class文件中有效<br>3.RUNTIME:在运行时有效</p>
<h3 id="@Documented:">@Documented:</h3><p>@Documented标记可以被文档化</p>
<h3 id="@Inherited：">@Inherited：</h3><p>@Inherited它的作用是控制注释是否会影响到子类。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>
<h1 id="自定义注解（运行时注解使用示例）">自定义注解（运行时注解使用示例）</h1><p>该使用方法本质为在运行时通过反射获取注解的相关信息，并进行后续操作。<br>以下为利用反射获取注解信息的例子。</p>
<h3 id="CustomizedAnnatation类">CustomizedAnnatation类</h3><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.coderrobin;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.lang.annotation.ElementType;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.lang.annotation.Retention;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.lang.annotation.Target;</span></span><br><span class="line"></span><br><span class="line">@Target(ElementType.<span class="keyword">FIELD</span>) //表明该注解用于注解域（成员变量）</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME) //表明该注解为运行时注解</span><br><span class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">CustomizedAnnatation</span></span></span><br><span class="line">	<span class="keyword">public</span> String name() <span class="keyword">default</span> <span class="string">"coderrobin"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类">测试类</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderrobin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestClass &#123;</span><br><span class="line">	<span class="keyword">@CustomizedAnnatation</span>(name=<span class="string">"coderrobin"</span>)</span><br><span class="line">	<span class="keyword">private</span> String anotationName;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * @param args</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">		 Class testClass=TestClass.<span class="keyword">class</span>;</span><br><span class="line">		 Field[] fields=testClass.getDeclaredFields();</span><br><span class="line">		 <span class="keyword">for</span>(Field field:fields)&#123;</span><br><span class="line">			 field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		 <span class="keyword">if</span>(field.isAnnotationPresent(CustomizedAnnatation.<span class="keyword">class</span>))&#123;</span><br><span class="line">			 CustomizedAnnatation annotation=(CustomizedAnnatation)field.getAnnotation(CustomizedAnnatation.<span class="keyword">class</span>);</span><br><span class="line">			 System.<span class="keyword">out</span>.println(annotation);</span><br><span class="line">			 System.<span class="keyword">out</span>.println(annotation.name()); </span><br><span class="line">			 <span class="keyword">try</span> &#123;</span><br><span class="line">				TestClass textClass=TestClass.<span class="keyword">class</span>.newInstance();</span><br><span class="line">				textClass.anotationName=annotation.name();</span><br><span class="line">				 System.<span class="keyword">out</span>.println(textClass.anotationName); </span><br><span class="line">			&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		 &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义注解（编译时使用）">自定义注解（编译时使用）</h1><p>以下代码需配置环境才能看到结果，可参考鸿洋的<a href="http://blog.csdn.net/" target="_blank" rel="external">http://blog.csdn.net/</a><br>lmj623565791/article/details/43452969<br>以下为在编译时产生一个txt文件的例子<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderrobin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> CustomizedAnnatationSource &#123;</span><br><span class="line">	<span class="keyword">public</span> String name() <span class="keyword">default</span> <span class="string">"coderrobin"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="annotation">@SupportedAnnotationTypes</span>(&#123;<span class="string">"com.coderrobin.CustomizedAnnatationSource"</span>&#125;) <span class="comment">//注解处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizedProcesser</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? <span class="keyword">extends</span> TypeElement&gt; annotations, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">       	File file = <span class="keyword">new</span> File(<span class="string">"/home/coderrobin/coderrobin.txt"</span>);  </span><br><span class="line">  FileWriter fw;</span><br><span class="line">fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        <span class="keyword">for</span> (TypeElement te : annotations) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Element e : env.getElementsAnnotatedWith(te)) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">                   fw.append( e.toString());</span><br><span class="line">                   fw.flush();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e1.printStackTrace();</span><br><span class="line">				&#125;  </span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  fw.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> SourceVersion.<span class="title">latestSupported</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnatationSourceTest</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@CustomizedAnnatationSource</span></span><br><span class="line">	<span class="keyword">public</span> String test;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="总结">总结</h1><p>利用编译时注解可以产生需要的文件，包括源码，以此提高生产效率。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简介">简介</h1><p>在Android开发中，为了提高开发效率，各个注解框架（如Butter Knife，Dagger 等）越来越流行，为了方便理解和使用这些注解框架，需要对Java Annotation有个初步的了解。<br>]]>
    
    </summary>
    
      <category term="Annotation" scheme="http://coderrobin.com/tags/Annotation/"/>
    
      <category term="java" scheme="http://coderrobin.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Volley解析]]></title>
    <link href="http://coderrobin.com/2015/02/21/Android-Volley%E8%A7%A3%E6%9E%90/"/>
    <id>http://coderrobin.com/2015/02/21/Android-Volley解析/</id>
    <published>2015-02-21T15:47:52.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>Volley是android官方提供的进行网络请求的框架，亦包括了对网络图片加载的功能。特别适用于请求次数较多但数据量较小的情况。<br>已经有大神对volley进行了较详细的解析，本篇博文也只是写写自己的理解。<br>郭霖：<br>Android Volley完全解析<br><a href="http://blog.csdn.net/guolin_blog/article/details/17656437" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/17656437</a><br>codekk:<br>Volley 源码解析<br><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">http://www.codekk.com/open-source-project-analysis/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90</a><br><a id="more"></a></p>
<h1 id="使用">使用</h1><h2 id="初始化请求队列">初始化请求队列</h2><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">RequestQueue requestQueue </span>=<span class="string"> Volley.newRequestQueue(context);</span></span><br></pre></td></tr></table></figure>
<h2 id="创建request并加入队列">创建request并加入队列</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   StringRequest stringRequest <span class="subst">=</span> <span class="literal">new</span> StringRequest(Method<span class="built_in">.</span>POST,<span class="string">"http://www.baidu.com"</span>,  </span><br><span class="line">                       <span class="literal">new</span> Response<span class="built_in">.</span>Listener<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>() &#123;  </span><br><span class="line">                           @Override  </span><br><span class="line">                           <span class="keyword">public</span> <span class="literal">void</span> onResponse(<span class="built_in">String</span> response) &#123;  </span><br><span class="line">                               <span class="keyword">Log</span><span class="built_in">.</span>d(<span class="string">"TAG"</span>, response);  </span><br><span class="line">                           &#125;  </span><br><span class="line">                       &#125;, <span class="literal">new</span> Response<span class="built_in">.</span>ErrorListener() &#123;  </span><br><span class="line">                           @Override  </span><br><span class="line">                           <span class="keyword">public</span> <span class="literal">void</span> onErrorResponse(VolleyError error) &#123;  </span><br><span class="line">                               <span class="keyword">Log</span><span class="built_in">.</span>e(<span class="string">"TAG"</span>, error<span class="built_in">.</span>getMessage(), error);  </span><br><span class="line">                           &#125;  </span><br><span class="line">                       &#125;)&#123; </span><br><span class="line"><span class="comment">//post请求参数 </span></span><br><span class="line">       @Override  </span><br><span class="line">       <span class="keyword">protected</span> <span class="built_in">Map</span><span class="subst">&lt;</span><span class="built_in">String</span>, <span class="built_in">String</span><span class="subst">&gt;</span> getParams() throws AuthFailureError &#123;  </span><br><span class="line">           <span class="built_in">Map</span><span class="subst">&lt;</span><span class="built_in">String</span>, <span class="built_in">String</span><span class="subst">&gt;</span> <span class="built_in">map</span> <span class="subst">=</span> <span class="literal">new</span> HashMap<span class="subst">&lt;</span><span class="built_in">String</span>, <span class="built_in">String</span><span class="subst">&gt;</span>();  </span><br><span class="line">           <span class="built_in">map</span><span class="built_in">.</span>put(<span class="string">"params1"</span>, <span class="string">"value1"</span>);  </span><br><span class="line">           <span class="built_in">map</span><span class="built_in">.</span>put(<span class="string">"params2"</span>, <span class="string">"value2"</span>);  </span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">map</span>;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>
<p>//加入请求队列后volley就会执行请求操作并根据结果回调相应监听<br>requestQueue.add(stringRequest);</p>
<h2 id="加载图片">加载图片</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的imageCache可以是lruCache等</span></span><br><span class="line">ImageLoader imageLoader = <span class="keyword">new</span> ImageLoader(requestQueue, imageCache);</span><br><span class="line">ImageListener listener = ImageLoader.getImageListener(imageView,  </span><br><span class="line">        R.drawable.default_image, R.drawable.failed_image); </span><br><span class="line">    imageLoader.<span class="keyword">get</span>(<span class="string">"http://test"</span>,  </span><br><span class="line">                    listener, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">或者直接使用networkImageView</span><br><span class="line">    networkImageView.setDefaultImageResId(R.drawable.default_image);  </span><br><span class="line">    networkImageView.setErrorImageResId(R.drawable.failed_image);  </span><br><span class="line">    networkImageView.setImageUrl(<span class="string">"http://test"</span>,  </span><br><span class="line">                    imageLoader);</span><br></pre></td></tr></table></figure>
<h1 id="源码分析">源码分析</h1><p>volley的网络部分主要使用生产者消费者模式。将请求添加到队列中，然后由相应消费者（线程）去处理。会有cacheDispacther线程处理已在cache中的请求,networkdispatcher线程（默认4条）去处理网络请求，<br>整体流程如下图。<br><img src="/image/volley_design.png" alt="volley"><br><img src="/image/volley.png" alt="volley"><br>以下为各个类的关键方法 </p>
<h2 id="volley类分析">volley类分析</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestQueue <span class="title">newRequestQueue</span><span class="params">(Context context, HttpStack <span class="built_in">stack</span>, <span class="keyword">int</span> maxDiskCacheBytes)</span> </span>&#123;</span><br><span class="line">       File cacheDir = <span class="keyword">new</span> File(context.getCacheDir(), DEFAULT_CACHE_DIR);</span><br><span class="line"></span><br><span class="line">       String userAgent = <span class="string">"volley/0"</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           String packageName = context.getPackageName();</span><br><span class="line">           PackageInfo info = context.getPackageManager().getPackageInfo(packageName, <span class="number">0</span>);</span><br><span class="line">           userAgent = packageName + <span class="string">"/"</span> + info.versionCode;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">stack</span> == null) &#123;</span><br><span class="line">           <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">	<span class="comment">//使用HttpUrlConnection</span></span><br><span class="line">               <span class="built_in">stack</span> = <span class="keyword">new</span> HurlStack();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// Prior to Gingerbread, HttpUrlConnection was unreliable.</span></span><br><span class="line">               <span class="comment">// See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html</span></span><br><span class="line">               <span class="built_in">stack</span> = <span class="keyword">new</span> HttpClientStack(AndroidHttpClient.newInstance(userAgent));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Network network = <span class="keyword">new</span> BasicNetwork(<span class="built_in">stack</span>);</span><br><span class="line">       </span><br><span class="line">       RequestQueue <span class="built_in">queue</span>;</span><br><span class="line">       <span class="keyword">if</span> (maxDiskCacheBytes &lt;= -<span class="number">1</span>)</span><br><span class="line">       &#123;</span><br><span class="line">       	<span class="comment">// No maximum size specified</span></span><br><span class="line">       	<span class="built_in">queue</span> = <span class="keyword">new</span> RequestQueue(<span class="keyword">new</span> DiskBasedCache(cacheDir), network);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">       	<span class="comment">// Disk cache size specified</span></span><br><span class="line">       	<span class="built_in">queue</span> = <span class="keyword">new</span> RequestQueue(<span class="keyword">new</span> DiskBasedCache(cacheDir, maxDiskCacheBytes), network);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//启动队列</span></span><br><span class="line">       <span class="built_in">queue</span>.start();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">queue</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="RequestQueue">RequestQueue</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动处理线程</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> start() &#123;</span><br><span class="line">        stop();  <span class="comment">// Make sure any currently running dispatchers are stopped.</span></span><br><span class="line">        <span class="comment">// Create the cache dispatcher and start it.</span></span><br><span class="line">        mCacheDispatcher = <span class="keyword">new</span> CacheDispatcher(mCacheQueue, mNetworkQueue, mCache, mDelivery);</span><br><span class="line">        mCacheDispatcher.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create network dispatchers (and corresponding threads) up to the pool size.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; mDispatchers.length; i++) &#123;</span><br><span class="line">            NetworkDispatcher networkDispatcher = <span class="keyword">new</span> NetworkDispatcher(mNetworkQueue, mNetwork,</span><br><span class="line">                    mCache, mDelivery);</span><br><span class="line">            mDispatchers[i] = networkDispatcher;</span><br><span class="line">            networkDispatcher.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将请求根据是否需要缓存，是否已在等待队列中放入相应队列</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; Request&lt;T&gt; <span class="built_in">add</span>(Request&lt;T&gt; request) &#123;</span><br><span class="line">        <span class="comment">// Tag the request as belonging to this queue and add it to the set of current requests.</span></span><br><span class="line">        request.setRequestQueue(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (mCurrentRequests) &#123;</span><br><span class="line">            mCurrentRequests.<span class="built_in">add</span>(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process requests in the order they are added.</span></span><br><span class="line">        request.setSequence(getSequenceNumber());</span><br><span class="line">        request.addMarker(<span class="string">"add-to-queue"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the request is uncacheable, skip the cache queue and go straight to the network.</span></span><br><span class="line">        <span class="keyword">if</span> (!request.shouldCache()) &#123;</span><br><span class="line">            mNetworkQueue.<span class="built_in">add</span>(request);</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Insert request into stage if there's already a request with the same cache key in flight.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mWaitingRequests) &#123;</span><br><span class="line">            <span class="keyword">String</span> cacheKey = request.getCacheKey();</span><br><span class="line">            <span class="keyword">if</span> (mWaitingRequests.containsKey(cacheKey)) &#123;</span><br><span class="line">                <span class="comment">// There is already a request in flight. Queue up.重复请求的队列</span></span><br><span class="line">                Queue&lt;Request&lt;?&gt;&gt; stagedRequests = mWaitingRequests.<span class="built_in">get</span>(cacheKey);</span><br><span class="line">                <span class="keyword">if</span> (stagedRequests == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stagedRequests = <span class="keyword">new</span> LinkedList&lt;Request&lt;?&gt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                stagedRequests.<span class="built_in">add</span>(request);</span><br><span class="line">                mWaitingRequests.put(cacheKey, stagedRequests);</span><br><span class="line">                <span class="keyword">if</span> (VolleyLog.DEBUG) &#123;</span><br><span class="line">                    VolleyLog.v(<span class="string">"Request for cacheKey=%s is in flight, putting on hold."</span>, cacheKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Insert 'null' queue for this cacheKey, indicating there is now a request in</span></span><br><span class="line">                <span class="comment">// flight.</span></span><br><span class="line">                mWaitingRequests.put(cacheKey, <span class="keyword">null</span>);</span><br><span class="line">                mCacheQueue.<span class="built_in">add</span>(request);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br></pre></td></tr></table></figure>
<h2 id="NetworkDispatcher">NetworkDispatcher</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">long</span> startTimeMs = SystemClock.elapsedRealtime();</span><br><span class="line">          Request&lt;?&gt; request;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// Take a request from the queue.</span></span><br><span class="line">              request = mQueue.take();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              <span class="comment">// We may have been interrupted because it was time to quit.</span></span><br><span class="line">              <span class="keyword">if</span> (mQuit) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              request.addMarker(<span class="string">"network-queue-take"</span>);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// If the request was cancelled already, do not perform the</span></span><br><span class="line">              <span class="comment">// network request.</span></span><br><span class="line">              <span class="keyword">if</span> (request.isCanceled()) &#123;</span><br><span class="line">                  request.finish(<span class="string">"network-discard-cancelled"</span>);</span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              addTrafficStatsTag(request);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 执行网络请求</span></span><br><span class="line">              NetworkResponse networkResponse = mNetwork.performRequest(request);</span><br><span class="line">              request.addMarker(<span class="string">"network-http-complete"</span>);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// If the server returned 304 AND we delivered a response already,</span></span><br><span class="line">              <span class="comment">// we're done -- don't deliver a second identical response.</span></span><br><span class="line">              <span class="keyword">if</span> (networkResponse.notModified &amp;&amp; request.hasHadResponseDelivered()) &#123;</span><br><span class="line">                  request.finish(<span class="string">"not-modified"</span>);</span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 解析response</span></span><br><span class="line">              Response&lt;?&gt; response = request.parseNetworkResponse(networkResponse);</span><br><span class="line">              request.addMarker(<span class="string">"network-parse-complete"</span>);</span><br><span class="line"></span><br><span class="line">      	<span class="comment">//若需要缓存，则放入缓存</span></span><br><span class="line">              <span class="keyword">if</span> (request.shouldCache() &amp;&amp; response.cacheEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  mCache.put(request.getCacheKey(), response.cacheEntry);</span><br><span class="line">                  request.addMarker(<span class="string">"network-cache-written"</span>);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// Post the response back.</span></span><br><span class="line">              request.markDelivered();</span><br><span class="line"><span class="comment">//推送结果</span></span><br><span class="line">              mDelivery.postResponse(request, response);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (VolleyError volleyError) &#123;</span><br><span class="line">              volleyError.setNetworkTimeMs(SystemClock.elapsedRealtime() - startTimeMs);</span><br><span class="line">              parseAndDeliverNetworkError(request, volleyError);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              VolleyLog.e(e, <span class="string">"Unhandled exception %s"</span>, e.toString());</span><br><span class="line">              VolleyError volleyError = <span class="keyword">new</span> VolleyError(e);</span><br><span class="line">              volleyError.setNetworkTimeMs(SystemClock.elapsedRealtime() - startTimeMs);</span><br><span class="line">              mDelivery.postError(request, volleyError);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="CacheDispatcher">CacheDispatcher</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (DEBUG) VolleyLog.v(<span class="string">"start new dispatcher"</span>);</span><br><span class="line">       Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Make a blocking call to initialize the cache.</span></span><br><span class="line">       mCache.initialize();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// Get a request from the cache triage queue, blocking until</span></span><br><span class="line">               <span class="comment">// at least one is available.</span></span><br><span class="line">               <span class="keyword">final</span> Request&lt;?&gt; request = mCacheQueue.take();</span><br><span class="line">               request.addMarker(<span class="string">"cache-queue-take"</span>);</span><br><span class="line"></span><br><span class="line">               <span class="comment">// If the request has been canceled, don't bother dispatching it.</span></span><br><span class="line">               <span class="keyword">if</span> (request.isCanceled()) &#123;</span><br><span class="line">                   request.finish(<span class="string">"cache-discard-canceled"</span>);</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 取出结果</span></span><br><span class="line">               Cache.Entry entry = mCache.get(request.getCacheKey());</span><br><span class="line">               <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   request.addMarker(<span class="string">"cache-miss"</span>);</span><br><span class="line">                   <span class="comment">// 缓存为空，重新放入网络请求队列，让网络线程去请求</span></span><br><span class="line">                   mNetworkQueue.put(request);</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//已过期，重新请求</span></span><br><span class="line">               <span class="keyword">if</span> (entry.isExpired()) &#123;</span><br><span class="line">                   request.addMarker(<span class="string">"cache-hit-expired"</span>);</span><br><span class="line">                   request.setCacheEntry(entry);</span><br><span class="line">                   mNetworkQueue.put(request);</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 缓存中已有。解析成respnce</span></span><br><span class="line">               request.addMarker(<span class="string">"cache-hit"</span>);</span><br><span class="line">               Response&lt;?&gt; response = request.parseNetworkResponse(</span><br><span class="line">                       <span class="keyword">new</span> NetworkResponse(entry.data, entry.responseHeaders));</span><br><span class="line">               request.addMarker(<span class="string">"cache-hit-parsed"</span>);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (!entry.refreshNeeded()) &#123;</span><br><span class="line">                   <span class="comment">// Completely unexpired cache hit. Just deliver the response.</span></span><br><span class="line">                   mDelivery.postResponse(request, response);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// Soft-expired cache hit. We can deliver the cached response,</span></span><br><span class="line">                   <span class="comment">// but we need to also send the request to the network for</span></span><br><span class="line">                   <span class="comment">// refreshing.</span></span><br><span class="line">                   request.addMarker(<span class="string">"cache-hit-refresh-needed"</span>);</span><br><span class="line">                   request.setCacheEntry(entry);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// Mark the response as intermediate.</span></span><br><span class="line">                   response.intermediate = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// Post the intermediate response back to the user and have</span></span><br><span class="line">                   <span class="comment">// the delivery then forward the request along to the network.</span></span><br><span class="line">                   mDelivery.postResponse(request, response, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                       <span class="annotation">@Override</span></span><br><span class="line">                       <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               mNetworkQueue.put(request);</span><br><span class="line">                           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                               <span class="comment">// Not much we can do about this.</span></span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               <span class="comment">// We may have been interrupted because it was time to quit.</span></span><br><span class="line">               <span class="keyword">if</span> (mQuit) &#123;</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1><p>volley整体的结构还是很清晰，比较容易理解的。<br>不过我仍有一些疑问：<br>1.以请求队列的形式提供给用户是否合适。<br>2.以上来就开这么多线程真的合适吗？虽然是阻塞的。<br>对于图片加载部分,universalimageloade的扩展性会更强一些，可以自定义downloader,decoder,displayer等且对listview复用的有一些处理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简介">简介</h1><p>Volley是android官方提供的进行网络请求的框架，亦包括了对网络图片加载的功能。特别适用于请求次数较多但数据量较小的情况。<br>已经有大神对volley进行了较详细的解析，本篇博文也只是写写自己的理解。<br>郭霖：<br>Android Volley完全解析<br><a href="http://blog.csdn.net/guolin_blog/article/details/17656437">http://blog.csdn.net/guolin_blog/article/details/17656437</a><br>codekk:<br>Volley 源码解析<br><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">http://www.codekk.com/open-source-project-analysis/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90</a><br>]]>
    
    </summary>
    
      <category term="volley" scheme="http://coderrobin.com/tags/volley/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目-EventBus分析]]></title>
    <link href="http://coderrobin.com/2015/02/13/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE-EventBus%E5%88%86%E6%9E%90/"/>
    <id>http://coderrobin.com/2015/02/13/Android开源项目-EventBus分析/</id>
    <published>2015-02-13T15:18:48.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>EventBus 是一个事件发布/订阅框架，通过解耦发布者和订阅者简化 Android 事件传递，事件传递既可用于 Android 四大组件间通讯，也可以用户异步线程和主线程间通讯等等。<br>传统的事件传递方式包括：Handler、BroadCastReceiver、回调等，相比之下 EventBus 的优点是代码简洁，使用简单，并将事件发布和订阅充分解耦。尤其在代码分层比较多时，需要层次往上传递，写很多回调事件。这时候就可以使用eventbus取代之。<br><a id="more"></a><br>关于EventBus分析的理由基本跟上一次分析uil的理由一致，主要还是让自己加深理解,学习框架的基本思路。</p>
<p>很多大神都已经解析过此开源项目。<br>包括但不限于以下博客：<br><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">http://www.codekk.com/open-source-project-analysis/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90</a></p>
<h2 id="使用">使用</h2><p>1.注册<br>EventBus.getDefault().register(classA);<br>2.自定义事件类,比如MyEvent<br>3.在ClassA中写回调<br>在EventBus中可以定义四种类型的回调函数，形参为自定义事件类型。<br>EventBus根据事件类型确定回调函数的形参即事件类型决定调用哪个方法<br>    a、onEvent   回调函数和发起事件的函数会在同一个线程中执行<br>    b、onEventMainThread 回调函数会在主线程中执行<br>    c、onEventBackgroundThread，当使用这种类型时，如果事件发起函数在主线程中执行，那么回调函数另启动一个子线程，如果事件发起函数在子线程执行，那么回调函数就在这个子线程执行。<br>    d、onEventAsync，当使用这种类型时，不管事件发起函数在哪里执行，都会另起一个线程去执行回调。<br>4.传递事件<br>   EventBus.getDefault().post(new MyEvent())<br>可以看出其使用非常简单，用户无需事件是怎样传递过来的实现细节。</p>
<h2 id="源码分析">源码分析</h2><p>eventbus源码相对简单，这里只看下主要的几个类学习下</p>
<h3 id="eventbus">eventbus</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class EventBus &#123;</span><br><span class="line">    <span class="keyword">static</span> ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> EventBus defaultInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DEFAULT_METHOD_NAME = <span class="string">"onEvent"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; eventTypesCache = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//以eventType（订阅事件，即接收方法的第一个参数）为key,订阅类的列表构成的hashmap</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</span><br><span class="line">  <span class="comment">//一个订阅类拥有的订阅事件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;<span class="keyword">Object</span>, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, <span class="keyword">Object</span>&gt; stickyEvents;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = <span class="keyword">new</span> ThreadLocal&lt;PostingThreadState&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">protected</span> PostingThreadState initialValue() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PostingThreadState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EventBus() &#123;</span><br><span class="line">        subscriptionsByEventType = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt;();</span><br><span class="line">        typesBySubscriber = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">Object</span>, List&lt;Class&lt;?&gt;&gt;&gt;();</span><br><span class="line">        stickyEvents = <span class="keyword">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, <span class="keyword">Object</span>&gt;();</span><br><span class="line">        mainThreadPoster = <span class="keyword">new</span> HandlerPoster(<span class="keyword">this</span>, Looper.getMainLooper(), <span class="number">10</span>);</span><br><span class="line">        backgroundPoster = <span class="keyword">new</span> BackgroundPoster(<span class="keyword">this</span>);</span><br><span class="line">        asyncPoster = <span class="keyword">new</span> AsyncPoster(<span class="keyword">this</span>);</span><br><span class="line">        subscriberMethodFinder = <span class="keyword">new</span> SubscriberMethodFinder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> register(<span class="keyword">Object</span> subscriber, <span class="keyword">String</span> methodName, <span class="built_in">boolean</span> sticky, <span class="built_in">int</span> priority) &#123;</span><br><span class="line">	<span class="comment">//由订阅类使用反射查找订阅的方法</span></span><br><span class="line">        List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass(),</span><br><span class="line">                methodName);</span><br><span class="line">        <span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">	<span class="comment">//执行订阅操作</span></span><br><span class="line">            subscribe(subscriber, subscriberMethod, sticky, priority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> subscribe(<span class="keyword">Object</span> subscriber, SubscriberMethod subscriberMethod, <span class="built_in">boolean</span> sticky, <span class="built_in">int</span> priority) &#123;</span><br><span class="line">        subscribed = <span class="keyword">true</span>;</span><br><span class="line">        Class&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class="line">	<span class="comment">//取出该eventtype所对应的订阅者列表</span></span><br><span class="line">        CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.<span class="built_in">get</span>(eventType);</span><br><span class="line">        Subscription newSubscription = <span class="keyword">new</span> Subscription(subscriber, subscriberMethod, priority);</span><br><span class="line">        <span class="keyword">if</span> (subscriptions == <span class="keyword">null</span>) &#123;</span><br><span class="line">            subscriptions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;Subscription&gt;();</span><br><span class="line">            subscriptionsByEventType.put(eventType, subscriptions);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">//判断是否已订阅过</span></span><br><span class="line">            <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">                <span class="keyword">if</span> (subscription.equals(newSubscription)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriber.getClass() + <span class="string">" already registered to event "</span></span><br><span class="line">                            + eventType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)</span></span><br><span class="line">        <span class="comment">// subscriberMethod.method.setAccessible(true);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">size</span> = subscriptions.<span class="built_in">size</span>();</span><br><span class="line">	<span class="comment">//根据优先级将订阅者加入订阅列表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="built_in">size</span> || newSubscription.priority &gt; subscriptions.<span class="built_in">get</span>(i).priority) &#123;</span><br><span class="line">                subscriptions.<span class="built_in">add</span>(i, newSubscription);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.<span class="built_in">get</span>(subscriber);</span><br><span class="line">        <span class="keyword">if</span> (subscribedEvents == <span class="keyword">null</span>) &#123;</span><br><span class="line">            subscribedEvents = <span class="keyword">new</span> ArrayList&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">            typesBySubscriber.put(subscriber, subscribedEvents);</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="comment">//添加到1个订阅者拥有的事件列表</span></span><br><span class="line">        subscribedEvents.<span class="built_in">add</span>(eventType);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sticky) &#123;</span><br><span class="line">            <span class="keyword">Object</span> stickyEvent;</span><br><span class="line">            <span class="keyword">synchronized</span> (stickyEvents) &#123;</span><br><span class="line">                stickyEvent = stickyEvents.<span class="built_in">get</span>(eventType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stickyEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)</span></span><br><span class="line">                <span class="comment">// --&gt; Strange corner case, which we don't take care of here.</span></span><br><span class="line">                postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Posts the given event to the event bus. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> post(<span class="keyword">Object</span> event) &#123;</span><br><span class="line"></span><br><span class="line">        PostingThreadState postingState = currentPostingThreadState.<span class="built_in">get</span>();</span><br><span class="line">        List&lt;<span class="keyword">Object</span>&gt; eventQueue = postingState.eventQueue;</span><br><span class="line">	<span class="comment">//加入当前线程的事件队列</span></span><br><span class="line">        eventQueue.<span class="built_in">add</span>(event);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (postingState.isPosting) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	 <span class="comment">//应该没必要每次都判断</span></span><br><span class="line">            postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();</span><br><span class="line">            postingState.isPosting = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (postingState.canceled) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</span><br><span class="line">		<span class="comment">//post event</span></span><br><span class="line">                    postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postingState.isPosting = <span class="keyword">false</span>;</span><br><span class="line">                postingState.isMainThread = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> postSingleEvent(<span class="keyword">Object</span> event, PostingThreadState postingState) <span class="keyword">throws</span> Error &#123;</span><br><span class="line">        Class&lt;? extends <span class="keyword">Object</span>&gt; eventClass = event.getClass();</span><br><span class="line">	<span class="comment">//由event获取事件类型，包括其父类</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; eventTypes = findEventTypes(eventClass);</span><br><span class="line">        <span class="built_in">boolean</span> subscriptionFound = <span class="keyword">false</span>;</span><br><span class="line">        <span class="built_in">int</span> countTypes = eventTypes.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = eventTypes.<span class="built_in">get</span>(h);</span><br><span class="line">            CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">  <span class="comment">//由事件类型获取订阅者</span></span><br><span class="line">                subscriptions = subscriptionsByEventType.<span class="built_in">get</span>(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">	 </span><br><span class="line">            <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">                    postingState.event = event;</span><br><span class="line">                    postingState.subscription = subscription;</span><br><span class="line">                    <span class="built_in">boolean</span> aborted = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">//post 事件到订阅者</span></span><br><span class="line">                        postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class="line">                        aborted = postingState.canceled;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        postingState.event = <span class="keyword">null</span>;</span><br><span class="line">                        postingState.subscription = <span class="keyword">null</span>;</span><br><span class="line">                        postingState.canceled = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (aborted) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                subscriptionFound = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!subscriptionFound) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"No subscribers registered for event "</span> + eventClass);</span><br><span class="line">            <span class="keyword">if</span> (eventClass != NoSubscriberEvent.class &amp;&amp; eventClass != SubscriberExceptionEvent.class) &#123;</span><br><span class="line">                post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> postToSubscription(Subscription subscription, <span class="keyword">Object</span> event, <span class="built_in">boolean</span> isMainThread) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> PostThread:</span><br><span class="line">	  <span class="comment">//post到当前线程</span></span><br><span class="line">            invokeSubscriber(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">	<span class="comment">//post到主线程</span></span><br><span class="line">        <span class="keyword">case</span> MainThread:</span><br><span class="line">		<span class="comment">//判断当前是否是主线程</span></span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BackgroundThread:</span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                backgroundPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Async:</span><br><span class="line">            asyncPoster.enqueue(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&lt;?&gt;&gt; findEventTypes(Class&lt;?&gt; eventClass) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (eventTypesCache) &#123;</span><br><span class="line">            List&lt;Class&lt;?&gt;&gt; eventTypes = eventTypesCache.<span class="built_in">get</span>(eventClass);</span><br><span class="line">            <span class="keyword">if</span> (eventTypes == <span class="keyword">null</span>) &#123;</span><br><span class="line">                eventTypes = <span class="keyword">new</span> ArrayList&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">                Class&lt;?&gt; clazz = eventClass;</span><br><span class="line">                <span class="keyword">while</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    eventTypes.<span class="built_in">add</span>(clazz);</span><br><span class="line">                    addInterfaces(eventTypes, clazz.getInterfaces());</span><br><span class="line">                    clazz = clazz.getSuperclass();</span><br><span class="line">                &#125;</span><br><span class="line">                eventTypesCache.put(eventClass, eventTypes);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> eventTypes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> addInterfaces(List&lt;Class&lt;?&gt;&gt; eventTypes, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; interfaceClass : interfaces) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!eventTypes.contains(interfaceClass)) &#123;</span><br><span class="line">                eventTypes.<span class="built_in">add</span>(interfaceClass);</span><br><span class="line">                addInterfaces(eventTypes, interfaceClass.getInterfaces());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">void</span> invokeSubscriber(PendingPost pendingPost) &#123;</span><br><span class="line">        <span class="keyword">Object</span> event = pendingPost.event;</span><br><span class="line">        Subscription subscription = pendingPost.subscription;</span><br><span class="line">        PendingPost.releasePendingPost(pendingPost);</span><br><span class="line">        <span class="keyword">if</span> (subscription.active) &#123;</span><br><span class="line">            invokeSubscriber(subscription, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> invokeSubscriber(Subscription subscription, <span class="keyword">Object</span> event) <span class="keyword">throws</span> Error &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">	  <span class="comment">//用反射执行该方法</span></span><br><span class="line">            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Throwable cause = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> SubscriberExceptionEvent) &#123;</span><br><span class="line">                <span class="comment">// Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log</span></span><br><span class="line">                Log.e(TAG, <span class="string">"SubscriberExceptionEvent subscriber "</span> + subscription.subscriber.getClass()</span><br><span class="line">                        + <span class="string">" threw an exception"</span>, cause);</span><br><span class="line">                SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) event;</span><br><span class="line">                Log.e(TAG, <span class="string">"Initial event "</span> + exEvent.causingEvent + <span class="string">" caused exception in "</span></span><br><span class="line">                        + exEvent.causingSubscriber, exEvent.throwable);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (logSubscriberExceptions) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">"Could not dispatch event: "</span> + event.getClass() + <span class="string">" to subscribing class "</span></span><br><span class="line">                            + subscription.subscriber.getClass(), cause);</span><br><span class="line">                &#125;</span><br><span class="line">                SubscriberExceptionEvent exEvent = <span class="keyword">new</span> SubscriberExceptionEvent(<span class="keyword">this</span>, cause, event,</span><br><span class="line">                        subscription.subscriber);</span><br><span class="line">                post(exEvent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** For ThreadLocal, much faster to set (and get multiple values). */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> class PostingThreadState &#123;</span><br><span class="line">        List&lt;<span class="keyword">Object</span>&gt; eventQueue = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">Object</span>&gt;();</span><br><span class="line">        <span class="built_in">boolean</span> isPosting;</span><br><span class="line">        <span class="built_in">boolean</span> isMainThread;</span><br><span class="line">        Subscription subscription;</span><br><span class="line">        <span class="keyword">Object</span> event;</span><br><span class="line">        <span class="built_in">boolean</span> canceled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course...</span></span><br><span class="line">    <span class="comment">/* public */</span>interface PostCallback &#123;</span><br><span class="line">        <span class="keyword">void</span> onPostCompleted(List&lt;SubscriberExceptionEvent&gt; exceptionEvents);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Subscription">Subscription</h3><p>保存了订阅者和订阅方法，重写了equals方法,priority用于确定在list中的顺序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object subscriber;</span><br><span class="line">    <span class="keyword">final</span> SubscriberMethod subscriberMethod;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> priority;</span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Becomes false as soon as &#123;@link EventBus#unregister(Object)&#125; is called, which is checked by queued event delivery</span><br><span class="line">     * &#123;@link EventBus#invokeSubscriber(PendingPost)&#125; to prevent race conditions.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> active;</span><br><span class="line"></span><br><span class="line">    Subscription(Object subscriber, SubscriberMethod subscriberMethod, <span class="keyword">int</span> priority) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subscriber = subscriber;</span><br><span class="line">        <span class="keyword">this</span>.subscriberMethod = subscriberMethod;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">        active = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (other <span class="keyword">instanceof</span> Subscription) &#123;</span><br><span class="line">            Subscription otherSubscription = (Subscription) other;</span><br><span class="line">            <span class="keyword">return</span> subscriber == otherSubscription.subscriber</span><br><span class="line">                    &amp;&amp; subscriberMethod.equals(otherSubscription.subscriberMethod);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subscriber.hashCode() + subscriberMethod.methodString.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="HandlerPoster">HandlerPoster</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerPoster</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//待发送队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxMillisInsideHandleMessage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> handlerActive;</span><br><span class="line"></span><br><span class="line">    HandlerPoster(EventBus eventBus, Looper looper, <span class="keyword">int</span> maxMillisInsideHandleMessage) &#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">        <span class="keyword">this</span>.eventBus = eventBus;</span><br><span class="line">        <span class="keyword">this</span>.maxMillisInsideHandleMessage = maxMillisInsideHandleMessage;</span><br><span class="line">        queue = <span class="keyword">new</span> PendingPostQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">	   <span class="comment">//放入队列</span></span><br><span class="line">            queue.enqueue(pendingPost);</span><br><span class="line">            <span class="keyword">if</span> (!handlerActive) &#123;</span><br><span class="line">                handlerActive = <span class="keyword">true</span>;</span><br><span class="line">		<span class="comment">//触发handleMessage方法，正常情况下都会返回false,looper退出时才会返回false</span></span><br><span class="line">                <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> rescheduled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> started = SystemClock.uptimeMillis();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">		<span class="comment">//队列中取出</span></span><br><span class="line">                PendingPost pendingPost = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                        <span class="comment">// Check again, this time in synchronized</span></span><br><span class="line">                        pendingPost = queue.poll();</span><br><span class="line">                        <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            handlerActive = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">		<span class="comment">//触发</span></span><br><span class="line">                eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">                <span class="keyword">long</span> timeInMethod = SystemClock.uptimeMillis() - started;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (timeInMethod &gt;= maxMillisInsideHandleMessage) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    rescheduled = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            handlerActive = rescheduled;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其它">其它</h3><p>AsyncPoster,BackgroundPoster都是runnable对象，调用线程池执行自己，与AsyncPoster中的任务并发执行，BackgroundPoster中的任务只在同一个线程中依次执行，而不是并发执行</p>
<h2 id="总结">总结</h2><p>1.学习eventbus可以对hashmap,CopyOnWriteArrayList,handler等的使用有所了解。<br>2.需要注意结束时需要unRegister，否则会导致内存泄漏。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>EventBus 是一个事件发布/订阅框架，通过解耦发布者和订阅者简化 Android 事件传递，事件传递既可用于 Android 四大组件间通讯，也可以用户异步线程和主线程间通讯等等。<br>传统的事件传递方式包括：Handler、BroadCastReceiver、回调等，相比之下 EventBus 的优点是代码简洁，使用简单，并将事件发布和订阅充分解耦。尤其在代码分层比较多时，需要层次往上传递，写很多回调事件。这时候就可以使用eventbus取代之。<br>]]>
    
    </summary>
    
      <category term="EventBus" scheme="http://coderrobin.com/tags/EventBus/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java并发编程基础-ReentrantLock及LinkedBlockingQueue源码分析]]></title>
    <link href="http://coderrobin.com/2015/02/12/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-ReentrantLock/"/>
    <id>http://coderrobin.com/2015/02/12/java并发编程基础-ReentrantLock/</id>
    <published>2015-02-12T15:57:48.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>ReentrantLock是一个较为常用的锁对象。在上次分析的uil开源项目中也多次被用到，下面谈谈其概念和基本使用。</p>
<h1 id="概念">概念</h1><p>一个可重入的互斥锁定 Lock，它具有与使用 synchronized 相同的一些基本行为和语义，但功能更强大。</p>
<h2 id="名词解释：">名词解释：</h2><h3 id="互斥">互斥</h3><p>表示同一时刻，多个线程中，只能有一个线程能获得该锁。但是多个线程都可以调用lock方法，只有一个会成功，其他的线程会被阻塞，直到该锁被释放</p>
<h3 id="可重入">可重入</h3><p>模仿synchronized 的语义；如果线程进入由线程已经拥有的监控器保护的 synchronized 块，就允许线程继续进行，当线程退出第二个（或者后续）synchronized 块的时候，不释放锁，只有线程退出它进入的监控器保护的第一个 synchronized 块时，才释放锁。<br>对于ReentrantLock，每次获得锁，并将请求计数置为一，如果同一个线程再次lock，计数器将递增，每次unlock时计数器值递减，直到计数器为0，锁释放<br><a id="more"></a></p>
<h2 id="lock方法过程">lock方法过程</h2><p>如果该锁没有被另一个线程保持，则lock时获取该锁定并立即返回，将锁定的保持计数设置为 1。<br>如果当前线程已经保持该锁定，则将保持计数加 1，并且该方法立即返回。<br>如果该锁定被另一个线程保持，则出于线程调度的目的，禁用当前线程，并且在获得锁定之前，该线程将一直处于休眠状态，此时锁定保持计数被设置为 1。</p>
<h2 id="unLock方法过程">unLock方法过程</h2><p>每次unlock时计数器值递减，直到计数器为0，释放锁</p>
<h2 id="Condition类">Condition类</h2><p>该类与lock绑定，用newCondition()方法创建，提供了线程之间通信的方式（类似信号量）。其使用基本与object类的wait,notify,notifyAll相同。<br>用condition.await()替换Object,wait()，调用时该线程阻塞，释放该线程的锁。<br>用condition.signal()替换Object.notify()，用condition.signalAll()替换Object.notifyAll()，唤醒该condition await方法所阻塞的线程 </p>
<h1 id="相对synchronized优势">相对synchronized优势</h1><p>锁投票（我也不是特别理解，可以通过投票获取锁？）<br>定时锁等候<br>中断锁等候<br>     线程A和B都要获取对象O的锁定，假设A获取了对象O锁，B将等待A释放对O的锁定，<br>     如果使用 synchronized ，如果A不释放，B将一直等下去，不能被中断<br>     如果 使用ReentrantLock，如果A不释放，可以使B在等待了足够长的时间以后，中断等待，而干别的事情</p>
<h1 id="使用">使用</h1><p>以下以linkedBlokingQueue源码为例子，来学习其使用。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> LinkedBlockingQueue&lt;E&gt; <span class="keyword">extends</span> AbstractQueue&lt;E&gt; <span class="keyword">implements</span> BlockingQueue&lt;E&gt;, java.io.Serializable &#123; </span><br><span class="line">      <span class="comment">//链表节点node类结构   </span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">class</span> Node&lt;E&gt; &#123;  </span><br><span class="line">          <span class="keyword">volatile</span> E item;<span class="comment">//volatile，保证了数据的可见性   </span></span><br><span class="line">          Node&lt;E&gt; <span class="keyword">next</span>;  </span><br><span class="line">          Node(E x) &#123; item = x; &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//容量</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;  </span><br><span class="line">      <span class="comment">//用原子变量,当前元素个数  </span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger <span class="keyword">count</span> = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);  </span><br><span class="line">      <span class="comment">//头节点</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; head;  </span><br><span class="line">      <span class="comment">//表尾节点 </span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; last;  </span><br><span class="line">      <span class="comment">//获取元素或删除元素时,要加的takeLock锁  </span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();  </span><br><span class="line">      <span class="comment">//获取元素时若队列为空，线程阻塞，直至notEmpty条件满足（被通知） </span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();  </span><br><span class="line">      <span class="comment">//插入元素时 要加putLock锁  </span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">new</span> ReentrantLock();  </span><br><span class="line">      <span class="comment">//插入时，若队列已满，线程阻塞，直至notFull条件满足（被通知）</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = putLock.newCondition();  </span><br><span class="line">      <span class="comment">// 唤醒等待的take操作,插入数据时若插入前链表中无数据，则调用，表示链表不再为空</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> signalNotEmpty() &#123;  </span><br><span class="line">          <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;  </span><br><span class="line">          takeLock.lock();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">              notEmpty.signal();  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">              takeLock.unlock();  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//唤醒等待插入操作，移除数据时若链表原先已满则调用，表示链表不再满 </span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> signalNotFull() &#123;  </span><br><span class="line">          <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;  </span><br><span class="line">          putLock.lock();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">              notFull.signal();  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">              putLock.unlock();  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">// 插入到链表尾部 </span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> insert(E x) &#123;  </span><br><span class="line">          last = last.<span class="keyword">next</span> = <span class="keyword">new</span> Node&lt;E&gt;(x);  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//获取并移除头元素 </span></span><br><span class="line">      <span class="keyword">private</span> E extract() &#123;  </span><br><span class="line">          Node&lt;E&gt; first = head.<span class="keyword">next</span>;  </span><br><span class="line">          head = first;  </span><br><span class="line">          E x = first.item;  </span><br><span class="line">          first.item = <span class="keyword">null</span>;  </span><br><span class="line">          <span class="keyword">return</span> x;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//锁住两把锁，在remove，clear等方法中调用   </span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> fullyLock() &#123;  </span><br><span class="line">          putLock.lock();  </span><br><span class="line">          takeLock.lock();  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//和fullyLock成对使用 </span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> fullyUnlock() &#123;  </span><br><span class="line">          takeLock.unlock();  </span><br><span class="line">          putLock.unlock();  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//默认构造，容量为 Integer.MAX_VALUE  </span></span><br><span class="line"> </span><br><span class="line">      <span class="keyword">public</span> LinkedBlockingQueue() &#123;  </span><br><span class="line">          <span class="keyword">this</span>(Integer.MAX_VALUE);  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//指定容量的构造   </span></span><br><span class="line">      <span class="keyword">public</span> LinkedBlockingQueue(<span class="keyword">int</span> capacity) &#123;  </span><br><span class="line">          <span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();  </span><br><span class="line">          <span class="keyword">this</span>.capacity = capacity;  </span><br><span class="line">          last = head = <span class="keyword">new</span> Node&lt;E&gt;(<span class="keyword">null</span>);  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//指定初始化集合的构造   </span></span><br><span class="line">      <span class="keyword">public</span> LinkedBlockingQueue(Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;  </span><br><span class="line">          <span class="keyword">this</span>(Integer.MAX_VALUE);  </span><br><span class="line">          <span class="keyword">for</span> (E e : c)  </span><br><span class="line">              add(e);  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//获得大小 </span></span><br><span class="line">        </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>() &#123;  </span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">count</span>.get();  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//剩余容量  </span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> remainingCapacity() &#123;  </span><br><span class="line">          <span class="keyword">return</span> capacity - <span class="keyword">count</span>.get();  </span><br><span class="line">      &#125;  </span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将指定元素插入到此队列的尾部，如已满，阻塞至队列中有元素被移除 </span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> put(E e) <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">          <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();  </span><br><span class="line">          <span class="keyword">int</span> c = -<span class="number">1</span>;  </span><br><span class="line">          <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;  </span><br><span class="line">          <span class="keyword">final</span> AtomicInteger <span class="keyword">count</span> = <span class="keyword">this</span>.<span class="keyword">count</span>;</span><br><span class="line">   <span class="comment">//加put锁，多个线程不能同时进入  </span></span><br><span class="line">          putLock.lockInterruptibly();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">              <span class="keyword">try</span> &#123;  </span><br><span class="line">    <span class="comment">//容量已满，则一直阻塞</span></span><br><span class="line">                  <span class="keyword">while</span> (<span class="keyword">count</span>.get() == capacity)  </span><br><span class="line">                      notFull.await();  </span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">                  notFull.signal(); <span class="comment">// propagate to a non-interrupted thread  </span></span><br><span class="line">                  <span class="keyword">throw</span> ie;  </span><br><span class="line">              &#125;  </span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">              insert(e);  </span><br><span class="line">              c = <span class="keyword">count</span>.getAndIncrement();</span><br><span class="line"><span class="comment">//通知链表未满  </span></span><br><span class="line">              <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)  </span><br><span class="line">                  notFull.signal();  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line"><span class="comment">//解锁，注意必须在finally里调用，反正各种异常导致没有unlock使线程死锁</span></span><br><span class="line">              putLock.unlock();  </span><br><span class="line">          &#125;  </span><br><span class="line">    <span class="comment">//通知链表非空</span></span><br><span class="line">          <span class="keyword">if</span> (c == <span class="number">0</span>)  </span><br><span class="line">              signalNotEmpty();  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">// 将指定元素插入到此队列的尾部，如有必要，则等待一定时间以使空间变得可用。 </span></span><br><span class="line">       </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">boolean</span> offer(E e, <span class="keyword">long</span> timeout, TimeUnit unit)  </span><br><span class="line">          <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">          <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();  </span><br><span class="line">          <span class="keyword">long</span> nanos = unit.toNanos(timeout);  </span><br><span class="line">          <span class="keyword">int</span> c = -<span class="number">1</span>;  </span><br><span class="line">          <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;  </span><br><span class="line">          <span class="keyword">final</span> AtomicInteger <span class="keyword">count</span> = <span class="keyword">this</span>.<span class="keyword">count</span>;  </span><br><span class="line">   <span class="comment">//加锁</span></span><br><span class="line">          putLock.lockInterruptibly();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">              <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                  <span class="comment">//未满可插入  </span></span><br><span class="line">                  <span class="keyword">if</span> (<span class="keyword">count</span>.get() &lt; capacity) &#123;  </span><br><span class="line">                      insert(e);  </span><br><span class="line">                      c = <span class="keyword">count</span>.getAndIncrement();</span><br><span class="line">	<span class="comment">//通知未满  </span></span><br><span class="line">                      <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)  </span><br><span class="line">                          notFull.signal();</span><br><span class="line">	<span class="comment">//跳出循环  </span></span><br><span class="line">                      <span class="keyword">break</span>;  </span><br><span class="line">                  &#125;  </span><br><span class="line">   <span class="comment">//队列已满，未能插入，等待时间是负的，直接返回</span></span><br><span class="line">                  <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)  </span><br><span class="line">                      <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">                  <span class="keyword">try</span> &#123;  </span><br><span class="line">    <span class="comment">//等待一定时间后再次尝试</span></span><br><span class="line">                      nanos = notFull.awaitNanos(nanos);  </span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">                      notFull.signal(); <span class="comment">// propagate to a non-interrupted thread  </span></span><br><span class="line">                      <span class="keyword">throw</span> ie;  </span><br><span class="line">                  &#125;  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line">              putLock.unlock();  </span><br><span class="line">          &#125;  </span><br><span class="line"><span class="comment">//通知已插入数据，链表非空</span></span><br><span class="line">          <span class="keyword">if</span> (c == <span class="number">0</span>)  </span><br><span class="line">              signalNotEmpty();  </span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//将指定元素插入到此队列的尾部（如果立即可行且不会超出此队列的容量）， </span></span><br><span class="line">       在成功时返回 <span class="keyword">true</span>，如果此队列已满，则返回 <span class="keyword">false</span>。 </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">boolean</span> offer(E e) &#123;  </span><br><span class="line">          <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();  </span><br><span class="line">          <span class="keyword">final</span> AtomicInteger <span class="keyword">count</span> = <span class="keyword">this</span>.<span class="keyword">count</span>;  </span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">count</span>.get() == capacity)  </span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">          <span class="keyword">int</span> c = -<span class="number">1</span>;  </span><br><span class="line">          <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;  </span><br><span class="line">          putLock.lock();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line"><span class="comment">//由于可能在lock被阻塞时其他线程进行了插入操作，需再次判断count</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">count</span>.get() &lt; capacity) &#123;  </span><br><span class="line">                  insert(e);  </span><br><span class="line">                  c = <span class="keyword">count</span>.getAndIncrement();</span><br><span class="line">    <span class="comment">//通知未满  </span></span><br><span class="line">                  <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)  </span><br><span class="line">                      notFull.signal();  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">              putLock.unlock();  </span><br><span class="line">          &#125;  </span><br><span class="line">  <span class="comment">//通知非空</span></span><br><span class="line">          <span class="keyword">if</span> (c == <span class="number">0</span>)  </span><br><span class="line">              signalNotEmpty();</span><br><span class="line">          <span class="comment">// &gt;0表示已成功插入  </span></span><br><span class="line">          <span class="keyword">return</span> c &gt;= <span class="number">0</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//获取并移除此队列的头部，若队列为空，则阻塞。  </span></span><br><span class="line">      <span class="keyword">public</span> E take() <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">          E x;  </span><br><span class="line">          <span class="keyword">int</span> c = -<span class="number">1</span>;  </span><br><span class="line">          <span class="keyword">final</span> AtomicInteger <span class="keyword">count</span> = <span class="keyword">this</span>.<span class="keyword">count</span>;  </span><br><span class="line">          <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;</span><br><span class="line">   <span class="comment">//加锁 </span></span><br><span class="line">          takeLock.lockInterruptibly();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">//队列为空时阻塞 </span></span><br><span class="line">                  <span class="keyword">while</span> (<span class="keyword">count</span>.get() == <span class="number">0</span>)  </span><br><span class="line">                      notEmpty.await();  </span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">                  notEmpty.signal(); <span class="comment">// propagate to a non-interrupted thread  </span></span><br><span class="line">                  <span class="keyword">throw</span> ie;  </span><br><span class="line">              &#125;  </span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">              x = extract();  </span><br><span class="line">              c = <span class="keyword">count</span>.getAndDecrement();</span><br><span class="line"><span class="comment">//通知非空  </span></span><br><span class="line">              <span class="keyword">if</span> (c &gt; <span class="number">1</span>)  </span><br><span class="line">                  notEmpty.signal();  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">              takeLock.unlock();  </span><br><span class="line">          &#125;  </span><br><span class="line">    <span class="comment">//通知未满</span></span><br><span class="line">          <span class="keyword">if</span> (c == capacity)  </span><br><span class="line">              signalNotFull();  </span><br><span class="line">          <span class="keyword">return</span> x;  </span><br><span class="line">      &#125;  </span><br><span class="line">        </span><br><span class="line">      <span class="comment">//与offer方法结构基本一致，若队列为空，则阻塞一段时间，一段时间后仍为空，则返回null</span></span><br><span class="line">      <span class="keyword">public</span> E poll(<span class="keyword">long</span> timeout, TimeUnit unit) <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">          E x = <span class="keyword">null</span>;  </span><br><span class="line">          <span class="keyword">int</span> c = -<span class="number">1</span>;  </span><br><span class="line">          <span class="keyword">long</span> nanos = unit.toNanos(timeout);  </span><br><span class="line">          <span class="keyword">final</span> AtomicInteger <span class="keyword">count</span> = <span class="keyword">this</span>.<span class="keyword">count</span>;  </span><br><span class="line">          <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;  </span><br><span class="line">          takeLock.lockInterruptibly();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">              <span class="keyword">for</span> (;;) &#123;  </span><br><span class="line">                  <span class="keyword">if</span> (<span class="keyword">count</span>.get() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                      x = extract();  </span><br><span class="line">                      c = <span class="keyword">count</span>.getAndDecrement();  </span><br><span class="line">                      <span class="keyword">if</span> (c &gt; <span class="number">1</span>)  </span><br><span class="line">                          notEmpty.signal();  </span><br><span class="line">                      <span class="keyword">break</span>;  </span><br><span class="line">                  &#125;  </span><br><span class="line">                  <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)  </span><br><span class="line">                      <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">                  <span class="keyword">try</span> &#123;  </span><br><span class="line">                      nanos = notEmpty.awaitNanos(nanos);  </span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">                      notEmpty.signal(); <span class="comment">// propagate to a non-interrupted thread  </span></span><br><span class="line">                      <span class="keyword">throw</span> ie;  </span><br><span class="line">                  &#125;  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">              takeLock.unlock();  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">if</span> (c == capacity)  </span><br><span class="line">              signalNotFull();  </span><br><span class="line">          <span class="keyword">return</span> x;  </span><br><span class="line">      &#125;  </span><br><span class="line">        </span><br><span class="line">      <span class="comment">////与offer方法结构基本一致 队列为空，不阻塞，直接返回null</span></span><br><span class="line">      <span class="keyword">public</span> E poll() &#123;  </span><br><span class="line">          <span class="keyword">final</span> AtomicInteger <span class="keyword">count</span> = <span class="keyword">this</span>.<span class="keyword">count</span>;  </span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">count</span>.get() == <span class="number">0</span>)  </span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">          E x = <span class="keyword">null</span>;  </span><br><span class="line">          <span class="keyword">int</span> c = -<span class="number">1</span>;  </span><br><span class="line">          <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;  </span><br><span class="line">          takeLock.lock();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">count</span>.get() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                  x = extract();  </span><br><span class="line">                  c = <span class="keyword">count</span>.getAndDecrement();  </span><br><span class="line">                  <span class="keyword">if</span> (c &gt; <span class="number">1</span>)  </span><br><span class="line">                      notEmpty.signal();  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">              takeLock.unlock();  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">if</span> (c == capacity)  </span><br><span class="line">              signalNotFull();  </span><br><span class="line">          <span class="keyword">return</span> x;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">//获取但不移除此队列的头；如果此队列为空，则返回 null。  </span></span><br><span class="line">      <span class="keyword">public</span> E peek() &#123;  </span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">count</span>.get() == <span class="number">0</span>)  </span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">          <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;  </span><br><span class="line">          takeLock.lock();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">              Node&lt;E&gt; first = head.<span class="keyword">next</span>;  </span><br><span class="line">              <span class="keyword">if</span> (first == <span class="keyword">null</span>)  </span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">              <span class="keyword">else</span>  </span><br><span class="line">                  <span class="keyword">return</span> first.item;  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">              takeLock.unlock();  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">/** </span><br><span class="line">       * 从此队列移除指定元素的单个实例（如果存在）。 </span><br><span class="line">       */</span>  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) &#123;  </span><br><span class="line">          <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">          <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">   <span class="comment">//同时加锁，此时其他线程不能插入，不能移除</span></span><br><span class="line">          fullyLock();  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">              Node&lt;E&gt; trail = head;  </span><br><span class="line">              Node&lt;E&gt; p = head.<span class="keyword">next</span>;</span><br><span class="line"><span class="comment">//遍历，获取到该元素  </span></span><br><span class="line">              <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                  <span class="keyword">if</span> (o.equals(p.item)) &#123;  </span><br><span class="line">                      removed = <span class="keyword">true</span>;  </span><br><span class="line">                      <span class="keyword">break</span>;  </span><br><span class="line">                  &#125;  </span><br><span class="line">                  trail = p;  </span><br><span class="line">                  p = p.<span class="keyword">next</span>;  </span><br><span class="line">              &#125;  </span><br><span class="line"><span class="comment">//删除该元素</span></span><br><span class="line">              <span class="keyword">if</span> (removed) &#123;  </span><br><span class="line">                  p.item = <span class="keyword">null</span>;  </span><br><span class="line">                  trail.<span class="keyword">next</span> = p.<span class="keyword">next</span>;  </span><br><span class="line">                  <span class="keyword">if</span> (last == p)  </span><br><span class="line">                      last = trail;  </span><br><span class="line">                  <span class="keyword">if</span> (<span class="keyword">count</span>.getAndDecrement() == capacity)  </span><br><span class="line">                      notFull.signalAll();  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">              fullyUnlock();  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">return</span> removed;  </span><br><span class="line">      &#125;  </span><br><span class="line">      ……  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ReentrantLock是一个较为常用的锁对象。在上次分析的uil开源项目中也多次被用到，下面谈谈其概念和基本使用。</p>
<h1 id="概念">概念</h1><p>一个可重入的互斥锁定 Lock，它具有与使用 synchronized 相同的一些基本行为和语义，但功能更强大。</p>
<h2 id="名词解释：">名词解释：</h2><h3 id="互斥">互斥</h3><p>表示同一时刻，多个线程中，只能有一个线程能获得该锁。但是多个线程都可以调用lock方法，只有一个会成功，其他的线程会被阻塞，直到该锁被释放</p>
<h3 id="可重入">可重入</h3><p>模仿synchronized 的语义；如果线程进入由线程已经拥有的监控器保护的 synchronized 块，就允许线程继续进行，当线程退出第二个（或者后续）synchronized 块的时候，不释放锁，只有线程退出它进入的监控器保护的第一个 synchronized 块时，才释放锁。<br>对于ReentrantLock，每次获得锁，并将请求计数置为一，如果同一个线程再次lock，计数器将递增，每次unlock时计数器值递减，直到计数器为0，锁释放<br>]]>
    
    </summary>
    
      <category term="ReentrantLock" scheme="http://coderrobin.com/tags/ReentrantLock/"/>
    
      <category term="java" scheme="http://coderrobin.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android RecyclerView使用及自定义itemAnimator]]></title>
    <link href="http://coderrobin.com/2015/02/11/Android-RecyclerView%E4%BD%BF%E7%94%A8/"/>
    <id>http://coderrobin.com/2015/02/11/Android-RecyclerView使用/</id>
    <published>2015-02-11T15:14:29.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>14年google io上google就开放了RecyclerView，导入support-v7包即可使用。<br>RecyclerView可以认为是AbsListview的升级版，但自带了对viewholder的使用，<br>与listview缓存convertview不同的是,Recyclerview缓存的是viewholder.<br>对每个item的动画也有较好的支持。<br><a id="more"></a></p>
<h1 id="基本使用">基本使用</h1><p>RecyclerView提供了以下5种角色<br>RecyclerView.Adapter<br>RecyclerView.ViewHolder<br>RecyclerView.LayoutManager     布局器，负责Item视图的布局<br>RecyclerView.ItemDecoration     每个item附加的子视图，可用来绘制Divider,设置padding等<br>RecyclerView.ItemAnimator     负责添加、删除数据时的动画效果</p>
<h2 id="在activity中使用">在activity中使用</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="annotation">@Override</span> </span><br><span class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123; </span><br><span class="line">       <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">       setContentView(R.layout.activity_main);  </span><br><span class="line">  </span><br><span class="line">       <span class="keyword">final</span> RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);  </span><br><span class="line">       <span class="comment">// 创建线性布局管理器</span></span><br><span class="line">       <span class="keyword">final</span> LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);  </span><br><span class="line">       <span class="comment">// 为RecyclerView指定布局管理对象  </span></span><br><span class="line">       recyclerView.setLayoutManager(layoutManager);  </span><br><span class="line">      </span><br><span class="line">       <span class="keyword">final</span> SampleRecyclerAdapter sampleRecyclerAdapter = <span class="keyword">new</span> SampleRecyclerAdapter();  </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置动画</span></span><br><span class="line">   	recyclerView.setItemAnimator(ItemAnimator)</span><br><span class="line"></span><br><span class="line">       recyclerView.setAdapter(sampleRecyclerAdapter);  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义adapter">自定义adapter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleRecyclerAdapter</span> <span class="keyword">extends</span> </span><br><span class="line">        <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">SampleRecyclerAdapter</span>.<span class="title">ViewHolder</span>&gt;  </span><br><span class="line"></span>&#123; </span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 用于创建onCreateViewHolder</span></span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parentViewGroup, <span class="keyword">int</span> i)</span>  </span><br><span class="line">    </span>&#123;  </span><br><span class="line">        View item = LayoutInflater.from(context).inflate(  </span><br><span class="line">                R.layout.***, parentViewGroup, <span class="keyword">false</span>);  </span><br><span class="line">        <span class="comment">//recyclerview未提供onitemclick方法，需要自己添加</span></span><br><span class="line"> item.setOnClickListener(...);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(item);  </span><br><span class="line">                  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为ViewHolder设置数据  </span></span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder viewHolder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span>  </span><br><span class="line">    </span>&#123;  </span><br><span class="line">        <span class="comment">//  获取当前item中显示的数据  </span></span><br><span class="line">        <span class="keyword">final</span> Model model = list.get(position);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//  设置要显示的数据  </span></span><br><span class="line">        viewHolder.textViewSample.setText(**);  </span><br><span class="line">        viewHolder.itemView.setTag(**);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span>  </span><br><span class="line">    </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> list.size();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//  删除指定的Item  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeData</span><span class="params">(<span class="keyword">int</span> position)</span>  </span><br><span class="line">    </span>&#123;  </span><br><span class="line">        list.remove(position);  </span><br><span class="line">        <span class="comment">//  通知RecyclerView控件某个Item已经被删除  </span></span><br><span class="line">        notifyItemRemoved(position);  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//  在指定位置添加一个新的Item  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Model model,<span class="keyword">int</span> positionToAdd)</span>  </span><br><span class="line">    </span>&#123;  </span><br><span class="line">   	    list.add(model);</span><br><span class="line">        <span class="comment">//  通知RecyclerView控件插入了某个Item  </span></span><br><span class="line">        notifyItemInserted(positionToAdd);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>  </span><br><span class="line">    </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView textViewSample;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span>  </span><br><span class="line">        </span>&#123;  </span><br><span class="line">            <span class="keyword">super</span>(itemView);  </span><br><span class="line">  </span><br><span class="line">            textViewSample = (TextView) itemView  </span><br><span class="line">                    .findViewById(R.id.textViewSample);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义itemAnimator">自定义itemAnimator</h1><p>基本使用其实与普通listview区别不大，自定义item动画是其比较复杂的部分。<br>谷歌官方的itemAnimator的解释如下：<br><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html" target="_blank" rel="external">https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html</a><br>下文为一个增加item时动画的示例，<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyItemAnimator</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemAnimator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;RecyclerView.ViewHolder&gt; mAnimationAddViewHolders = <span class="keyword">new</span> ArrayList&lt;RecyclerView.ViewHolder&gt;();</span><br><span class="line"> List&lt;RecyclerView.ViewHolder&gt; mAnimationRemoveViewHolders = <span class="keyword">new</span> ArrayList&lt;RecyclerView.ViewHolder&gt;();</span><br><span class="line">    <span class="comment">//需要执行动画时会系统会调用，用户无需手动调用</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">runPendingAnimations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mAnimationAddViewHolders.isEmpty()) &#123;</span><br><span class="line"> </span><br><span class="line">            AnimatorSet animator;</span><br><span class="line">            View <span class="keyword">target</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> RecyclerView.ViewHolder viewHolder : mAnimationAddViewHolders) &#123;</span><br><span class="line">                <span class="keyword">target</span> = viewHolder.itemView;</span><br><span class="line">                animator = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line"></span><br><span class="line">                animator.playTogether(</span><br><span class="line">                        ObjectAnimator.ofFloat(<span class="keyword">target</span>, <span class="string">"translationX"</span>, -<span class="keyword">target</span>.getMeasuredWidth(), <span class="number">0.0</span>f),</span><br><span class="line">                        ObjectAnimator.ofFloat(<span class="keyword">target</span>, <span class="string">"alpha"</span>, <span class="keyword">target</span>.getAlpha(), <span class="number">1.0</span>f)</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">                animator.setTarget(<span class="keyword">target</span>);</span><br><span class="line">                animator.setDuration(<span class="number">100</span>);</span><br><span class="line">                animator.addListener(<span class="keyword">new</span> AnimatorListener() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">                        mAnimationAddViewHolders.remove(viewHolder);</span><br><span class="line"> 			 <span class="keyword">if</span> (!isRunning()) &#123;</span><br><span class="line">			dispatchAnimationsFinished();</span><br><span class="line">			&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                animator.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(!mAnimationRemoveViewHolders.isEmpty())&#123;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//remove时系统会调用，返回值表示是否需要执行动画</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">animateRemove</span><span class="params">(RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">return</span> mAnimationRemoveViewHolders.<span class="title">add</span><span class="params">(viewHolder)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//viewholder添加时系统会调用</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">animateAdd</span><span class="params">(RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mAnimationAddViewHolders.<span class="title">add</span><span class="params">(viewHolder)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">animateMove</span><span class="params">(RecyclerView.ViewHolder viewHolder, <span class="keyword">int</span> i, <span class="keyword">int</span> i2, <span class="keyword">int</span> i3, <span class="keyword">int</span> i4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">endAnimation</span><span class="params">(RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">endAnimations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !(mAnimationAddViewHolders.isEmpty()&amp;&amp;mAnimationRemoveViewHolders.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="总结">总结</h1><p>RecycyclerView的使用还是比较简单的，相对listview来讲帮我们处理了较多的逻辑，<br>但onClick监听等都要自己添加。<br>对于item的动画，实现其实也不是特别难。。<br>以下为github上第三方的itemAnimation，看了以后会对其使用了解更充分。<br><a href="https://github.com/dkmeteor/RecyclerViewAnimator" target="_blank" rel="external">https://github.com/dkmeteor/RecyclerViewAnimator</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简介">简介</h1><p>14年google io上google就开放了RecyclerView，导入support-v7包即可使用。<br>RecyclerView可以认为是AbsListview的升级版，但自带了对viewholder的使用，<br>与listview缓存convertview不同的是,Recyclerview缓存的是viewholder.<br>对每个item的动画也有较好的支持。<br>]]>
    
    </summary>
    
      <category term="RecyclerView" scheme="http://coderrobin.com/tags/RecyclerView/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目解析-Android-Universal-Image-Loader]]></title>
    <link href="http://coderrobin.com/2015/02/08/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E8%A7%A3%E6%9E%90-Android-Universal-Image-Loader/"/>
    <id>http://coderrobin.com/2015/02/08/开源项目解析-Android-Universal-Image-Loader/</id>
    <published>2015-02-08T14:42:26.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>Android-Universal-Image-Loader是一个用来加载图片（包括网络图片和本地图片）的开源项目，实现了网络图片的下载、本地图片的加载、图片的解析、图片的缓存等机制。<br>其实很多大神都已经解析过此开源项目。<br>包括但不限于以下博客<br><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/huxian99/Android%20Universal%20Image%20Loader%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90" target="_blank" rel="external">codekk解析</a><br>夏安明的3篇博文<br><a href="http://blog.csdn.net/xiaanming/article/details/26810303" target="_blank" rel="external">Android开源框架Universal-Image-Loader完全解析（一）—- 基本介绍及使用</a><br><a href="http://blog.csdn.net/xiaanming/article/details/27525741" target="_blank" rel="external">Android开源框架Universal-Image-Loader完全解析（二）—- 图片缓存策略详解</a><br><a href="http://blog.csdn.net/xiaanming/article/details/39057201" target="_blank" rel="external">Android开源框架Universal-Image-Loader完全解析（三）—-源代码解读</a><br> 但我还是继续写这篇博文的原因主要还是让自己好好看下这部分代码。哈哈，大家想要了解的话看上面几篇博客也已经够了。<br><a id="more"></a></p>
<h1 id="使用">使用</h1><p>对于其使用非常简单</p>
<h2 id="初始化与配置ImageLoader">初始化与配置ImageLoader</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认配置</span></div><div class="line"> ImageLoaderConfiguration configuration <span class="subst">=</span> ImageLoaderConfiguration </div><div class="line"> <span class="built_in">.</span>createDefault(this); </div><div class="line"></div><div class="line"><span class="comment">//个性化配置，建造者模式</span></div><div class="line"> File cacheDir <span class="subst">=</span> StorageUtils<span class="built_in">.</span>getCacheDirectory(context); </div><div class="line"> ImageLoaderConfiguration config <span class="subst">=</span> <span class="literal">new</span> ImageLoaderConfiguration<span class="built_in">.</span>Builder(context) </div><div class="line"> <span class="built_in">.</span>memoryCacheExtraOptions(<span class="number">480</span>, <span class="number">800</span>) <span class="comment">// 默认屏幕大小</span></div><div class="line"> <span class="built_in">.</span>diskCacheExtraOptions(<span class="number">480</span>, <span class="number">800</span>, CompressFormat<span class="built_in">.</span>JPEG, <span class="number">75</span>, <span class="built_in">null</span>) </div><div class="line"> <span class="built_in">.</span>taskExecutor(<span class="attribute">…</span>) <span class="comment">//线程池</span></div><div class="line"> <span class="built_in">.</span>taskExecutorForCachedImages(<span class="attribute">…</span>) </div><div class="line"> <span class="built_in">.</span>threadPoolSize(<span class="number">3</span>) <span class="comment">//</span></div><div class="line"> <span class="built_in">.</span>threadPriority(<span class="keyword">Thread</span><span class="built_in">.</span>NORM_PRIORITY <span class="subst">-</span> <span class="number">1</span>) <span class="comment">// 线程优先级</span></div><div class="line"> <span class="built_in">.</span>tasksProcessingOrder(QueueProcessingType<span class="built_in">.</span>FIFO) <span class="comment">//处理顺序，先进先出等 </span></div><div class="line"> <span class="built_in">.</span>denyCacheImageMultipleSizesInMemory() </div><div class="line"> <span class="built_in">.</span>memoryCache(<span class="literal">new</span> LruMemoryCache(<span class="number">2</span> <span class="subst"><em></em></span> <span class="number">1024</span> <span class="subst"></span> <span class="number">1024</span>)) <span class="comment">//内存缓存 </span></div><div class="line"> <span class="built_in">.</span>memoryCacheSize(<span class="number">2</span> <span class="subst"><em></em></span> <span class="number">1024</span> <span class="subst"></span> <span class="number">1024</span>) </div><div class="line"> <span class="built_in">.</span>memoryCacheSizePercentage(<span class="number">13</span>) <span class="comment">// default </span></div><div class="line"> <span class="built_in">.</span>diskCache(<span class="literal">new</span> UnlimitedDiscCache(cacheDir)) <span class="comment">// 磁盘缓存，自定义地址</span></div><div class="line"> <span class="built_in">.</span>diskCacheSize(<span class="number">50</span> <span class="subst"><em></em></span> <span class="number">1024</span> <span class="subst"></span> <span class="number">1024</span>) </div><div class="line"> <span class="built_in">.</span>diskCacheFileCount(<span class="number">100</span>) </div><div class="line"> <span class="built_in">.</span>diskCacheFileNameGenerator(<span class="literal">new</span> HashCodeFileNameGenerator()) <span class="comment">// default </span></div><div class="line"> <span class="built_in">.</span>imageDownloader(<span class="literal">new</span> BaseImageDownloader(context)) <span class="comment">// 下载器 </span></div><div class="line"> <span class="built_in">.</span>imageDecoder(<span class="literal">new</span> BaseImageDecoder()) <span class="comment">// 解析器</span></div><div class="line"> <span class="built_in">.</span>defaultDisplayImageOptions(DisplayImageOptions<span class="built_in">.</span>createSimple()) </div><div class="line"> <span class="built_in">.</span>build(); </div><div class="line"> ImageLoader<span class="built_in">.</span>getInstance()<span class="built_in">.</span>init(configuration);</div></pre></td></tr></table></figure>

<h2 id="加载配置项">加载配置项</h2><p></p><p>对于每次要加载的显示项在加载时可进行设置</p><p></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">DisplayImageOptions options = new DisplayImageOptions.Builder() </div><div class="line"> .showImageOnLoading(R.drawable.ic_stub) //设置加载前默认图片</div><div class="line"> .showImageForEmptyUri(R.drawable.ic_empty) </div><div class="line"> .showImageOnFail(R.drawable.ic_error) </div><div class="line"> .resetViewBeforeLoading(false) //加载前会清空图片</div><div class="line"> .delayBeforeLoading(<span class="number">1000</span>) </div><div class="line"> .cacheInMemory(true) //开始缓存</div><div class="line"> .cacheOnDisk(true) </div><div class="line"> .preProcessor(<span class="keyword">…</span>) </div><div class="line"> .postProcessor(<span class="keyword">…</span>) </div><div class="line"> .extraForDownloader(<span class="keyword">…</span>) </div><div class="line"> .considerExifParams(false) // default </div><div class="line"> .imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2) //类似imageview scaleType</div><div class="line"> .bitmapConfig(Bitmap.Config.ARGB_8888) // 在要求不高时可以用<span class="number">555</span>缩小内存占用 </div><div class="line"> .decodingOptions(<span class="keyword">…</span>) </div><div class="line"> .displayer(new SimpleBitmapDisplayer()) // 渲染器，可以加一些特殊效果，例如矩形圆角等 </div><div class="line"> .handler(new Handler()) // default </div><div class="line"> .build();</div></pre></td></tr></table></figure>

<h2 id="下载与加载图片">下载与加载图片</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> loadImage需要自己给imageview在回调里设置图片</div><div class="line"> ImageLoader.getInstance().loadImage(imageUrl, mImageSize, options, <span class="keyword">new</span> SimpleImageLoadingListener(){ </div><div class="line"> </div><div class="line"> <span class="annotation">@Override</span> </div><div class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadingComplete</span>(String imageUri, View view, </div><div class="line"> Bitmap loadedImage) { </div><div class="line"> <span class="keyword">super</span>.onLoadingComplete(imageUri, view, loadedImage); </div><div class="line"> mImageView.setImageBitmap(loadedImage); </div><div class="line"> } </div><div class="line"> </div><div class="line"> }); </div><div class="line">或</div><div class="line">displayImage直接将imageview传给displayImage方法</div><div class="line"> ImageLoader.getInstance().displayImage(imageUrl, mImageView, options);</div></pre></td></tr></table></figure>

<h2 id="其它TIP">其它TIP</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">设置滑动时不加载</div><div class="line">setOnScrollListener(<span class="keyword">new</span> PauseOnScrollListener(imageLoader, pauseOnScroll, pauseOnFling)); </div><div class="line"></div><div class="line">图片url</div><div class="line"> <span class="built_in">String</span> netPath=<span class="string">“<a href="http://coderrobin/image/.png" target="_blank" rel="external">http://coderrobin/image/.png</a>“</span>;</div><div class="line"> <span class="built_in">String</span> localPath=<span class="string">“/mnt/sdcard/coderrobin.png”</span> </div><div class="line"> <span class="built_in">String</span> contentprividerUrl = <span class="string">“content://media/external/audio/albumart/13”</span>; </div><div class="line"> <span class="comment">//图片来源于assets </span></div><div class="line"> <span class="built_in">String</span> assetsUrl = Scheme.ASSETS.wrap(<span class="string">“image.png”</span>); </div><div class="line"> <span class="comment">//图片来源于 </span></div><div class="line"> <span class="built_in">String</span> drawableUrl = Scheme.DRAWABLE.wrap(<span class="string">“R.drawable.image”</span>);</div></pre></td></tr></table></figure>

<h1 id="源码分析">源码分析</h1><p>源码涉及的代码较多，本文只分析比较核心的几个类</p>
<h2 id="uil涉及到的模块与概念">uil涉及到的模块与概念</h2><p>ImageLoaderEngine：任务分发器，负责分发LoadAndDisplayImageTask和ProcessAndDisplayImageTask给具体的线程池去执行<br>ImageAware：显示图片的对象，可以是ImageView等,主要为对imageview用弱引用封装，并且增加了获取imageview参数（宽高等）的接口<br>ImageDownloader：图片下载器，负责从图片的各个来源获取输入流（网络、本地等）<br>Cache：图片缓存，分为MemoryCache和DiskCache。<br>MemoryCache：内存图片缓存，常用LruMemoryCache。<br>DiskCache：磁盘图片缓存.<br>ImageDecoder：图片解码器，负责将图片输入流InputStream转换为Bitmap对象,默认调用bitmaoFactory.decode方法<br>BitmapProcessor：图片处理器，负责从缓存读取或写入前对图片进行处理。<br>BitmapDisplayer：将Bitmap对象显示在相应的控件ImageAware上, 加一些特殊显示效果<br>LoadAndDisplayImageTask：用于加载并显示图片的任务。<br>ProcessAndDisplayImageTask：用于处理并显示图片的任务。<br>DisplayBitmapTask：用于显示图片的任务。</p>
<h2 id="ViewAware分析，对view控件的封装,ImageViewAware即继承该类">ViewAware分析，对view控件的封装,ImageViewAware即继承该类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewAware</span> <span class="keyword">implements</span> <span class="title">ImageAware</span> </span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> Reference&lt;View&gt; viewRef;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">boolean</span> checkActualViewSize;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ViewAware</span><span class="params">(View view, <span class="keyword">boolean</span> checkActualViewSize)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (view == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"view must not be null"</span>);</span><br><span class="line">               <span class="comment">//弱引用封装view,避免不能被系统回收</span></span><br><span class="line">		<span class="keyword">this</span>.viewRef = <span class="keyword">new</span> WeakReference&lt;View&gt;(view);</span><br><span class="line">		<span class="keyword">this</span>.checkActualViewSize = checkActualViewSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取宽度方法，分为是不是wrap_content(onMeasure中at_most)</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		View view = viewRef.get();</span><br><span class="line">		<span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">final</span> ViewGroup.LayoutParams params = view.getLayoutParams();</span><br><span class="line">			<span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (checkActualViewSize &amp;&amp; params != <span class="keyword">null</span> &amp;&amp; params.width != ViewGroup.LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">				width = view.getWidth(); <span class="comment">// Get actual image width</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (width &lt;= <span class="number">0</span> &amp;&amp; params != <span class="keyword">null</span>) width = params.width; <span class="comment">// Get layout width parameter</span></span><br><span class="line">			<span class="keyword">return</span> width;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">       <span class="comment">//设置图片，用looper判断是否在主线程</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setImageBitmap</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (Looper.myLooper() == Looper.getMainLooper()) &#123;</span><br><span class="line">			View view = viewRef.get();</span><br><span class="line">			<span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">				setImageBitmapInto(bitmap, view);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			L.w(WARN_CANT_SET_BITMAP);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ImageLoader类分析">ImageLoader类分析</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ImageLoader &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ImageLoaderConfiguration configuration;</span><br><span class="line">	<span class="comment">//任务引擎（分发器）</span></span><br><span class="line">	<span class="keyword">private</span> ImageLoaderEngine engine;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ImageLoadingListener emptyListener = <span class="keyword">new</span> SimpleImageLoadingListener();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ImageLoader instance;</span><br><span class="line">       <span class="comment">//单例，双重加锁</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ImageLoader getInstance() &#123;</span><br><span class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (ImageLoader.<span class="keyword">class</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">					instance = <span class="keyword">new</span> ImageLoader();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> ImageLoader() &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化，必须传递配置项，否则报错</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> init(ImageLoaderConfiguration configuration) &#123;</span><br><span class="line">		<span class="keyword">if</span> (configuration == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(ERROR_INIT_CONFIG_WITH_NULL);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.configuration == <span class="keyword">null</span>) &#123;</span><br><span class="line">			L.d(LOG_INIT_CONFIG);</span><br><span class="line">			engine = <span class="keyword">new</span> ImageLoaderEngine(configuration);</span><br><span class="line">			<span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			L.w(WARNING_RE_INIT_CONFIG);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//省略很多displayImage各种形参的方法</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//displayImage最终调用到的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> displayImage(String uri, ImageAware imageAware, DisplayImageOptions <span class="keyword">options</span>,</span><br><span class="line">			ImageLoadingListener listener, ImageLoadingProgressListener progressListener) &#123;</span><br><span class="line">		checkConfiguration();</span><br><span class="line">		<span class="keyword">if</span> (imageAware == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(ERROR_WRONG_ARGUMENTS);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (listener == <span class="keyword">null</span>) &#123;</span><br><span class="line">			listener = emptyListener;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">options</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">options</span> = configuration.defaultDisplayImageOptions;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//url为空</span></span><br><span class="line">		<span class="keyword">if</span> (TextUtils.isEmpty(uri)) &#123;</span><br><span class="line">			engine.cancelDisplayTaskFor(imageAware);</span><br><span class="line">			listener.onLoadingStarted(uri, imageAware.getWrappedView());</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">options</span>.shouldShowImageForEmptyUri()) &#123;</span><br><span class="line">				imageAware.setImageDrawable(<span class="keyword">options</span>.getImageForEmptyUri(configuration.resources));</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				imageAware.setImageDrawable(<span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			listener.onLoadingComplete(uri, imageAware.getWrappedView(), <span class="keyword">null</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ImageSize targetSize = ImageSizeUtils.defineTargetSizeForView(imageAware, configuration.getMaxImageSize());</span><br><span class="line">		String memoryCacheKey = MemoryCacheUtils.generateKey(uri, targetSize);</span><br><span class="line">		engine.prepareDisplayTaskFor(imageAware, memoryCacheKey);</span><br><span class="line">		</span><br><span class="line">		listener.onLoadingStarted(uri, imageAware.getWrappedView());</span><br><span class="line">		<span class="comment">//在内存缓存中是否存在</span></span><br><span class="line">		Bitmap bmp = configuration.memoryCache.get(memoryCacheKey);</span><br><span class="line">		<span class="comment">//已存在</span></span><br><span class="line">		<span class="keyword">if</span> (bmp != <span class="keyword">null</span> &amp;&amp; !bmp.isRecycled()) &#123;</span><br><span class="line">			L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey);</span><br><span class="line">		 <span class="comment">//需要处理时进行处理</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">options</span>.shouldPostProcess()) &#123;</span><br><span class="line">				ImageLoadingInfo imageLoadingInfo = <span class="keyword">new</span> ImageLoadingInfo(uri, imageAware, targetSize, memoryCacheKey,</span><br><span class="line">						<span class="keyword">options</span>, listener, progressListener, engine.getLockForUri(uri));</span><br><span class="line">				ProcessAndDisplayImageTask displayTask = <span class="keyword">new</span> ProcessAndDisplayImageTask(engine, bmp, imageLoadingInfo,</span><br><span class="line">						defineHandler(<span class="keyword">options</span>));</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">options</span>.isSyncLoading()) &#123;</span><br><span class="line">					displayTask.run();</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					engine.submit(displayTask);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//直接调用显示模块显示</span></span><br><span class="line">				<span class="keyword">options</span>.getDisplayer().display(bmp, imageAware, LoadedFrom.MEMORY_CACHE);</span><br><span class="line">				listener.onLoadingComplete(uri, imageAware.getWrappedView(), bmp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//显示默认值</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">options</span>.shouldShowImageOnLoading()) &#123;</span><br><span class="line">				imageAware.setImageDrawable(<span class="keyword">options</span>.getImageOnLoading(configuration.resources));</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">options</span>.isResetViewBeforeLoading()) &#123;</span><br><span class="line">				imageAware.setImageDrawable(<span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			ImageLoadingInfo imageLoadingInfo = <span class="keyword">new</span> ImageLoadingInfo(uri, imageAware, targetSize, memoryCacheKey,</span><br><span class="line">					<span class="keyword">options</span>, listener, progressListener, engine.getLockForUri(uri));</span><br><span class="line">			LoadAndDisplayImageTask displayTask = <span class="keyword">new</span> LoadAndDisplayImageTask(engine, imageLoadingInfo,</span><br><span class="line">					defineHandler(<span class="keyword">options</span>));</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">options</span>.isSyncLoading()) &#123;</span><br><span class="line">				displayTask.run();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				engine.submit(displayTask);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//loadImage,最终仍调用displayImage但imageAware是个NonViewAware</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> loadImage(String uri, ImageSize targetImageSize, DisplayImageOptions <span class="keyword">options</span>,</span><br><span class="line">			ImageLoadingListener listener, ImageLoadingProgressListener progressListener) &#123;</span><br><span class="line">		checkConfiguration();</span><br><span class="line">		<span class="keyword">if</span> (targetImageSize == <span class="keyword">null</span>) &#123;</span><br><span class="line">			targetImageSize = configuration.getMaxImageSize();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">options</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">options</span> = configuration.defaultDisplayImageOptions;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		NonViewAware imageAware = <span class="keyword">new</span> NonViewAware(uri, targetImageSize, ViewScaleType.CROP);</span><br><span class="line">		displayImage(uri, imageAware, <span class="keyword">options</span>, listener, progressListener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ImageLoaderEngine引擎，负责提交任务给各线程池">ImageLoaderEngine引擎，负责提交任务给各线程池</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> ImageLoaderEngine &#123;</span><br><span class="line">      ...</span><br><span class="line">	<span class="comment">/** Submits task to execution pool */</span></span><br><span class="line">	<span class="keyword">void</span> submit(<span class="keyword">final</span> LoadAndDisplayImageTask <span class="keyword">task</span>) &#123;</span><br><span class="line">		taskDistributor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			@Override</span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">				<span class="keyword">File</span> image = configuration.diskCache.get(<span class="keyword">task</span>.getLoadingUri());</span><br><span class="line">				<span class="keyword">boolean</span> isImageCachedOnDisk = image != <span class="keyword">null</span> &amp;&amp; image.exists();</span><br><span class="line">				initExecutorsIfNeed();</span><br><span class="line">				<span class="keyword">if</span> (isImageCachedOnDisk) &#123;</span><br><span class="line">					taskExecutorForCachedImages.execute(<span class="keyword">task</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					taskExecutor.execute(<span class="keyword">task</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Submits task to execution pool */</span></span><br><span class="line">	<span class="keyword">void</span> submit(ProcessAndDisplayImageTask <span class="keyword">task</span>) &#123;</span><br><span class="line">		initExecutorsIfNeed();</span><br><span class="line">		taskExecutorForCachedImages.execute(<span class="keyword">task</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="各task解析">各task解析</h2><p>所谓task,就是实现runnable接口的类</p>
<h3 id="LoadAndDisplayImageTask">LoadAndDisplayImageTask</h3><p>负责从网络或者本地获得bitmap，经过处理器处理后（可没有处理器），交给DisplayBitmapTask负责后续显示逻辑<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">	public void <span class="keyword">run</span>() &#123;</span><br><span class="line">		<span class="keyword">if</span> (waitIfPaused()) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (delayIfNeed()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		ReentrantLock loadFromUriLock = imageLoadingInfo.loadFromUriLock;</span><br><span class="line">		<span class="keyword">L</span>.<span class="literal">d</span>(LOG_START_DISPLAY_IMAGE_TASK, memoryCacheKey);</span><br><span class="line">		<span class="keyword">if</span> (loadFromUriLock.isLocked()) &#123;</span><br><span class="line">			<span class="keyword">L</span>.<span class="literal">d</span>(LOG_WAITING_FOR_IMAGE_LOADED, memoryCacheKey);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		loadFromUriLock.lock();</span><br><span class="line">		Bitmap bmp;</span><br><span class="line">		try &#123;</span><br><span class="line">			checkTaskNotActual();</span><br><span class="line">		<span class="comment">//查看内存缓存中是否已存在</span></span><br><span class="line">			bmp = configuration.memoryCache.<span class="literal">get</span>(memoryCacheKey);</span><br><span class="line">			<span class="keyword">if</span> (bmp == null || bmp.isRecycled()) &#123;</span><br><span class="line">				<span class="comment">//获取butmap</span></span><br><span class="line">				bmp = tryLoadBitmap();</span><br><span class="line">				<span class="keyword">if</span> (bmp == null) <span class="keyword">return</span>; <span class="comment">// listener callback already was fired</span></span><br><span class="line"></span><br><span class="line">				checkTaskNotActual();</span><br><span class="line">				checkTaskInterrupted();</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (options.shouldPreProcess()) &#123;</span><br><span class="line">					<span class="keyword">L</span>.<span class="literal">d</span>(LOG_PREPROCESS_IMAGE, memoryCacheKey);</span><br><span class="line">					bmp = options.getPreProcessor().process(bmp);</span><br><span class="line">					<span class="keyword">if</span> (bmp == null) &#123;</span><br><span class="line">						<span class="keyword">L</span>.<span class="literal">e</span>(ERROR_PRE_PROCESSOR_NULL, memoryCacheKey);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (bmp != null &amp;&amp; options.isCacheInMemory()) &#123;</span><br><span class="line">					<span class="keyword">L</span>.<span class="literal">d</span>(LOG_CACHE_IMAGE_IN_MEMORY, memoryCacheKey);</span><br><span class="line">					configuration.memoryCache.put(memoryCacheKey, bmp);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				loadedFrom = LoadedFrom.MEMORY_CACHE;</span><br><span class="line">				<span class="keyword">L</span>.<span class="literal">d</span>(LOG_GET_IMAGE_FROM_MEMORY_CACHE_AFTER_WAITING, memoryCacheKey);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (bmp != null &amp;&amp; options.shouldPostProcess()) &#123;</span><br><span class="line">				<span class="keyword">L</span>.<span class="literal">d</span>(LOG_POSTPROCESS_IMAGE, memoryCacheKey);</span><br><span class="line">				bmp = options.getPostProcessor().process(bmp);</span><br><span class="line">				<span class="keyword">if</span> (bmp == null) &#123;</span><br><span class="line">					<span class="keyword">L</span>.<span class="literal">e</span>(ERROR_POST_PROCESSOR_NULL, memoryCacheKey);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			checkTaskNotActual();</span><br><span class="line">			checkTaskInterrupted();</span><br><span class="line">		&#125; catch (TaskCancelledException <span class="keyword">e</span>) &#123;</span><br><span class="line">			fireCancelEvent();</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			loadFromUriLock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		DisplayBitmapTask displayBitmapTask = new DisplayBitmapTask(bmp, imageLoadingInfo, engine, loadedFrom);</span><br><span class="line">		runTask(displayBitmapTask, syncLoading, handler, engine);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	private Bitmap tryLoadBitmap() throws TaskCancelledException &#123;</span><br><span class="line">		Bitmap bitmap = null;</span><br><span class="line">		try &#123;</span><br><span class="line">		<span class="comment">//磁盘缓存中是否已存在</span></span><br><span class="line">			<span class="keyword">File</span> imageFile = configuration.diskCache.<span class="literal">get</span>(uri);</span><br><span class="line">			<span class="keyword">if</span> (imageFile != null &amp;&amp; imageFile.exists()) &#123;</span><br><span class="line">				<span class="keyword">L</span>.<span class="literal">d</span>(LOG_LOAD_IMAGE_FROM_DISK_CACHE, memoryCacheKey);</span><br><span class="line">				loadedFrom = LoadedFrom.DISC_CACHE;</span><br><span class="line"></span><br><span class="line">				checkTaskNotActual();</span><br><span class="line">				bitmap = decodeImage(Scheme.<span class="keyword">FILE</span>.wrap(imageFile.getAbsolutePath()));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (bitmap == null || bitmap.getWidth() &lt;= 0 || bitmap.getHeight() &lt;= 0) &#123;</span><br><span class="line">				<span class="keyword">L</span>.<span class="literal">d</span>(LOG_LOAD_IMAGE_FROM_NETWORK, memoryCacheKey);</span><br><span class="line">				loadedFrom = LoadedFrom.NETWORK;</span><br><span class="line"></span><br><span class="line">				String imageUriForDecoding = uri;</span><br><span class="line">				<span class="keyword">if</span> (options.isCacheOnDisk() &amp;&amp; tryCacheImageOnDisk()) &#123;</span><br><span class="line">					imageFile = configuration.diskCache.<span class="literal">get</span>(uri);</span><br><span class="line">					<span class="keyword">if</span> (imageFile != null) &#123;</span><br><span class="line">						imageUriForDecoding = Scheme.<span class="keyword">FILE</span>.wrap(imageFile.getAbsolutePath());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				checkTaskNotActual();</span><br><span class="line">				bitmap = decodeImage(imageUriForDecoding);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (bitmap == null || bitmap.getWidth() &lt;= 0 || bitmap.getHeight() &lt;= 0) &#123;</span><br><span class="line">					fireFailEvent(FailType.DECODING_ERROR, null);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; catch (IllegalStateException <span class="keyword">e</span>) &#123;</span><br><span class="line">			fireFailEvent(FailType.NETWORK_DENIED, null);</span><br><span class="line">		&#125; catch (TaskCancelledException <span class="keyword">e</span>) &#123;</span><br><span class="line">			throw <span class="keyword">e</span>;</span><br><span class="line">		&#125; catch (IOException <span class="keyword">e</span>) &#123;</span><br><span class="line">			<span class="keyword">L</span>.<span class="literal">e</span>(<span class="keyword">e</span>);</span><br><span class="line">			fireFailEvent(FailType.IO_ERROR, <span class="keyword">e</span>);</span><br><span class="line">		&#125; catch (OutOfMemoryError <span class="keyword">e</span>) &#123;</span><br><span class="line">			<span class="keyword">L</span>.<span class="literal">e</span>(<span class="keyword">e</span>);</span><br><span class="line">			fireFailEvent(FailType.OUT_OF_MEMORY, <span class="keyword">e</span>);</span><br><span class="line">		&#125; catch (Throwable <span class="keyword">e</span>) &#123;</span><br><span class="line">			<span class="keyword">L</span>.<span class="literal">e</span>(<span class="keyword">e</span>);</span><br><span class="line">			fireFailEvent(FailType.UNKNOWN, <span class="keyword">e</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> bitmap;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="ProcessAndDisplayImageTask">ProcessAndDisplayImageTask</h3><p>负责获取到bitmap后进行前置处理，处理完成后交给DisplayBitmapTask负责显示<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		L.d(LOG_POSTPROCESS_IMAGE, imageLoadingInfo.memoryCacheKey);</span><br><span class="line"></span><br><span class="line">		BitmapProcessor processor = imageLoadingInfo.options.getPostProcessor();</span><br><span class="line">		Bitmap processedBitmap = processor.process(bitmap);</span><br><span class="line">		DisplayBitmapTask displayBitmapTask = <span class="keyword">new</span> DisplayBitmapTask(processedBitmap, imageLoadingInfo, engine,</span><br><span class="line">				LoadedFrom.MEMORY_CACHE);</span><br><span class="line"><span class="comment">//静态方法，只是扔给线程池处理，与LoadAndDisplayImageTask无关</span></span><br><span class="line">		LoadAndDisplayImageTask.runTask(displayBitmapTask, imageLoadingInfo.options.isSyncLoading(), <span class="keyword">handler</span>, engine);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="DisplayBitmapTask">DisplayBitmapTask</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">	public void <span class="keyword">run</span>() &#123;</span><br><span class="line">		<span class="keyword">if</span> (imageAware.isCollected()) &#123;</span><br><span class="line">			<span class="keyword">L</span>.<span class="literal">d</span>(LOG_TASK_CANCELLED_IMAGEAWARE_COLLECTED, memoryCacheKey);</span><br><span class="line">			listener.onLoadingCancelled(imageUri, imageAware.getWrappedView());</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (isViewWasReused()) &#123;</span><br><span class="line">			<span class="keyword">L</span>.<span class="literal">d</span>(LOG_TASK_CANCELLED_IMAGEAWARE_REUSED, memoryCacheKey);</span><br><span class="line">			listener.onLoadingCancelled(imageUri, imageAware.getWrappedView());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">L</span>.<span class="literal">d</span>(LOG_DISPLAY_IMAGE_IN_IMAGEAWARE, loadedFrom, memoryCacheKey);</span><br><span class="line">			displayer.<span class="keyword">display</span>(bitmap, imageAware, loadedFrom);</span><br><span class="line">			engine.cancelDisplayTaskFor(imageAware);</span><br><span class="line">			listener.onLoadingComplete(imageUri, imageAware.getWrappedView(), bitmap);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="downloader">downloader</h2><p>负责从网络和本地获取流，以下BaseImageDownloader为getStream方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">InputStream <span class="title">getStream</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (Scheme.ofUri(imageUri)) &#123;</span><br><span class="line">		<span class="keyword">case</span> HTTP:</span><br><span class="line">		<span class="keyword">case</span> HTTPS:</span><br><span class="line">			<span class="keyword">return</span> getStreamFromNetwork(imageUri, extra);</span><br><span class="line">		<span class="keyword">case</span> FILE:</span><br><span class="line">			<span class="keyword">return</span> getStreamFromFile(imageUri, extra);</span><br><span class="line">		<span class="keyword">case</span> CONTENT:</span><br><span class="line">			<span class="keyword">return</span> getStreamFromContent(imageUri, extra);</span><br><span class="line">		<span class="keyword">case</span> ASSETS:</span><br><span class="line">			<span class="keyword">return</span> getStreamFromAssets(imageUri, extra);</span><br><span class="line">		<span class="keyword">case</span> DRAWABLE:</span><br><span class="line">			<span class="keyword">return</span> getStreamFromDrawable(imageUri, extra);</span><br><span class="line">		<span class="keyword">case</span> UNKNOWN:</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> getStreamFromOtherSource(imageUri, extra);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="decoder">decoder</h2><p>以下为BaseImageDecoder的decode方法，将输入流转化为bitmap<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function">Bitmap <span class="title">decode</span><span class="params">(ImageDecodingInfo decodingInfo)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		Bitmap decodedBitmap;</span><br><span class="line">		ImageFileInfo imageInfo;</span><br><span class="line"></span><br><span class="line">		InputStream imageStream = getImageStream(decodingInfo);</span><br><span class="line">		<span class="keyword">if</span> (imageStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">			L.e(ERROR_NO_IMAGE_STREAM, decodingInfo.getImageKey());</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			imageInfo = defineImageSizeAndRotation(imageStream, decodingInfo);</span><br><span class="line">			imageStream = resetStream(imageStream, decodingInfo);</span><br><span class="line">			Options decodingOptions = prepareDecodingOptions(imageInfo.imageSize, decodingInfo);</span><br><span class="line">			decodedBitmap = BitmapFactory.decodeStream(imageStream, <span class="keyword">null</span>, decodingOptions);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			IoUtils.closeSilently(imageStream);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (decodedBitmap == <span class="keyword">null</span>) &#123;</span><br><span class="line">			L.e(ERROR_CANT_DECODE_IMAGE, decodingInfo.getImageKey());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			decodedBitmap = considerExactScaleAndOrientatiton(decodedBitmap, decodingInfo, imageInfo.exif.rotation,</span><br><span class="line">					imageInfo.exif.flipHorizontal);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> decodedBitmap;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="displayer">displayer</h2><p>将bitmap显示出来,以下为SimpleBitmapDisplayer display方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(Bitmap bitmap, ImageAware imageAware, LoadedFrom loadedFrom)</span> </span>&#123;</span><br><span class="line">	imageAware.setImageBitmap(bitmap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="总结">总结</h1><p>1.作者模块功能划分的很好，各模块职责清晰，但对部分功能调用上有些混乱.<br>如存在没有使用processAndDisplayImageTask而在外部直接调用postProcesser,没有使用DisplayImageTask而在外部直接调用displayer,这部分关系较为混乱<br>2.所谓的downloader实际上是包括加载网络和本地，和通常理解的概念有偏差，loadedFrom枚举类里面的network竟然也包括本地文件，堪称坑爹。<br>3.可配置性很强，可以添加自己的各种模块，比如下载器，解析器，cache,线程池等</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简介">简介</h1><p>Android-Universal-Image-Loader是一个用来加载图片（包括网络图片和本地图片）的开源项目，实现了网络图片的下载、本地图片的加载、图片的解析、图片的缓存等机制。<br>其实很多大神都已经解析过此开源项目。<br>包括但不限于以下博客<br><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/huxian99/Android%20Universal%20Image%20Loader%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">codekk解析</a><br>夏安明的3篇博文<br><a href="http://blog.csdn.net/xiaanming/article/details/26810303">Android开源框架Universal-Image-Loader完全解析（一）—- 基本介绍及使用</a><br><a href="http://blog.csdn.net/xiaanming/article/details/27525741">Android开源框架Universal-Image-Loader完全解析（二）—- 图片缓存策略详解</a><br><a href="http://blog.csdn.net/xiaanming/article/details/39057201">Android开源框架Universal-Image-Loader完全解析（三）—-源代码解读</a><br> 但我还是继续写这篇博文的原因主要还是让自己好好看下这部分代码。哈哈，大家想要了解的话看上面几篇博客也已经够了。<br>]]>
    
    </summary>
    
      <category term="uil" scheme="http://coderrobin.com/tags/uil/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Loader解析]]></title>
    <link href="http://coderrobin.com/2015/02/05/Android-LoaderManager%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://coderrobin.com/2015/02/05/Android-LoaderManager源码分析/</id>
    <published>2015-02-05T15:02:04.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简介：">简介：</h1><p>loader机制在android 3.0后加入android framework。其目的在于方便开发人员在activity和fragment中异步地加载数据。（可以替代直接使用线程或者AsyncTask，对需要异步加载的过程进行统一管理）<br>另外loader还有如下特征：<br>1.对数据源变化进行监听，实时更新数据。<br>2.在activity配置发生变化（如横竖屏切换时无需重复加载数据）<br>3.对于CursorLoader，开发人员无需去close cursor，系统会帮忙管理<br><a id="more"></a></p>
<h1 id="使用步骤">使用步骤</h1><p>以下为loader最简单的使用步骤<br>1.在activity或fragment中getLoaderManager()<br>2.oncreate中调用initLoader(id, null, LoaderManager.Callbacks);<br> LoaderManager Callbacks有如下方法<br>    onCreateLoader() — 创建loader（可以为android提供的cursorLoader或者自己继承AsyncLoader）,供loadmanager管理<br>    onLoadFinished() — 每次数据加载完时回调（包括数据源更改时loader监听变化时加载）<br>    onLoaderReset() —  loader被重置时（不再使用）时回调<br>对于详细使用方法还不了解的童鞋可以先阅读<br><a href="http://developer.android.com/guide/components/loaders.html" target="_blank" rel="external">google trainging</a><br>androiddesignpatterns的4篇博客<br><a href="http://www.androiddesignpatterns.com/2012/07/loaders-and-loadermanager-background.html" target="_blank" rel="external"> Part 1: Life Before Loaders</a><br><a href=" http://www.androiddesignpatterns.com/2012/07/understanding-loadermanager.html" target="_blank" rel="external"> Part 2: Understanding the LoaderManager</a><br> <a href=" http://www.androiddesignpatterns.com/2012/08/implementing-loaders.html" target="_blank" rel="external">Part 3: Implementing Loaders</a><br>  <a href=" http://www.androiddesignpatterns.com/2012/09/tutorial-loader-loadermanager.html" target="_blank" rel="external">  Part 4: Tutorial: AppListLoader</a></p>
<h1 id="源码分析">源码分析</h1><p>loader的分析过程涉及到如下类:<br>activity<br>fragment<br>loaderManager<br>loader<br>AsyncLoader<br>CursorLoader<br>其实我也想画下类图流程图神马的来跟大家梳理下这些源码，但奈何对uml图神马的只看得懂不会画啊。。不喜欢撸源码的人直接看文末的总结吧，确实直接看源码挺恶心。。。</p>
<h2 id="loader类解析">loader类解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Loader</span>&lt;<span class="title">D</span>&gt; </span>&#123;</span><br><span class="line">   <span class="comment">//loader唯一id</span></span><br><span class="line">    <span class="keyword">int</span> mId;</span><br><span class="line">    OnLoadCompleteListener&lt;D&gt; mListener;</span><br><span class="line">    OnLoadCanceledListener&lt;D&gt; mOnLoadCanceledListener;</span><br><span class="line">    Context mContext;</span><br><span class="line">    <span class="keyword">boolean</span> mStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> mAbandoned = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> mReset = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> mContentChanged = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> mProcessingChange = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数据源变化监听器，cursorLoader有使用到</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForceLoadContentObserver</span> <span class="keyword">extends</span> <span class="title">ContentObserver</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ForceLoadContentObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="keyword">new</span> Handler());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deliverSelfNotifications</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span> </span>&#123;</span><br><span class="line">            onContentChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//loaderManager向loader注册加载完成接口，当加载完成时loader通知loaderManager,loaderManager再通知界面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnLoadCompleteListener</span>&lt;<span class="title">D</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadComplete</span><span class="params">(Loader&lt;D&gt; loader, D data)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnLoadCanceledListener</span>&lt;<span class="title">D</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadCanceled</span><span class="params">(Loader&lt;D&gt; loader)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Loader</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context.getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//加载完成时回调</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliverResult</span><span class="params">(D data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mListener.onLoadComplete(<span class="keyword">this</span>, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//loader子类调用父类该方法取消loader</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliverCancellation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mOnLoadCanceledListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mOnLoadCanceledListener.onLoadCanceled(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//省略注册和注销OnLoadCompleteListener和mOnLoadCanceledListener</span></span><br><span class="line"><span class="comment">//的方法</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">   <span class="comment">//开始加载数据时loaderManager调用</span></span><br><span class="line">   <span class="comment">//设置标志位及调用onStartLoading方法</span></span><br><span class="line">  <span class="comment">//用户不可手动调用，否则会造成状态紊乱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mStarted = <span class="keyword">true</span>;</span><br><span class="line">        mReset = <span class="keyword">false</span>;</span><br><span class="line">        mAbandoned = <span class="keyword">false</span>;</span><br><span class="line">        onStartLoading();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//子类需继承，真正加载数据的地方</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStartLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取消loader方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancelLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onCancelLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//子类需继承,return false表示取消不掉（已完成或未开始）</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onCancelLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//强制重新loader，会抛弃旧数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forceLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onForceLoad();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//子类需继承</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onForceLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//activity或fragment stop时loaderManager会调用该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mStarted = <span class="keyword">false</span>;</span><br><span class="line">        onStopLoading();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStopLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//loaderManager restartLoader时调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abandon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mAbandoned = <span class="keyword">true</span>;</span><br><span class="line">        onAbandon();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//子类实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAbandon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//销毁loader时调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onReset();</span><br><span class="line">        mReset = <span class="keyword">true</span>;</span><br><span class="line">        mStarted = <span class="keyword">false</span>;</span><br><span class="line">        mAbandoned = <span class="keyword">false</span>;</span><br><span class="line">        mContentChanged = <span class="keyword">false</span>;</span><br><span class="line">        mProcessingChange = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//子类实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onReset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Take the current flag indicating whether the loader's content had</span><br><span class="line">     * changed while it was stopped.  If it had, true is returned and the</span><br><span class="line">     * flag is cleared.</span><br><span class="line">     */</span></span><br><span class="line">   <span class="comment">//判断loader停止期间数据是否变化了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">takeContentChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res = mContentChanged;</span><br><span class="line">        mContentChanged = <span class="keyword">false</span>;</span><br><span class="line">        mProcessingChange |= res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Commit that you have actually fully processed a content change that</span><br><span class="line">     * was returned by &#123;@link #takeContentChanged&#125;.  This is for use with</span><br><span class="line">     * &#123;@link #rollbackContentChanged()&#125; to handle situations where a load</span><br><span class="line">     * is cancelled.  Call this when you have completely processed a load</span><br><span class="line">     * without it being cancelled.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitContentChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mProcessingChange = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Report that you have abandoned the processing of a content change that</span><br><span class="line">     * was returned by &#123;@link #takeContentChanged()&#125; and would like to rollback</span><br><span class="line">     * to the state where there is again a pending content change.  This is</span><br><span class="line">     * to handle the case where a data load due to a content change has been</span><br><span class="line">     * canceled before its data was delivered back to the loader.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollbackContentChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mProcessingChange) &#123;</span><br><span class="line">            mContentChanged = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据源改变时observer调用该方法，若loader已经start了，重新加载数	据 ，否则，设置标志位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContentChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mStarted) &#123;</span><br><span class="line">            forceLoad();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// This loader has been stopped, so we don't want to load</span></span><br><span class="line">            <span class="comment">// new data right now...  but keep track of it changing to</span></span><br><span class="line">            <span class="comment">// refresh later if we start again.</span></span><br><span class="line">            mContentChanged = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="loaderManager解析">loaderManager解析</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> class LoaderManager &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> interface LoaderCallbacks&lt;D&gt; &#123;.</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">public</span> Loader&lt;D&gt; onCreateLoader(<span class="built_in">int</span> id, Bundle args);</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> onLoadFinished(Loader&lt;D&gt; loader, D data);</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> onLoaderReset(Loader&lt;D&gt; loader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//loaderManager 若未创建loader,创建loader,若已经创建，则更新callback后返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;D&gt; Loader&lt;D&gt; initLoader(<span class="built_in">int</span> id, Bundle args,</span><br><span class="line">            LoaderManager.LoaderCallbacks&lt;D&gt; callback);</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">     <span class="comment">//创建新loader,已有相同id的loader替换之</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;D&gt; Loader&lt;D&gt; restartLoader(<span class="built_in">int</span> id, Bundle args,</span><br><span class="line">            LoaderManager.LoaderCallbacks&lt;D&gt; callback);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//销毁loader,若onLoader finish过则调用onLoaderReset</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> destroyLoader(<span class="built_in">int</span> id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Return the Loader with the given id or null if no matching Loader</span><br><span class="line">     * is found.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;D&gt; Loader&lt;D&gt; getLoader(<span class="built_in">int</span> id);</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LoaderManagerImpl extends LoaderManager &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> TAG = <span class="string">"LoaderManager"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">boolean</span> DEBUG = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//散列表，保存活跃中的loaders</span></span><br><span class="line">    <span class="keyword">final</span> SparseArray&lt;LoaderInfo&gt; mLoaders = <span class="keyword">new</span> SparseArray&lt;LoaderInfo&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// These are previously run loaders.  This list is maintained internally</span></span><br><span class="line">    <span class="comment">// to avoid destroying a loader while an application is still using it.</span></span><br><span class="line">    <span class="comment">// It allows an application to restart a loader, but continue using its</span></span><br><span class="line">    <span class="comment">// previously run loader until the new loader's data is available.</span></span><br><span class="line">    <span class="comment">//保存已经运行完毕的loader</span></span><br><span class="line">    <span class="keyword">final</span> SparseArray&lt;LoaderInfo&gt; mInactiveLoaders = <span class="keyword">new</span> SparseArray&lt;LoaderInfo&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> mWho;</span><br><span class="line"></span><br><span class="line">    Activity mActivity;</span><br><span class="line">    <span class="built_in">boolean</span> mStarted;</span><br><span class="line">    <span class="built_in">boolean</span> mRetaining;</span><br><span class="line">    <span class="built_in">boolean</span> mRetainingStarted;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">boolean</span> mCreatingLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对loader的封装</span></span><br><span class="line">    <span class="keyword">final</span> class LoaderInfo implements Loader.OnLoadCompleteListener&lt;<span class="keyword">Object</span>&gt;,</span><br><span class="line">            Loader.OnLoadCanceledListener&lt;<span class="keyword">Object</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> mId;</span><br><span class="line">        <span class="keyword">final</span> Bundle mArgs;</span><br><span class="line">        LoaderManager.LoaderCallbacks&lt;<span class="keyword">Object</span>&gt; mCallbacks;</span><br><span class="line">        Loader&lt;<span class="keyword">Object</span>&gt; mLoader;</span><br><span class="line">        <span class="comment">//已经加载过数据</span></span><br><span class="line">        <span class="built_in">boolean</span> mHaveData;</span><br><span class="line">        <span class="comment">//已经将加载的数据投递给界面</span></span><br><span class="line">        <span class="built_in">boolean</span> mDeliveredData;</span><br><span class="line">        <span class="keyword">Object</span> mData;</span><br><span class="line">        <span class="comment">//已经start</span></span><br><span class="line">        <span class="built_in">boolean</span> mStarted;</span><br><span class="line">        <span class="comment">//配置发生改变时保持当前loader,无需销毁</span></span><br><span class="line">        <span class="built_in">boolean</span> mRetaining;</span><br><span class="line">        <span class="built_in">boolean</span> mRetainingStarted;</span><br><span class="line">        <span class="built_in">boolean</span> mReportNextStart;</span><br><span class="line">        <span class="built_in">boolean</span> mDestroyed;</span><br><span class="line">        <span class="built_in">boolean</span> mListenerRegistered;</span><br><span class="line"></span><br><span class="line">        LoaderInfo mPendingLoader;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> LoaderInfo(<span class="built_in">int</span> id, Bundle args, LoaderManager.LoaderCallbacks&lt;<span class="keyword">Object</span>&gt; callbacks) &#123;</span><br><span class="line">            mId = id;</span><br><span class="line">            mArgs = args;</span><br><span class="line">            mCallbacks = callbacks;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//启动loader</span></span><br><span class="line">        <span class="keyword">void</span> start() &#123;</span><br><span class="line">        	</span><br><span class="line">            <span class="keyword">if</span> (mRetaining &amp;&amp; mRetainingStarted) &#123;</span><br><span class="line">                <span class="comment">// Our owner is started, but we were being retained from a</span></span><br><span class="line">                <span class="comment">// previous instance in the started state...  so there is really</span></span><br><span class="line">                <span class="comment">// nothing to do here, since the loaders are still started.</span></span><br><span class="line">                mStarted = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mStarted) &#123;</span><br><span class="line">                <span class="comment">// If loader already started, don't restart.</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mStarted = <span class="keyword">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Starting: "</span> + <span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">//为空则创建loader</span></span><br><span class="line">            <span class="keyword">if</span> (mLoader == <span class="keyword">null</span> &amp;&amp; mCallbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">               mLoader = mCallbacks.onCreateLoader(mId, mArgs);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            	<span class="comment">//非静态内部类抛异常</span></span><br><span class="line">                <span class="keyword">if</span> (mLoader.getClass().isMemberClass()</span><br><span class="line">                        &amp;&amp; !Modifier.isStatic(mLoader.getClass().getModifiers())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"Object returned from onCreateLoader must not be a non-static inner member class: "</span></span><br><span class="line">                            + mLoader);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//注册监听</span></span><br><span class="line">                <span class="keyword">if</span> (!mListenerRegistered) &#123;</span><br><span class="line">                    mLoader.registerListener(mId, <span class="keyword">this</span>);</span><br><span class="line">                    mLoader.registerOnLoadCanceledListener(<span class="keyword">this</span>);</span><br><span class="line">                    mListenerRegistered = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                mLoader.startLoading();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//配置改变时进行保持，设置标志位</span></span><br><span class="line">        <span class="keyword">void</span> retain() &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Retaining: "</span> + <span class="keyword">this</span>);</span><br><span class="line">            mRetaining = <span class="keyword">true</span>;</span><br><span class="line">            mRetainingStarted = mStarted;</span><br><span class="line">            mStarted = <span class="keyword">false</span>;</span><br><span class="line">            mCallbacks = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//activity已重新启动，若有数据则通知</span></span><br><span class="line">        <span class="keyword">void</span> finishRetain() &#123;</span><br><span class="line">            <span class="keyword">if</span> (mRetaining) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Finished Retaining: "</span> + <span class="keyword">this</span>);</span><br><span class="line">                mRetaining = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (mStarted != mRetainingStarted) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!mStarted) &#123;</span><br><span class="line">                        <span class="comment">// This loader was retained in a started state, but</span></span><br><span class="line">                        <span class="comment">// at the end of retaining everything our owner is</span></span><br><span class="line">                        <span class="comment">// no longer started...  so make it stop.</span></span><br><span class="line">                        stop();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mStarted &amp;&amp; mHaveData &amp;&amp; !mReportNextStart) &#123;</span><br><span class="line">                <span class="comment">// This loader has retained its data, either completely across</span></span><br><span class="line">                <span class="comment">// a configuration change or just whatever the last data set</span></span><br><span class="line">                <span class="comment">// was after being restarted from a stop, and now at the point of</span></span><br><span class="line">                <span class="comment">// finishing the retain we find we remain started, have</span></span><br><span class="line">                <span class="comment">// our data, and the owner has a new callback...  so</span></span><br><span class="line">                <span class="comment">// let's deliver the data now.</span></span><br><span class="line">                callOnLoadFinished(mLoader, mData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">void</span> reportStart() &#123;</span><br><span class="line">            <span class="keyword">if</span> (mStarted) &#123;</span><br><span class="line">		<span class="comment">//没分析到会执行</span></span><br><span class="line">                <span class="keyword">if</span> (mReportNextStart) &#123;</span><br><span class="line">                    mReportNextStart = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (mHaveData) &#123;</span><br><span class="line">                        callOnLoadFinished(mLoader, mData);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//停止，若无需保存，注销回调</span></span><br><span class="line">        <span class="keyword">void</span> stop() &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Stopping: "</span> + <span class="keyword">this</span>);</span><br><span class="line">            mStarted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (!mRetaining) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mLoader != <span class="keyword">null</span> &amp;&amp; mListenerRegistered) &#123;</span><br><span class="line">                    <span class="comment">// Let the loader know we're done with it</span></span><br><span class="line">                    mListenerRegistered = <span class="keyword">false</span>;</span><br><span class="line">                    mLoader.unregisterListener(<span class="keyword">this</span>);</span><br><span class="line">                    mLoader.unregisterOnLoadCanceledListener(<span class="keyword">this</span>);</span><br><span class="line">                    mLoader.stopLoading();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//取消</span></span><br><span class="line">        <span class="keyword">void</span> cancel() &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Canceling: "</span> + <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (mStarted &amp;&amp; mLoader != <span class="keyword">null</span> &amp;&amp; mListenerRegistered) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mLoader.cancelLoad()) &#123;</span><br><span class="line">                    onLoadCanceled(mLoader);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//销毁</span></span><br><span class="line">        <span class="keyword">void</span> destroy() &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Destroying: "</span> + <span class="keyword">this</span>);</span><br><span class="line">            mDestroyed = <span class="keyword">true</span>;</span><br><span class="line">            <span class="built_in">boolean</span> needReset = mDeliveredData;</span><br><span class="line">            mDeliveredData = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//有过数据，则调用callback的onLoaderReset通知用户i界面</span></span><br><span class="line">            <span class="keyword">if</span> (mCallbacks != <span class="keyword">null</span> &amp;&amp; mLoader != <span class="keyword">null</span> &amp;&amp; mHaveData &amp;&amp; needReset) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Reseting: "</span> + <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">String</span> lastBecause = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (mActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    lastBecause = mActivity.mFragments.mNoTransactionsBecause;</span><br><span class="line">                    mActivity.mFragments.mNoTransactionsBecause = <span class="string">"onLoaderReset"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mCallbacks.onLoaderReset(mLoader);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mActivity.mFragments.mNoTransactionsBecause = lastBecause;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mCallbacks = <span class="keyword">null</span>;</span><br><span class="line">            mData = <span class="keyword">null</span>;</span><br><span class="line">            mHaveData = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (mLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mListenerRegistered) &#123;</span><br><span class="line">                    mListenerRegistered = <span class="keyword">false</span>;</span><br><span class="line">                    mLoader.unregisterListener(<span class="keyword">this</span>);</span><br><span class="line">                    mLoader.unregisterOnLoadCanceledListener(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//重置loader,CursorLoader会关闭cursor等</span></span><br><span class="line">                mLoader.reset();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mPendingLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPendingLoader.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//loader被取消时回调该方法（在AsyncTaskLoader中有用到）</span></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> onLoadCanceled(Loader&lt;<span class="keyword">Object</span>&gt; loader) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"onLoadCanceled: "</span> + <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mDestroyed) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Ignoring load canceled -- destroyed"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mLoaders.<span class="built_in">get</span>(mId) != <span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="comment">// This cancellation message is not coming from the current active loader.</span></span><br><span class="line">                <span class="comment">// We don't care about it.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Ignoring load canceled -- not active"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            LoaderInfo pending = mPendingLoader;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//restart loader时，若有loader已经开始执行，则在新loader加入pendingLoader,发生取消时，若已有在排队的loader,执行在排队的loader</span></span><br><span class="line">            <span class="keyword">if</span> (pending != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// There is a new request pending and we were just</span></span><br><span class="line">                <span class="comment">// waiting for the old one to cancel or complete before starting</span></span><br><span class="line">                <span class="comment">// it.  So now it is time, switch over to the new loader.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Switching to pending loader: "</span> + pending);</span><br><span class="line">                mPendingLoader = <span class="keyword">null</span>;</span><br><span class="line">                mLoaders.put(mId, <span class="keyword">null</span>);</span><br><span class="line">                destroy();</span><br><span class="line">                installLoader(pending);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载完成时回调</span></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> onLoadComplete(Loader&lt;<span class="keyword">Object</span>&gt; loader, <span class="keyword">Object</span> data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"onLoadComplete: "</span> + <span class="keyword">this</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (mDestroyed) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Ignoring load complete -- destroyed"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mLoaders.<span class="built_in">get</span>(mId) != <span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="comment">// This data is not coming from the current active loader.</span></span><br><span class="line">                <span class="comment">// We don't care about it.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Ignoring load complete -- not active"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">           <span class="comment">//加载完成时，若已有在排队的loader,则废弃该loader,执行在排队的loader </span></span><br><span class="line">            LoaderInfo pending = mPendingLoader;</span><br><span class="line">            <span class="keyword">if</span> (pending != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// There is a new request pending and we were just</span></span><br><span class="line">                <span class="comment">// waiting for the old one to complete before starting</span></span><br><span class="line">                <span class="comment">// it.  So now it is time, switch over to the new loader.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Switching to pending loader: "</span> + pending);</span><br><span class="line">                mPendingLoader = <span class="keyword">null</span>;</span><br><span class="line">                mLoaders.put(mId, <span class="keyword">null</span>);</span><br><span class="line">                destroy();</span><br><span class="line">                installLoader(pending);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//标记已有数据，调用callOnLoadFinished</span></span><br><span class="line">            <span class="keyword">if</span> (mData != data || !mHaveData) &#123;</span><br><span class="line">                mData = data;</span><br><span class="line">                mHaveData = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (mStarted) &#123;</span><br><span class="line">                    callOnLoadFinished(loader, data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//if (DEBUG) Log.v(TAG, "  onLoadFinished returned: " + this);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// We have now given the application the new loader with its</span></span><br><span class="line">            <span class="comment">// loaded data, so it should have stopped using the previous</span></span><br><span class="line">            <span class="comment">// loader.  If there is a previous loader on the inactive list,</span></span><br><span class="line">            <span class="comment">// clean it up.</span></span><br><span class="line">            LoaderInfo info = mInactiveLoaders.<span class="built_in">get</span>(mId);</span><br><span class="line">            <span class="keyword">if</span> (info != <span class="keyword">null</span> &amp;&amp; info != <span class="keyword">this</span>) &#123;</span><br><span class="line">                info.mDeliveredData = <span class="keyword">false</span>;</span><br><span class="line">                info.destroy();</span><br><span class="line">                mInactiveLoaders.remove(mId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mActivity != <span class="keyword">null</span> &amp;&amp; !hasRunningLoaders()) &#123;</span><br><span class="line">                mActivity.mFragments.startPendingDeferredFragments();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用onLoadFinished</span></span><br><span class="line">        <span class="keyword">void</span> callOnLoadFinished(Loader&lt;<span class="keyword">Object</span>&gt; loader, <span class="keyword">Object</span> data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">String</span> lastBecause = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (mActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    lastBecause = mActivity.mFragments.mNoTransactionsBecause;</span><br><span class="line">                    mActivity.mFragments.mNoTransactionsBecause = <span class="string">"onLoadFinished"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  onLoadFinished in "</span> + loader + <span class="string">": "</span></span><br><span class="line">                            + loader.dataToString(data));</span><br><span class="line">                    mCallbacks.onLoadFinished(loader, data);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mActivity.mFragments.mNoTransactionsBecause = lastBecause;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                mDeliveredData = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">   ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LoaderManagerImpl(<span class="keyword">String</span> who, Activity activity, <span class="built_in">boolean</span> started) &#123;</span><br><span class="line">        mWho = who;</span><br><span class="line">        mActivity = activity;</span><br><span class="line">        mStarted = started;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> updateActivity(Activity activity) &#123;</span><br><span class="line">        mActivity = activity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建loader,包装成LoaderInfo</span></span><br><span class="line">    <span class="keyword">private</span> LoaderInfo createLoader(<span class="built_in">int</span> id, Bundle args,</span><br><span class="line">            LoaderManager.LoaderCallbacks&lt;<span class="keyword">Object</span>&gt; callback) &#123;</span><br><span class="line">        LoaderInfo info = <span class="keyword">new</span> LoaderInfo(id, args,  (LoaderManager.LoaderCallbacks&lt;<span class="keyword">Object</span>&gt;)callback);</span><br><span class="line">        Loader&lt;<span class="keyword">Object</span>&gt; loader = callback.onCreateLoader(id, args);</span><br><span class="line">        info.mLoader = (Loader&lt;<span class="keyword">Object</span>&gt;)loader;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> LoaderInfo createAndInstallLoader(<span class="built_in">int</span> id, Bundle args,</span><br><span class="line">            LoaderManager.LoaderCallbacks&lt;<span class="keyword">Object</span>&gt; callback) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mCreatingLoader = <span class="keyword">true</span>;</span><br><span class="line">            LoaderInfo info = createLoader(id, args, callback);</span><br><span class="line">            installLoader(info);</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mCreatingLoader = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//放入散列表，若activity已onstart 启动loader</span></span><br><span class="line">    <span class="keyword">void</span> installLoader(LoaderInfo info) &#123;</span><br><span class="line">        mLoaders.put(info.mId, info);</span><br><span class="line">        <span class="keyword">if</span> (mStarted) &#123;</span><br><span class="line">            <span class="comment">// The activity will start all existing loaders in it's onStart(),</span></span><br><span class="line">            <span class="comment">// so only start them here if we're past that point of the activitiy's</span></span><br><span class="line">            <span class="comment">// life cycle</span></span><br><span class="line">            info.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//相同id的不再创建</span></span><br><span class="line">    <span class="comment">//通常在activity 创建时调用，且再配置改变时不重复创建</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;D&gt; Loader&lt;D&gt; initLoader(<span class="built_in">int</span> id, Bundle args, LoaderManager.LoaderCallbacks&lt;D&gt; callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCreatingLoader) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Called while creating a loader"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        LoaderInfo info = mLoaders.<span class="built_in">get</span>(id);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"initLoader in "</span> + <span class="keyword">this</span> + <span class="string">": args="</span> + args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Loader doesn't already exist; create.</span></span><br><span class="line">            info = createAndInstallLoader(id, args,  (LoaderManager.LoaderCallbacks&lt;<span class="keyword">Object</span>&gt;)callback);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Created new loader "</span> + info);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Re-using existing loader "</span> + info);</span><br><span class="line">            info.mCallbacks = (LoaderManager.LoaderCallbacks&lt;<span class="keyword">Object</span>&gt;)callback;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//已经有数据，直接callOnLoadFinished</span></span><br><span class="line">        <span class="keyword">if</span> (info.mHaveData &amp;&amp; mStarted) &#123;</span><br><span class="line">            <span class="comment">// If the loader has already generated its data, report it now.</span></span><br><span class="line">            info.callOnLoadFinished(info.mLoader, info.mData);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (Loader&lt;D&gt;)info.mLoader;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//重新创造loader</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;D&gt; Loader&lt;D&gt; restartLoader(<span class="built_in">int</span> id, Bundle args, LoaderManager.LoaderCallbacks&lt;D&gt; callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCreatingLoader) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Called while creating a loader"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        LoaderInfo info = mLoaders.<span class="built_in">get</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"restartLoader in "</span> + <span class="keyword">this</span> + <span class="string">": args="</span> + args);</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            LoaderInfo inactive = mInactiveLoaders.<span class="built_in">get</span>(id);</span><br><span class="line">            <span class="keyword">if</span> (inactive != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (info.mHaveData) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Removing last inactive loader: "</span> + info);</span><br><span class="line">                    inactive.mDeliveredData = <span class="keyword">false</span>;</span><br><span class="line">                    inactive.destroy();</span><br><span class="line">                    info.mLoader.abandon();</span><br><span class="line">                    mInactiveLoaders.put(id, info);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!info.mStarted) &#123;</span><br><span class="line">                  </span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Current loader is stopped; replacing"</span>);</span><br><span class="line">                        mLoaders.put(id, <span class="keyword">null</span>);</span><br><span class="line">                        info.destroy();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Now we have three active loaders... we'll queue</span></span><br><span class="line">                        <span class="comment">// up this request to be processed once one of the other loaders</span></span><br><span class="line">                        <span class="comment">// finishes or is canceled.</span></span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Current loader is running; attempting to cancel"</span>);</span><br><span class="line">                        <span class="comment">//此时，说明一个同id的Loader正在加载数据，但是尚未加载完成，此时我们调用它的cancel()通知退出加载。</span></span><br><span class="line">                        info.cancel();</span><br><span class="line">                        <span class="keyword">if</span> (info.mPendingLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Removing pending loader: "</span> + info.mPendingLoader);</span><br><span class="line">                            info.mPendingLoader.destroy();</span><br><span class="line">                            info.mPendingLoader = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                      <span class="comment">//创建一个此id值的Loader，并赋给mPendingLoader，也许你会问为什么不直接启动它呢，  </span></span><br><span class="line">                      <span class="comment">//别忘了，此时已经有一个Loader在加载数据了，而且我们已经调用它的cancel来通知它退出加载，当然，通常情况下，  </span></span><br><span class="line">                      <span class="comment">//这个Loader也许刚好加载完成，那么会收到onLoadComplete()回调，也许正常退出加载，此时收到回调onLoadCanceled()，  </span></span><br><span class="line">                      <span class="comment">//所以在这两个回调里，我们再启动mPendingLoader，不信的话，参考一下这两个方法，就能找到installLoader(pending)。</span></span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Enqueuing as new pending loader"</span>);</span><br><span class="line">                        info.mPendingLoader = createLoader(id, args, </span><br><span class="line">                                (LoaderManager.LoaderCallbacks&lt;<span class="keyword">Object</span>&gt;)callback);</span><br><span class="line">                        <span class="keyword">return</span> (Loader&lt;D&gt;)info.mPendingLoader.mLoader;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Keep track of the previous instance of this loader so we can destroy</span></span><br><span class="line">                <span class="comment">// it when the new one completes.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"  Making last loader inactive: "</span> + info);</span><br><span class="line">                info.mLoader.abandon();</span><br><span class="line">                mInactiveLoaders.put(id, info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        info = createAndInstallLoader(id, args,  (LoaderManager.LoaderCallbacks&lt;<span class="keyword">Object</span>&gt;)callback);</span><br><span class="line">        <span class="keyword">return</span> (Loader&lt;D&gt;)info.mLoader;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Rip down, tear apart, shred to pieces a current Loader ID.  After returning</span><br><span class="line">     * from this function, any Loader objects associated with this ID are</span><br><span class="line">     * destroyed.  Any data associated with them is destroyed.  You better not</span><br><span class="line">     * be using it when you do this.</span><br><span class="line">     * @param id Identifier of the Loader to be destroyed.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> destroyLoader(<span class="built_in">int</span> id) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCreatingLoader) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Called while creating a loader"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"destroyLoader in "</span> + <span class="keyword">this</span> + <span class="string">" of "</span> + id);</span><br><span class="line">        <span class="built_in">int</span> idx = mLoaders.indexOfKey(id);</span><br><span class="line">        <span class="keyword">if</span> (idx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            LoaderInfo info = mLoaders.valueAt(idx);</span><br><span class="line">            mLoaders.removeAt(idx);</span><br><span class="line">            info.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        idx = mInactiveLoaders.indexOfKey(id);</span><br><span class="line">        <span class="keyword">if</span> (idx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            LoaderInfo info = mInactiveLoaders.valueAt(idx);</span><br><span class="line">            mInactiveLoaders.removeAt(idx);</span><br><span class="line">            info.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mActivity != <span class="keyword">null</span> &amp;&amp; !hasRunningLoaders()) &#123;</span><br><span class="line">            mActivity.mFragments.startPendingDeferredFragments();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Return the most recent Loader object associated with the</span><br><span class="line">     * given ID.</span><br><span class="line">     */</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;D&gt; Loader&lt;D&gt; getLoader(<span class="built_in">int</span> id) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCreatingLoader) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Called while creating a loader"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        LoaderInfo loaderInfo = mLoaders.<span class="built_in">get</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (loaderInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (loaderInfo.mPendingLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (Loader&lt;D&gt;)loaderInfo.mPendingLoader.mLoader;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (Loader&lt;D&gt;)loaderInfo.mLoader;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> doStart() &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Starting in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (mStarted) &#123;</span><br><span class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(<span class="string">"here"</span>);</span><br><span class="line">            e.fillInStackTrace();</span><br><span class="line">            Log.w(TAG, <span class="string">"Called doStart when already started: "</span> + <span class="keyword">this</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        mStarted = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call out to sub classes so they can start their loaders</span></span><br><span class="line">        <span class="comment">// Let the existing loaders know that we want to be notified when a load is complete</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = mLoaders.<span class="built_in">size</span>()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            mLoaders.valueAt(i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> doStop() &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Stopping in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (!mStarted) &#123;</span><br><span class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(<span class="string">"here"</span>);</span><br><span class="line">            e.fillInStackTrace();</span><br><span class="line">            Log.w(TAG, <span class="string">"Called doStop when not started: "</span> + <span class="keyword">this</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = mLoaders.<span class="built_in">size</span>()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            mLoaders.valueAt(i).stop();</span><br><span class="line">        &#125;</span><br><span class="line">        mStarted = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> doRetain() &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Retaining in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (!mStarted) &#123;</span><br><span class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(<span class="string">"here"</span>);</span><br><span class="line">            e.fillInStackTrace();</span><br><span class="line">            Log.w(TAG, <span class="string">"Called doRetain when not started: "</span> + <span class="keyword">this</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mRetaining = <span class="keyword">true</span>;</span><br><span class="line">        mStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = mLoaders.<span class="built_in">size</span>()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            mLoaders.valueAt(i).retain();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> finishRetain() &#123;</span><br><span class="line">        <span class="keyword">if</span> (mRetaining) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Finished Retaining in "</span> + <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            mRetaining = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = mLoaders.<span class="built_in">size</span>()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                mLoaders.valueAt(i).finishRetain();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> doReportNextStart() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = mLoaders.<span class="built_in">size</span>()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            mLoaders.valueAt(i).mReportNextStart = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> doReportStart() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = mLoaders.<span class="built_in">size</span>()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            mLoaders.valueAt(i).reportStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> doDestroy() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mRetaining) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Destroying Active in "</span> + <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = mLoaders.<span class="built_in">size</span>()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                mLoaders.valueAt(i).destroy();</span><br><span class="line">            &#125;</span><br><span class="line">            mLoaders.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Destroying Inactive in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = mInactiveLoaders.<span class="built_in">size</span>()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            mInactiveLoaders.valueAt(i).destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        mInactiveLoaders.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    。。。</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hasRunningLoaders() &#123;</span><br><span class="line">        <span class="built_in">boolean</span> loadersRunning = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> count = mLoaders.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> LoaderInfo li = mLoaders.valueAt(i);</span><br><span class="line">            loadersRunning |= li.mStarted &amp;&amp; !li.mDeliveredData;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loadersRunning;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Activity和Fragment对loadManager的管理">Activity和Fragment对loadManager的管理</h2><p>Activity和Fragment 在其生命周期内会控制loader的doStart,doStop,配置改变过程对loader进行管理。</p>
<h3 id="Loadermanager生命周期控制">Loadermanager生命周期控制</h3><h4 id="Activity">Activity</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function">LoaderManagerImpl <span class="title">getLoaderManager</span><span class="params">(String who, <span class="keyword">boolean</span> started, <span class="keyword">boolean</span> create)</span> </span>&#123;  </span><br><span class="line">            <span class="keyword">if</span> (mAllLoaderManagers == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                mAllLoaderManagers = <span class="keyword">new</span> ArrayMap&lt;String, LoaderManagerImpl&gt;();  </span><br><span class="line">            &#125;  </span><br><span class="line">            LoaderManagerImpl lm = mAllLoaderManagers.get(who);  </span><br><span class="line">            <span class="keyword">if</span> (lm == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (create) &#123;  </span><br><span class="line">              <span class="comment">//实际创建LoaderManagerImpl</span></span><br><span class="line">                    lm = <span class="keyword">new</span> LoaderManagerImpl(who, <span class="keyword">this</span>, started);</span><br><span class="line">	<span class="comment">//mAllLoaderManagers保存activity和其fragment的所有loader  </span></span><br><span class="line">                    mAllLoaderManagers.put(who, lm);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                lm.updateActivity(<span class="keyword">this</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> lm;          </span><br><span class="line">&#125;  </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="comment">//省略无关代码</span></span><br><span class="line">            <span class="keyword">if</span> (!mLoadersStarted) &#123;  </span><br><span class="line">                mLoadersStarted = <span class="keyword">true</span>;  </span><br><span class="line">                <span class="keyword">if</span> (mLoaderManager != <span class="keyword">null</span>) &#123;  </span><br><span class="line"><span class="comment">//关键方法.dostart</span></span><br><span class="line">                    mLoaderManager.doStart();  </span><br><span class="line">                &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(!mCheckedForLoaderManager)</span> </span>&#123;  </span><br><span class="line">                    mLoaderManager = getLoaderManager(<span class="string">"(root)"</span>, mLoadersStarted, <span class="keyword">false</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">                mCheckedForLoaderManager = <span class="keyword">true</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">performStop</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            …….  </span><br><span class="line">            <span class="keyword">if</span> (mLoadersStarted) &#123;  </span><br><span class="line">                mLoadersStarted = <span class="keyword">false</span>;  </span><br><span class="line">                <span class="keyword">if</span> (mLoaderManager != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    <span class="keyword">if</span> (!mChangingConfigurations) &#123;  </span><br><span class="line">                        mLoaderManager.doStop();  </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                        mLoaderManager.doRetain();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">    ……..  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">mChangingConfigurations变量的作用也很简单：如果当前发生了配置变化这个变量就会被置为<span class="keyword">true</span>，那么我们需要调用LoaderManager.doRetain()方法，表示需要保存当前的loaderManager，在Activity恢复时也要恢复这个LoaderManager。如果Activity的stop不是由于配置变化引起的，那么直接调用LoaderManager的doStop()方法，直接停止当前的LoaderManager。</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">performDestroy</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            mDestroyed = <span class="keyword">true</span>;  </span><br><span class="line">            mWindow.destroy();  </span><br><span class="line">            mFragments.dispatchDestroy();  </span><br><span class="line">            onDestroy();  </span><br><span class="line">            <span class="keyword">if</span> (mLoaderManager != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                mLoaderManager.doDestroy();  </span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Fragment">Fragment</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 调用Activity getLoaderManager创建loaderManager</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function">LoaderManager <span class="title">getLoaderManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (mLoaderManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> mLoaderManager;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (mActivity == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fragment "</span> + <span class="keyword">this</span> + <span class="string">" not attached to Activity"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     mCheckedForLoaderManager = <span class="keyword">true</span>;</span><br><span class="line">     mLoaderManager = mActivity.getLoaderManager(mWho, mLoadersStarted, <span class="keyword">true</span>);</span><br><span class="line">     <span class="keyword">return</span> mLoaderManager;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     mCalled = <span class="keyword">true</span>;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">if</span> (!mLoadersStarted) &#123;</span><br><span class="line">         mLoadersStarted = <span class="keyword">true</span>;</span><br><span class="line">         <span class="keyword">if</span> (!mCheckedForLoaderManager) &#123;</span><br><span class="line">             mCheckedForLoaderManager = <span class="keyword">true</span>;</span><br><span class="line">             mLoaderManager = mActivity.getLoaderManager(mWho, mLoadersStarted, <span class="keyword">false</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (mLoaderManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">             mLoaderManager.doStart();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">performReallyStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (mChildFragmentManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">         mChildFragmentManager.dispatchReallyStop();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (mLoadersStarted) &#123;</span><br><span class="line">         mLoadersStarted = <span class="keyword">false</span>;</span><br><span class="line">         <span class="keyword">if</span> (!mCheckedForLoaderManager) &#123;</span><br><span class="line">             mCheckedForLoaderManager = <span class="keyword">true</span>;</span><br><span class="line">             mLoaderManager = mActivity.getLoaderManager(mWho, mLoadersStarted, <span class="keyword">false</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (mLoaderManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (!mActivity.mRetaining) &#123;</span><br><span class="line">                 mLoaderManager.doStop();</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 mLoaderManager.doRetain();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     mCalled = <span class="keyword">true</span>;</span><br><span class="line">     <span class="comment">//Log.v("foo", "onDestroy: mCheckedForLoaderManager=" + mCheckedForLoaderManager</span></span><br><span class="line">     <span class="comment">//        + " mLoaderManager=" + mLoaderManager);</span></span><br><span class="line">     <span class="keyword">if</span> (!mCheckedForLoaderManager) &#123;</span><br><span class="line">         mCheckedForLoaderManager = <span class="keyword">true</span>;</span><br><span class="line">         mLoaderManager = mActivity.getLoaderManager(mWho, mLoadersStarted, <span class="keyword">false</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (mLoaderManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">         mLoaderManager.doDestroy();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Activity配置改变时保存和恢复loader">Activity配置改变时保存和恢复loader</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">    NonConfigurationInstances retainNonConfigurationInstances() &#123;  </span><br><span class="line">            <span class="keyword">Object</span> activity = onRetainNonConfigurationInstance();  </span><br><span class="line">            <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; children = onRetainNonConfigurationChildInstances();  </span><br><span class="line">            ArrayList&lt;Fragment&gt; fragments = mFragments.retainNonConfig();  </span><br><span class="line">            <span class="built_in">boolean</span> retainLoaders = <span class="keyword">false</span>;  </span><br><span class="line">            <span class="keyword">if</span> (mAllLoaderManagers != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                <span class="comment">// prune out any loader managers that were already stopped and so  </span></span><br><span class="line">                <span class="comment">// have nothing useful to retain.  </span></span><br><span class="line">                <span class="keyword">final</span> <span class="built_in">int</span> N = mAllLoaderManagers.<span class="built_in">size</span>();  </span><br><span class="line">                LoaderManagerImpl loaders[] = <span class="keyword">new</span> LoaderManagerImpl[N];  </span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i=N-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;  </span><br><span class="line">                    loaders[i] = mAllLoaderManagers.valueAt(i);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;  </span><br><span class="line">                    LoaderManagerImpl lm = loaders[i];  </span><br><span class="line">                    <span class="keyword">if</span> (lm.mRetaining) &#123;  </span><br><span class="line">                        retainLoaders = <span class="keyword">true</span>;  </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                        lm.doDestroy();  </span><br><span class="line">                        mAllLoaderManagers.remove(lm.mWho);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (activity == <span class="keyword">null</span> &amp;&amp; children == <span class="keyword">null</span> &amp;&amp; fragments == <span class="keyword">null</span> &amp;&amp; !retainLoaders) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">              </span><br><span class="line">            NonConfigurationInstances nci = <span class="keyword">new</span> NonConfigurationInstances();  </span><br><span class="line">            nci.activity = activity;  </span><br><span class="line">            nci.children = children;  </span><br><span class="line">            nci.fragments = fragments;  </span><br><span class="line">            nci.loaders = mAllLoaderManagers;  </span><br><span class="line">            <span class="keyword">return</span> nci;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">看上面的代码，其关键在于变量mAllLoaderManagers。这个变量上面已经介绍过了，它保存了所有Activity中创建的LoaderManager引用，自然也包含了mLoaderManager引用了。这个方法会被ActivityThread类调用，而且早于performDestroy()方法调用。</span><br><span class="line">这个方法会查看mAllLoaderManagers保存的所有引用，如果某个LoaderManagerImpl.mRetaining值为<span class="keyword">false</span>的话，就会被remove掉。如果配置变化发生的话，mRetaining = <span class="keyword">true</span>，当然mRetaining这个值是在performStop()中的doRetain()调用来设置的。</span><br><span class="line"></span><br><span class="line">activity onCreate()方法：</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (DEBUG_LIFECYCLE) Slog.v(TAG, <span class="string">"onCreate "</span> + <span class="keyword">this</span> + <span class="string">": "</span> + savedInstanceState);  </span><br><span class="line">            <span class="keyword">if</span> (mLastNonConfigurationInstances != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                mAllLoaderManagers = mLastNonConfigurationInstances.loaders;  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">原来mAllLoaderManagers是从mLastNonConfigurationInstances中恢复的，而mLastNonConfigurationInstances的恢复其实是从onAttach()方法中开始的：</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> attach(Context context, ActivityThread aThread,  </span><br><span class="line">                Instrumentation instr, IBinder token, <span class="built_in">int</span> ident,  </span><br><span class="line">                Application application, Intent intent, ActivityInfo info,  </span><br><span class="line">                CharSequence title, Activity parent, <span class="keyword">String</span> id,  </span><br><span class="line">                NonConfigurationInstances lastNonConfigurationInstances,  </span><br><span class="line">                Configuration config) &#123;  </span><br><span class="line">  ...</span><br><span class="line">    mLastNonConfigurationInstances = lastNonConfigurationInstances;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> performStart() &#123;  </span><br><span class="line">...</span><br><span class="line">            <span class="keyword">if</span> (mAllLoaderManagers != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">final</span> <span class="built_in">int</span> N = mAllLoaderManagers.<span class="built_in">size</span>();  </span><br><span class="line">                LoaderManagerImpl loaders[] = <span class="keyword">new</span> LoaderManagerImpl[N];  </span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i=N-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;  </span><br><span class="line">                    loaders[i] = mAllLoaderManagers.valueAt(i);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;  </span><br><span class="line">                    LoaderManagerImpl lm = loaders[i];  </span><br><span class="line">                    lm.finishRetain();  </span><br><span class="line">                    lm.doReportStart();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">上面的代码通过调用LoaderManager.finishRetain()以及doReportStart()方法来恢复LoaderManager的状态。</span><br></pre></td></tr></table></figure>
<p>以上就是Activity针对LoaderManager的管理，而Loader的管理自然是LoaderManager的事了。从上面的分析可以看出，Activity和LoaderManager的职能划分很清晰，这也大大简化了Loaders的管理。</p>
<h2 id="Loader实现">Loader实现</h2><h3 id="AsyncTaskLoader抽象类">AsyncTaskLoader抽象类</h3><p>本质上是对AsyncTask的封装，通过AsyncTask加载数据与回调给ui<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskLoader</span>&lt;<span class="title">D</span>&gt; <span class="keyword">extends</span> <span class="title">Loader</span>&lt;<span class="title">D</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"AsyncTaskLoader"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">D</span>&gt; <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> D <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="keyword">this</span> + <span class="string">" &gt;&gt;&gt; doInBackground"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">//加载数据</span></span><br><span class="line">                D data = AsyncTaskLoader.<span class="keyword">this</span>.onLoadInBackground();</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="keyword">this</span> + <span class="string">"  &lt;&lt;&lt; doInBackground"</span>);</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (OperationCanceledException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="keyword">this</span> + <span class="string">"  &lt;&lt;&lt; doInBackground (was canceled)"</span>, ex);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Runs on the UI thread */</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(D data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="keyword">this</span> + <span class="string">" onPostExecute"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">//回调执行完毕</span></span><br><span class="line">                AsyncTaskLoader.<span class="keyword">this</span>.dispatchOnLoadComplete(<span class="keyword">this</span>, data);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mDone.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Runs on the UI thread */</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(D data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="keyword">this</span> + <span class="string">" onCancelled"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                AsyncTaskLoader.<span class="keyword">this</span>.dispatchOnCancelled(<span class="keyword">this</span>, data);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mDone.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            waiting = <span class="keyword">false</span>;</span><br><span class="line">            AsyncTaskLoader.<span class="keyword">this</span>.executePendingTask();</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Executor mExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> LoadTask mTask;</span><br><span class="line">    <span class="keyword">volatile</span> LoadTask mCancellingTask;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> mUpdateThrottle;</span><br><span class="line">    <span class="keyword">long</span> mLastLoadCompleteTime = -<span class="number">10000</span>;</span><br><span class="line">    Handler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncTaskLoader</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, AsyncTask.THREAD_POOL_EXECUTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/** &#123;@hide&#125; */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncTaskLoader</span><span class="params">(Context context, Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        mExecutor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Set amount to throttle updates by.  This is the minimum time from</span><br><span class="line">     * when the last &#123;@link #loadInBackground()&#125; call has completed until</span><br><span class="line">     * a new load is scheduled.</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> delayMS Amount of delay, in milliseconds.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateThrottle</span><span class="params">(<span class="keyword">long</span> delayMS)</span> </span>&#123;</span><br><span class="line">        mUpdateThrottle = delayMS;</span><br><span class="line">        <span class="keyword">if</span> (delayMS != <span class="number">0</span>) &#123;</span><br><span class="line">            mHandler = <span class="keyword">new</span> Handler();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onForceLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onForceLoad();</span><br><span class="line">        cancelLoad();</span><br><span class="line">	<span class="comment">//新建task并执行</span></span><br><span class="line">        mTask = <span class="keyword">new</span> LoadTask();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Preparing load: mTask="</span> + mTask);</span><br><span class="line">        executePendingTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onCancelLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"onCancelLoad: mTask="</span> + mTask);</span><br><span class="line">        <span class="keyword">if</span> (mTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCancellingTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ...</span><br><span class="line">                    mHandler.removeCallbacks(mTask);</span><br><span class="line">                &#125;</span><br><span class="line">                mTask = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(mTask.waiting)</span> </span>&#123;</span><br><span class="line">           ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> cancelled = mTask.cancel(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"cancelLoad: cancelled="</span> + cancelled);</span><br><span class="line">                <span class="keyword">if</span> (cancelled) &#123;</span><br><span class="line">                    mCancellingTask = mTask;</span><br><span class="line">                    cancelLoadInBackground();</span><br><span class="line">                &#125;</span><br><span class="line">                mTask = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> cancelled;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCanceled</span><span class="params">(D data)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在线程池中执行或延迟执行</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">executePendingTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCancellingTask == <span class="keyword">null</span> &amp;&amp; mTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mTask.waiting) &#123;</span><br><span class="line">                mTask.waiting = <span class="keyword">false</span>;</span><br><span class="line">                mHandler.removeCallbacks(mTask);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mUpdateThrottle &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">                <span class="keyword">if</span> (now &lt; (mLastLoadCompleteTime+mUpdateThrottle)) &#123;</span><br><span class="line">                    <span class="comment">// Not yet time to do another load.</span></span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Waiting until "</span></span><br><span class="line">                            + (mLastLoadCompleteTime+mUpdateThrottle)</span><br><span class="line">                            + <span class="string">" to execute: "</span> + mTask);</span><br><span class="line">                    mTask.waiting = <span class="keyword">true</span>;</span><br><span class="line">                    mHandler.postAtTime(mTask, mLastLoadCompleteTime+mUpdateThrottle);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Executing: "</span> + mTask);</span><br><span class="line">            mTask.executeOnExecutor(mExecutor, (Void[]) <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatchOnCancelled</span><span class="params">(LoadTask task, D data)</span> </span>&#123;</span><br><span class="line">        onCanceled(data);</span><br><span class="line">        <span class="keyword">if</span> (mCancellingTask == task) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Cancelled task is now canceled!"</span>);</span><br><span class="line">            rollbackContentChanged();</span><br><span class="line">            mLastLoadCompleteTime = SystemClock.uptimeMillis();</span><br><span class="line">            mCancellingTask = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Delivering cancellation"</span>);</span><br><span class="line">            deliverCancellation();</span><br><span class="line">            executePendingTask();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatchOnLoadComplete</span><span class="params">(LoadTask task, D data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mTask != task) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Load complete of old task, trying to cancel"</span>);</span><br><span class="line">            dispatchOnCancelled(task, data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAbandoned()) &#123;</span><br><span class="line">                <span class="comment">// This cursor has been abandoned; just cancel the new data.</span></span><br><span class="line">                onCanceled(data);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                commitContentChanged();</span><br><span class="line">                mLastLoadCompleteTime = SystemClock.uptimeMillis();</span><br><span class="line">                mTask = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Delivering result"</span>);</span><br><span class="line">                deliverResult(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> D <span class="title">loadInBackground</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> D <span class="title">onLoadInBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadInBackground();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelLoadInBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLoadInBackgroundCanceled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCancellingTask != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="CursorLoader">CursorLoader</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class CursorLoader extends AsyncTaskLoader&lt;Cursor&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> ForceLoadContentObserver mObserver;</span><br><span class="line"></span><br><span class="line">    Uri mUri;</span><br><span class="line">    <span class="keyword">String</span>[] mProjection;</span><br><span class="line">    <span class="keyword">String</span> mSelection;</span><br><span class="line">    <span class="keyword">String</span>[] mSelectionArgs;</span><br><span class="line">    <span class="keyword">String</span> mSortOrder;</span><br><span class="line"></span><br><span class="line">    Cursor mCursor;</span><br><span class="line">    CancellationSignal mCancellationSignal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据全局变量加载数据</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Cursor loadInBackground() &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLoadInBackgroundCanceled()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> OperationCanceledException();</span><br><span class="line">            &#125;</span><br><span class="line">            mCancellationSignal = <span class="keyword">new</span> CancellationSignal();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Cursor <span class="built_in">cursor</span> = getContext().getContentResolver().query(mUri, mProjection, mSelection,</span><br><span class="line">                    mSelectionArgs, mSortOrder, mCancellationSignal);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">cursor</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Ensure the cursor window is filled.</span></span><br><span class="line">                    <span class="built_in">cursor</span>.getCount();</span><br><span class="line">                    <span class="built_in">cursor</span>.registerContentObserver(mObserver);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">                    <span class="built_in">cursor</span>.close();</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">cursor</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                mCancellationSignal = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> cancelLoadInBackground() &#123;</span><br><span class="line">        <span class="keyword">super</span>.cancelLoadInBackground();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCancellationSignal != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mCancellationSignal.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得数据，更新ui</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> deliverResult(Cursor <span class="built_in">cursor</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isReset()) &#123;</span><br><span class="line">            <span class="comment">// An async query came in while the loader is stopped</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">cursor</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="built_in">cursor</span>.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Cursor oldCursor = mCursor;</span><br><span class="line">        mCursor = <span class="built_in">cursor</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isStarted()) &#123;</span><br><span class="line">            <span class="keyword">super</span>.deliverResult(<span class="built_in">cursor</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oldCursor != <span class="keyword">null</span> &amp;&amp; oldCursor != <span class="built_in">cursor</span> &amp;&amp; !oldCursor.isClosed()) &#123;</span><br><span class="line">            oldCursor.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CursorLoader(Context context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        mObserver = <span class="keyword">new</span> ForceLoadContentObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> CursorLoader(Context context, Uri uri, <span class="keyword">String</span>[] projection, <span class="keyword">String</span> selection,</span><br><span class="line">            <span class="keyword">String</span>[] selectionArgs, <span class="keyword">String</span> sortOrder) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        mObserver = <span class="keyword">new</span> ForceLoadContentObserver();</span><br><span class="line">        mUri = uri;</span><br><span class="line">        mProjection = projection;</span><br><span class="line">        mSelection = selection;</span><br><span class="line">        mSelectionArgs = selectionArgs;</span><br><span class="line">        mSortOrder = sortOrder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onStartLoading() &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            deliverResult(mCursor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (takeContentChanged() || mCursor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            forceLoad();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Must be called from the UI thread</span><br><span class="line">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onStopLoading() &#123;</span><br><span class="line">        <span class="comment">// Attempt to cancel the current load task if possible.</span></span><br><span class="line">        cancelLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onCanceled(Cursor <span class="built_in">cursor</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cursor</span> != <span class="keyword">null</span> &amp;&amp; !<span class="built_in">cursor</span>.isClosed()) &#123;</span><br><span class="line">            <span class="built_in">cursor</span>.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//acivity ondestory时关闭游标</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onReset() &#123;</span><br><span class="line">        <span class="keyword">super</span>.onReset();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Ensure the loader is stopped</span></span><br><span class="line">        onStopLoading();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mCursor != <span class="keyword">null</span> &amp;&amp; !mCursor.isClosed()) &#123;</span><br><span class="line">            mCursor.close();</span><br><span class="line">        &#125;</span><br><span class="line">        mCursor = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//省略一系列set get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结：">总结：</h1><p>loader框架代码写的真纠结。。。各种全局变量。。。google的注释我也是看醉了。。<br>1.acivity和fragment 管理loaderManager，用ArrayMap保存mAllLoaderManager，在其生命周期内对各个loaderManager进行管理，在onstart中start,在onstop中 stop,在onDestory中destroy等<br>2.activity配置改变时，activity销毁时会保存mAllLoaderManager,retain各个loaderManager，在activity重新创建时，在 onAttcach,oncreate，performStart中恢复<br>3.loaderManager对其负责的loader进行统一管理<br>    (1).对loader用loadinfo类封装，负责调用loader的startLoading,stopLoading,forceLoad等方法<br>    (2).提供initLoader,doStart,doStop,doDestory等方法给activity调用，提供  restartLoader(会重新创建loader并start去加载数据)等方法给用户调用<br>4.加载数据的流程 activity调用 loaderManager doStart,loaderManager调用loader startLoading,加载数据完毕，取消加载等回调也是一层层向上回调<br>5.由于activity在其生命周期内对loader进行管控，所以在loader使用过程中，用户无需手动释放资源,由activity帮忙管理。如对于CursorLoader，对于cursor，无需手动关闭<br>6.对于CursorLoader,数据源变换时会通过contentObserver调用onContentChanged,最终调用forceLoad重新获取数据进行通知。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简介：">简介：</h1><p>loader机制在android 3.0后加入android framework。其目的在于方便开发人员在activity和fragment中异步地加载数据。（可以替代直接使用线程或者AsyncTask，对需要异步加载的过程进行统一管理）<br>另外loader还有如下特征：<br>1.对数据源变化进行监听，实时更新数据。<br>2.在activity配置发生变化（如横竖屏切换时无需重复加载数据）<br>3.对于CursorLoader，开发人员无需去close cursor，系统会帮忙管理<br>]]>
    
    </summary>
    
      <category term="LoaderManager" scheme="http://coderrobin.com/tags/LoaderManager/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目源码分析-PagerSlidingTabStrip]]></title>
    <link href="http://coderrobin.com/2015/02/04/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-PagerSlidingTabStrip/"/>
    <id>http://coderrobin.com/2015/02/04/开源项目源码分析-PagerSlidingTabStrip/</id>
    <published>2015-02-04T14:18:43.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>最近在项目中用到了PagerSlidingTabStrip（<a href="https://github.com/astuetz/PagerSlidingTabStrip" target="_blank" rel="external">github地址</a>），于是就看了下其实现，发现实现不是特别复杂，算是一个学习自定义控件的不错的例子，于是便拿出来跟大家分享下。<br>PagerSlidingTabStrip控件效果如下，支持viewpager滑动时，选项卡联动<br><img src="/image/pagerslidingtab.png" alt="pagerslidingtab" title="pagerslidingtab"></p>
<h1 id="使用方式">使用方式</h1><p>下面我们先来看看其使用方式</p>
<h2 id="xml中配置：">xml中配置：</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.astuetz.PagerSlidingTabStrip</span><br><span class="line">       android:<span class="variable">id=</span><span class="string">"@+id/tabs"</span></span><br><span class="line">       android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">       android:<span class="variable">layout_height=</span>“wrap_content<span class="string">"</span><br><span class="line">      /&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="绑定ViewPager">绑定ViewPager</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">		setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">		tabs = (PagerSlidingTabStrip) findViewById(R.id.tabs);</span><br><span class="line">		pager = (ViewPager) findViewById(R.id.pager);</span><br><span class="line">		adapter = <span class="keyword">new</span> MyPagerAdapter(getFragmentManager());</span><br><span class="line"></span><br><span class="line">		pager.setAdapter(adapter);</span><br><span class="line">		tabs.setViewPager(pager);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="让自定义的viewpager的adapter实现方法">让自定义的viewpager的adapter实现方法</h2><p>若需要导航栏为图标，则实现PagerSlidingTabStrip提供的IconTabProvider接口的getPageIconResId方法</p>
<p>若需要导航栏内容为文字，则直接实现adapter的getPageTitle方法</p>
<p>若需要实现其他方式，比如图片下面加文字等，则需要修改addTab的方法，看完以下源码分析就可以知道了如何修改了</p>
<h2 id="自定义属性">自定义属性</h2><p>PagerSlidingTabStrip提供了如下自定义属性<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pstsIndicatorColor  滑动指示器颜色</span><br><span class="line">pstsUnderlineColor 视图的底部的全宽线的颜色</span><br><span class="line">pstsDividerColor       选项卡之间的分隔线的颜色</span><br><span class="line">pstsIndicatorHeight  滑动指标高度</span><br><span class="line">pstsUnderlineHeight  视图的底部高度的全宽线</span><br><span class="line">pstsDividerPadding  顶部和分频器的底部填充</span><br><span class="line">pstsTabPaddingLeftRight 每个选项卡的padding</span><br><span class="line">pstsTabBackground <span class="constant">tab</span>背景，可以为StateListDrawable</span><br><span class="line">pstsShouldExpand    如果设置为<span class="constant">true</span>，每个选项卡被赋予了相同的weight，长度一致，默认为<span class="constant">false</span></span><br><span class="line">pstsTextAllCaps   如果为<span class="constant">true</span>，所有的选项卡标题将是大写，默认为<span class="constant">true</span></span><br></pre></td></tr></table></figure></p>
<h1 id="源码分析">源码分析</h1><p>知道如何使用后我们来分析源码。了解具体的实现过程和在使用过程中应注意的事项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承HorizontalScrollView，导航栏超出界面时可左右滑动</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PagerSlidingTabStrip</span> <span class="keyword">extends</span> <span class="title">HorizontalScrollView</span> </span><br><span class="line">	//<span class="title">viewpager</span> <span class="title">adpter</span>可选择实现的接口</span><br><span class="line">	<span class="title">public</span> <span class="title">interface</span> <span class="title">IconTabProvider</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageIconResId</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PagerSlidingTabStrip</span><span class="params">(Context context, AttributeSet attrs,</span><br><span class="line"> <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">		setFillViewport(<span class="keyword">true</span>);</span><br><span class="line">		setWillNotDraw(<span class="keyword">false</span>);</span><br><span class="line">		<span class="comment">//动态生成导航栏的LinearLayout，并将其addview到父控件中</span></span><br><span class="line">		tabsContainer = <span class="keyword">new</span> LinearLayout(context);</span><br><span class="line">		tabsContainer.setOrientation(LinearLayout.HORIZONTAL);</span><br><span class="line">		tabsContainer.setLayoutParams(<span class="keyword">new</span> LayoutParams(</span><br><span class="line">		LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));</span><br><span class="line">		addView(tabsContainer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//该处省略获取自定义属性的代码</span></span><br><span class="line">		</span><br><span class="line">		rectPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">		rectPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">		rectPaint.setStyle(Style.FILL);</span><br><span class="line"></span><br><span class="line">		dividerPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">		dividerPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">		dividerPaint.setStrokeWidth(dividerWidth);</span><br><span class="line"></span><br><span class="line">		defaultTabLayoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams</span><br><span class="line">(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);</span><br><span class="line">		expandedTabLayoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(<span class="number">0</span>, </span><br><span class="line">LayoutParams.MATCH_PARENT, <span class="number">1.0f</span>);</span><br><span class="line"><span class="keyword">if</span> (locale == <span class="keyword">null</span>) &#123;</span><br><span class="line">			locale = getResources().getConfiguration().locale;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置viewpager接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setViewPager</span><span class="params">(ViewPager pager)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.pager = pager;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//设置viewpager时需先设置adapter否则会报错，</span></span><br><span class="line">		<span class="comment">//因为无法获得导航栏的需要的内容</span></span><br><span class="line">		<span class="keyword">if</span> (pager.getAdapter() == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException</span><br><span class="line">(<span class="string">"ViewPager does not have adapter instance."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置了viewpager的OnPageChangeListener,因此用户不可以给viewpager</span></span><br><span class="line">		<span class="comment">//设置该监听，而应该给pagerSlidingtabStrip设置监听（用了静态代理），</span></span><br><span class="line">		<span class="comment">//否则会导致该控件无法正常使用，</span></span><br><span class="line">		pager.setOnPageChangeListener(pageListener);</span><br><span class="line"></span><br><span class="line">		notifyDataSetChanged();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnPageChangeListener</span><span class="params">(OnPageChangeListener listener)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.delegatePageListener = listener;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//移除全部子视图，根据adapter内容addTab</span></span><br><span class="line">		tabsContainer.removeAllViews();</span><br><span class="line"></span><br><span class="line">		tabCount = pager.getAdapter().getCount();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tabCount; i++) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (pager.getAdapter() <span class="keyword">instanceof</span> IconTabProvider) &#123;</span><br><span class="line">				addIconTab(i, ((IconTabProvider) pager.getAdapter()).</span><br><span class="line">				getPageIconResId(i));</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				addTextTab(i, pager.getAdapter().getPageTitle(i).toString());</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		updateTabStyles();</span><br><span class="line"></span><br><span class="line">		getViewTreeObserver().addOnGlobalLayoutListener(</span><br><span class="line">		<span class="keyword">new</span> OnGlobalLayoutListener() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="annotation">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">			<span class="annotation">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">				getViewTreeObserver().removeGlobalOnLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">				currentPosition = pager.getCurrentItem();</span><br><span class="line">				scrollToChild(currentPosition, <span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//添加文字导航栏内容</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTextTab</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, String title)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		TextView tab = <span class="keyword">new</span> TextView(getContext());</span><br><span class="line">		tab.setText(title);</span><br><span class="line">		tab.setGravity(Gravity.CENTER);</span><br><span class="line">		tab.setSingleLine();</span><br><span class="line"></span><br><span class="line">		addTab(position, tab);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//添加图片导航栏内容</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addIconTab</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, <span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		ImageButton tab = <span class="keyword">new</span> ImageButton(getContext());</span><br><span class="line">		tab.setImageResource(resId);</span><br><span class="line"></span><br><span class="line">		addTab(position, tab);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTab</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View tab)</span> </span>&#123;</span><br><span class="line">		tab.setFocusable(<span class="keyword">true</span>);</span><br><span class="line">		tab.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">				pager.setCurrentItem(position);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">//设置每个tab左右的padding</span></span><br><span class="line">		tab.setPadding(tabPadding, <span class="number">0</span>, tabPadding, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//往container里面动态添加tab,根据shouldExpand layoutparm分别为</span></span><br><span class="line">		<span class="comment">//expandedTabLayoutParam(每个tab weight相同即宽度一致)</span></span><br><span class="line">		tabsContainer.addView(tab, position, shouldExpand ?</span><br><span class="line">		 expandedTabLayoutParams : defaultTabLayoutParams);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置每个tab的风格，包含背景、文字大小、颜色、字体、是否大写等</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateTabStyles</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tabCount; i++) &#123;</span><br><span class="line"></span><br><span class="line">			View v = tabsContainer.getChildAt(i);</span><br><span class="line"></span><br><span class="line">			v.setBackgroundResource(tabBackgroundResId);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (v <span class="keyword">instanceof</span> TextView) &#123;</span><br><span class="line"></span><br><span class="line">				TextView tab = (TextView) v;</span><br><span class="line">				tab.setTextSize(TypedValue.COMPLEX_UNIT_PX, tabTextSize);</span><br><span class="line">				tab.setTypeface(tabTypeface, tabTypefaceStyle);</span><br><span class="line">				tab.setTextColor(tabTextColor);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (textAllCaps) &#123;</span><br><span class="line">					<span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;=</span><br><span class="line"> 					Build.VERSION_CODES.ICE_CREAM_SANDWICH) &#123;</span><br><span class="line">						tab.setAllCaps(<span class="keyword">true</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						tab.setText(tab.getText().toString().</span><br><span class="line">						toUpperCase(locale));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//滚动到特定位置,调用父类scrollTo，布局超出边界才会起作用</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrollToChild</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> offset)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (tabCount == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> newScrollX = tabsContainer.getChildAt(position)</span><br><span class="line">		.getLeft() + offset;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (position &gt; <span class="number">0</span> || offset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			newScrollX -= scrollOffset;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (newScrollX != lastScrollX) &#123;</span><br><span class="line">			lastScrollX = newScrollX;</span><br><span class="line">			scrollTo(newScrollX, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//onDraw方法，重头戏</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (isInEditMode() || tabCount == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//获取pagerslidingTab的底部坐标,后续都是在底部-高度获得top坐标</span></span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">int</span> height = getHeight();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//根据当前tab坐标和下一个tab坐标和currentPositionOffset</span></span><br><span class="line">		<span class="comment">//计算底部指示器坐标并绘制，实际是一个特定颜色的矩形</span></span><br><span class="line"></span><br><span class="line">		rectPaint.setColor(indicatorColor);</span><br><span class="line">		View currentTab = tabsContainer.getChildAt(currentPosition);</span><br><span class="line">		<span class="keyword">float</span> lineLeft = currentTab.getLeft();</span><br><span class="line">		<span class="keyword">float</span> lineRight = currentTab.getRight();</span><br><span class="line">		<span class="keyword">if</span> (currentPositionOffset &gt; <span class="number">0f</span> &amp;&amp; currentPosition &lt; tabCount - <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">			View nextTab = tabsContainer.getChildAt(currentPosition + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">final</span> <span class="keyword">float</span> nextTabLeft = nextTab.getLeft();</span><br><span class="line">			<span class="keyword">final</span> <span class="keyword">float</span> nextTabRight = nextTab.getRight();</span><br><span class="line"></span><br><span class="line">			lineLeft = (currentPositionOffset * nextTabLeft +</span><br><span class="line"></span><br><span class="line"> (<span class="number">1f</span> - currentPositionOffset) * lineLeft);</span><br><span class="line">			lineRight = (currentPositionOffset * nextTabRight +</span><br><span class="line"></span><br><span class="line"> (<span class="number">1f</span> - currentPositionOffset) * lineRight);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		canvas.drawRect(lineLeft, height - indicatorHeight,</span><br><span class="line">		 lineRight, height, rectPaint);</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//根据高度绘制底部矩形长条</span></span><br><span class="line">		rectPaint.setColor(underlineColor);</span><br><span class="line">		canvas.drawRect(<span class="number">0</span>, height - underlineHeight,</span><br><span class="line">	        tabsContainer.getWidth(), height, rectPaint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//绘制各个tab之间纵向的dividerPadding长度的分隔线</span></span><br><span class="line"></span><br><span class="line">		dividerPaint.setColor(dividerColor);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tabCount - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			View tab = tabsContainer.getChildAt(i);</span><br><span class="line">			canvas.drawLine(tab.getRight(), dividerPadding, tab.getRight(), </span><br><span class="line">			height -dividerPadding, dividerPaint);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部PageListener类，用于监听滑动事件得到当前滑动偏移量和当前tab</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PageListener</span> <span class="keyword">implements</span> <span class="title">OnPageChangeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, </span><br><span class="line">		<span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">			currentPosition = position;</span><br><span class="line">			currentPositionOffset = positionOffset;</span><br><span class="line"></span><br><span class="line">			scrollToChild(position, (<span class="keyword">int</span>) (positionOffset * </span><br><span class="line">			tabsContainer.getChildAt(position).getWidth()));</span><br><span class="line"></span><br><span class="line">			invalidate();</span><br><span class="line">			<span class="comment">//给pagerslidingtab加滑动监听即委托执行delegatePageListener的方法</span></span><br><span class="line">			<span class="keyword">if</span> (delegatePageListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">				delegatePageListener.onPageScrolled(position, </span><br><span class="line">					positionOffset, positionOffsetPixels);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == ViewPager.SCROLL_STATE_IDLE) &#123;</span><br><span class="line">				scrollToChild(pager.getCurrentItem(), <span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (delegatePageListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">				delegatePageListener.onPageScrollStateChanged(state);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (delegatePageListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">				delegatePageListener.onPageSelected(position);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">/×</span><br><span class="line">省略获取和设置属性的一系列方法</span><br><span class="line">×/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//activity销毁时在onSaveInstanceState记录当前页数，</span></span><br><span class="line"><span class="comment">//当onRestoreInstanceState获得当前页数并重新</span></span><br><span class="line"><span class="comment">//requestLayout进行测量、布局和绘制</span></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Parcelable state)</span> </span>&#123;</span><br><span class="line">		SavedState savedState = (SavedState) state;</span><br><span class="line">		<span class="keyword">super</span>.onRestoreInstanceState(savedState.getSuperState());</span><br><span class="line">		currentPosition = savedState.currentPosition;</span><br><span class="line">		requestLayout();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Parcelable <span class="title">onSaveInstanceState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Parcelable superState = <span class="keyword">super</span>.onSaveInstanceState();</span><br><span class="line">		SavedState savedState = <span class="keyword">new</span> SavedState(superState);</span><br><span class="line">		savedState.currentPosition = currentPosition;</span><br><span class="line">		<span class="keyword">return</span> savedState;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SavedState</span> <span class="keyword">extends</span> <span class="title">BaseSavedState</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> currentPosition;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">SavedState</span><span class="params">(Parcelable superState)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>(superState);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="title">SavedState</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>(in);</span><br><span class="line">			currentPosition = in.readInt();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>.writeToParcel(dest, flags);</span><br><span class="line">			dest.writeInt(currentPosition);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;SavedState&gt; CREATOR </span><br><span class="line">		= <span class="keyword">new</span> Parcelable.Creator&lt;SavedState&gt;() &#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> SavedState <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> SavedState(in);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="keyword">public</span> SavedState[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> SavedState[size];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="总结：">总结：</h1><p>以上就是对pagerSlidingTabStrip源码的分析，整个源码较简单<br>1.在container（linerlayout）中添加了tab(textview或者imageButton)<br>2.在onDraw方法里面根据当前页和偏移量计算和绘制矩形指示器、矩形底部长栏、纵向的tab之间的分割线，<br>3.对viewpager的onPageListener中获取当前偏移量并滑动到该子tab</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在项目中用到了PagerSlidingTabStrip（<a href="https://github.com/astuetz/PagerSlidingTabStrip">github地址</a>），于是就看了下其实现，发现实现不是特别复杂，算是一个学习自定义控件的不错的例子，于是便拿出来跟大家分享下。<br>PagerSlidingTabStrip控件效果如下，支持viewpager滑动时，选项卡联动<br><img src="/image/pagerslidingtab.png" alt="pagerslidingtab" title="pagerslidingtab"></p>
<h1 id="使用方式">使用方式</h1><p>下面我们先来看看其使用方式</p>
<h2 id="xml中配置：">xml中配置：</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.astuetz.PagerSlidingTabStrip</span><br><span class="line">       android:<span class="variable">id=</span><span class="string">"@+id/tabs"</span></span><br><span class="line">       android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">       android:<span class="variable">layout_height=</span>“wrap_content<span class="string">"</span><br><span class="line">      /&gt;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="PagerSlidingTabStrip" scheme="http://coderrobin.com/tags/PagerSlidingTabStrip/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CustomViews开源项目]]></title>
    <link href="http://coderrobin.com/2015/02/01/CustomViews%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    <id>http://coderrobin.com/2015/02/01/CustomViews开源组件/</id>
    <published>2015-01-31T16:36:21.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/CoderRobin/CommonViews" target="_blank" rel="external">CustomViews </a>（code by CoderRobin）是20150201开始创建的开源项目，目标是开源各种实用的android布局与控件。<br>以下为该开源项目现有的布局与控件，本博文将随着项目的更新实时更新</p>
<h1 id="NestRadioGroup布局">NestRadioGroup布局</h1><p>该布局继承了LinearLayout,功能为该布局下任意CompoundButton会保持互斥状态（如radiobutton、checkbox),对外提供了与android自带 的radioGroup相同的接口<br>用户在layout xml文件中如使用RadioGroup一样使用即可,现已包含如下接口<br>setChecked(int checkedId);<br>setOnCheckedChangeListener<br>getCheckedId()</p>
<h1 id="RippleView动画">RippleView动画</h1><p>继承自view，重写了onMeasure和onDraw方法,使用属性动画和自定义的TypeEvaluator实现<br>对外暂时提供了以下接口<br>startRippleAnimation<br>stopRippleAnimation<br>效果就是如下图<br><img src="/image/rippleview.gif" alt="rippleview " title="rippleview"><br><a id="more"></a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/CoderRobin/CommonViews">CustomViews </a>（code by CoderRobin）是20150201开始创建的开源项目，目标是开源各种实用的android布局与控件。<br>以下为该开源项目现有的布局与控件，本博文将随着项目的更新实时更新</p>
<h1 id="NestRadioGroup布局">NestRadioGroup布局</h1><p>该布局继承了LinearLayout,功能为该布局下任意CompoundButton会保持互斥状态（如radiobutton、checkbox),对外提供了与android自带 的radioGroup相同的接口<br>用户在layout xml文件中如使用RadioGroup一样使用即可,现已包含如下接口<br>setChecked(int checkedId);<br>setOnCheckedChangeListener<br>getCheckedId()</p>
<h1 id="RippleView动画">RippleView动画</h1><p>继承自view，重写了onMeasure和onDraw方法,使用属性动画和自定义的TypeEvaluator实现<br>对外暂时提供了以下接口<br>startRippleAnimation<br>stopRippleAnimation<br>效果就是如下图<br><img src="/image/rippleview.gif" alt="rippleview " title="rippleview"><br>]]>
    
    </summary>
    
      <category term="CustomViews" scheme="http://coderrobin.com/tags/CustomViews/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[activity与fragment切换动画]]></title>
    <link href="http://coderrobin.com/2015/01/29/activity%E4%B8%8Efragment%E5%88%87%E6%8D%A2%E5%8A%A8%E7%94%BB/"/>
    <id>http://coderrobin.com/2015/01/29/activity与fragment切换动画/</id>
    <published>2015-01-28T16:58:34.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Activity切换动画">Activity切换动画</h1><p>  activity切换的动画为teen Animation，包含了基本的动画类型,scale、alpha、translate和raotation，当然也可以是animationset。详见上一篇博文<a href="http://coderrobin.com/2015/01/28/android-view%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80/" target="_blank" rel="external">android 控件动画基础</a>。<br>  以下为activity切换动画的具体方式</p>
<h2 id="通过theme设置切换动画">通过theme设置切换动画</h2><p>在 AndroidManifest.xml 文件中，通过 android:theme 属性设置 Activity 的主题。主题中定义了关于 Activity 外观的很多特性。其中就包含 Activity 的切换动画。在主题style中使用 windowAnimationStyle 这个属性，即可指定切换动画的style。<br><a id="more"></a><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="property">name</span>=<span class="string">"AnimActivityTheme"</span>&gt;</span><br><span class="line">    &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:windowAnimationStyle"</span>&gt;@style/FeelyouWindowAnimTheme&lt;/<span class="property">item</span>&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>定义切换动画 style<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="property">name</span>=<span class="string">"FeelyouWindowAnimTheme"</span> parent=<span class="string">"@android:style/Animation.Activity"</span>&gt;</span><br><span class="line">    &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:activityOpenEnterAnimation"</span>&gt;@anim/in_from_left&lt;/<span class="property">item</span>&gt;</span><br><span class="line">    &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:activityOpenExitAnimation"</span>&gt;@anim/out_from_right&lt;/<span class="property">item</span>&gt;</span><br><span class="line">    &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:activityCloseEnterAnimation"</span>&gt;@anim/in_from_right&lt;/<span class="property">item</span>&gt;</span><br><span class="line">    &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:activityCloseExitAnimation"</span>&gt;@anim/out_from_left&lt;/<span class="property">item</span>&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>注意需要继承自 @android:style/Animation.Activity。具体这4个属性什么意思呢？假设我们有 2 个 Activity，分别是 A1 和 A2：<br>    当我们从 A1 启动 A2 时，A1 从屏幕上消失，这个动画叫做 android:activityOpenExitAnimation<br>    当我们从 A1 启动 A2 时，A2 出现在屏幕上，这个动画叫做 android:activityOpenEnterAnimation<br>    当我们从 A2 退出回到 A1 时，A2 从屏幕上消失，这个叫做 android:activityCloseExitAnimation<br>    当我们从 A2 退出回到 A1 时，A1 出现在屏幕上，这个叫做 android:activityCloseEnterAnimation</p>
<h2 id="调用overridePendingTransition(int_enterAnim,_int_exitAnim)方法">调用overridePendingTransition(int enterAnim, int exitAnim)方法</h2><p>　　这个方法在startActivity(Intent) or finish()之后被调用，指定接下来的这个切换动画。第一个参数：enterAnim，是新的Activity的进入动画的resource ID，第二个参数exitAnim，是旧的Activity(当前的Activity)离开动画的resource ID。所以这两个参数的对象是两个Activity。</p>
<h1 id="Fragment切换动画">Fragment切换动画</h1><p>　　Fragment的切换动画实现分为使用v4包和不使用v4包两种情况，不使用v4包的话，最低API Level需要是11。</p>
<h2 id="标准切换动画：">标准切换动画：</h2><p>　　可以给Fragment指定标准的切换动画，通过setTransition(int transit)方法。</p>
<p>　　该方法可传入的三个参数是：</p>
<p>　　TRANSIT_NONE,</p>
<p>　　TRANSIT_FRAGMENT_OPEN,</p>
<p>　　TRANSIT_FRAGMENT_CLOSE</p>
<p>　　分别对应无动画、打开形式的动画和关闭形式的动画。</p>
<p>　　标准动画设置好后，在Fragment添加和移除的时候都会有。</p>
<h2 id="自定义切换动画">自定义切换动画</h2><p>　　自定义切换动画是通过setCustomAnimations()方法，因为Fragment添加时可以指定加入到Back Stack中，所以切换动画有添加、移除、从Back stack中pop出来，还有进入四种情况。</p>
<p>　　注意setCustomAnimations()方法必须在add、remove、replace调用之前被设置，否则不起作用。</p>
<p>android.app.Fragment</p>
<p>　　不使用v4包的情况下(min API &gt;=11)所对应的动画类型是Property Animation。</p>
<p>　　即动画资源文件需要放在res\animator\目录下，且根标签是<set>, <objectanimator>, or <valueanimator>三者之一。</valueanimator></objectanimator></set></p>
<p>　　这一点也可以从Fragment中的这个方法看出：onCreateAnimator(int transit, boolean enter, int nextAnim)，返回值是Animator。</p>
<p>　　自定义切换动画时，四个参数的形式setCustomAnimations (int enter, int exit, int popEnter, int popExit)是API Level 13才有的，11只引入了两个动画的形式，即无法指定Back Stack栈操作时的切换动画。</p>
<p>　　代码例子：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">addFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mFragmentManager) &#123;</span><br><span class="line">        mFragmentManager = getFragmentManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mTextFragmentOne = <span class="keyword">new</span> MyFragmentOne();</span><br><span class="line">    FragmentTransaction fragmentTransaction = mFragmentManager</span><br><span class="line">            .beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标准动画</span></span><br><span class="line">    <span class="comment">// fragmentTransaction</span></span><br><span class="line">    <span class="comment">// .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);</span></span><br><span class="line">    <span class="comment">// fragmentTransaction</span></span><br><span class="line">    <span class="comment">// .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fragmentTransaction</span></span><br><span class="line">    <span class="comment">// .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义动画</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// API LEVEL 11</span></span><br><span class="line">    fragmentTransaction.setCustomAnimations(</span><br><span class="line">            R.animator.fragment_slide_left_enter,</span><br><span class="line">            R.animator.fragment_slide_right_exit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// API LEVEL 13</span></span><br><span class="line">    <span class="comment">// fragmentTransaction.setCustomAnimations(</span></span><br><span class="line">    <span class="comment">// R.animator.fragment_slide_left_enter,</span></span><br><span class="line">    <span class="comment">// R.animator.fragment_slide_left_exit,</span></span><br><span class="line">    <span class="comment">// R.animator.fragment_slide_right_enter,</span></span><br><span class="line">    <span class="comment">// R.animator.fragment_slide_right_exit);</span></span><br><span class="line"></span><br><span class="line">    fragmentTransaction.add(R.id.container, mTextFragmentOne);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加入到BackStack中</span></span><br><span class="line">    fragmentTransaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">    fragmentTransaction.commit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>android.support.v4.app.Fragment</p>
<p>　　使用v4包，Fragment的使用不再局限于API Level 11之上，低等级的API也可以使用，但是这时候切换动画的类型是View Animation。</p>
<p>　　动画资源放在res\anim\路径下，和Activity的切换动画一样。</p>
<p>　　Fragment中的方法：onCreateAnimation(int transit, boolean enter, int nextAnim)返回值Animation。</p>
<p>　　FragmentTransaction中的setCustomAnimations()方法，两参数类型和四参数类型都可用。</p>
<p>　　所以一般还是用v4包的这个版本，一是兼容性比较好，另外View Animation其实基本可以满足切换动画的需要。<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void addFragment<span class="literal">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (null == mFragmentManager) &#123;</span><br><span class="line">        mFragmentManager = getSupportFragmentManager<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mTextFragmentOne = <span class="keyword">new</span> <span class="type">MyFragmentOne</span><span class="literal">()</span>;</span><br><span class="line">    <span class="type">FragmentTransaction</span> fragmentTransaction = mFragmentManager</span><br><span class="line">            .beginTransaction<span class="literal">()</span>;</span><br><span class="line">    fragmentTransaction.setCustomAnimations(</span><br><span class="line">            <span class="type">R</span>.anim.push_left_in,</span><br><span class="line">            <span class="type">R</span>.anim.push_left_out,</span><br><span class="line">            <span class="type">R</span>.anim.push_left_in,</span><br><span class="line">            <span class="type">R</span>.anim.push_left_out);</span><br><span class="line"></span><br><span class="line">    fragmentTransaction.add(<span class="type">R</span>.id.container, mTextFragmentOne);</span><br><span class="line"></span><br><span class="line">    fragmentTransaction.addToBackStack(null);</span><br><span class="line">    fragmentTransaction.commit<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Activity切换动画">Activity切换动画</h1><p>  activity切换的动画为teen Animation，包含了基本的动画类型,scale、alpha、translate和raotation，当然也可以是animationset。详见上一篇博文<a href="http://coderrobin.com/2015/01/28/android-view%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80/">android 控件动画基础</a>。<br>  以下为activity切换动画的具体方式</p>
<h2 id="通过theme设置切换动画">通过theme设置切换动画</h2><p>在 AndroidManifest.xml 文件中，通过 android:theme 属性设置 Activity 的主题。主题中定义了关于 Activity 外观的很多特性。其中就包含 Activity 的切换动画。在主题style中使用 windowAnimationStyle 这个属性，即可指定切换动画的style。<br>]]>
    
    </summary>
    
      <category term="动画" scheme="http://coderrobin.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android 控件动画基础]]></title>
    <link href="http://coderrobin.com/2015/01/28/android-view%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80/"/>
    <id>http://coderrobin.com/2015/01/28/android-view动画基础/</id>
    <published>2015-01-27T16:20:18.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>android控件的动画分为三种,property animation,tween animation,frame animation，这三种动画模式在SDK中被称为property animation,view animation,drawable animation。(在3.0之前的系统中使用Property Animation可通过NineOldAndroids项目<a href="http://nineoldandroids.com/" target="_blank" rel="external">http://nineoldandroids.com/</a> )</p>
<h1 id="Tween_Animation">Tween Animation</h1><p>View Animation（Tween Animation）：补间动画，给出两个关键帧，通过一些算法将给定属性值在给定的时间内在两个关键帧间渐变。<br>它只是改变了View对象的绘制，而没有改变View对象本身,分为以下四种动画:</p>
<h2 id="AlphaAnimation">AlphaAnimation</h2><p>渐变动画，主要控制透明度变化动画类，常使用AlphaAnimation(float fromAlpha, float toAlpha)来构造；<br>    fromAlpha：动画开始时的透明度（取值范围为0.0到1.0）；<br>    toAlpha：动画结束时的透明度；<br><a id="more"></a></p>
<h2 id="ScaleAnimation">ScaleAnimation</h2><p>主要控制尺度变化的动画类，常使用ScaleAnimation(float fromX, float toX, float fromY, float toY, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)来构造；</p>
<pre><code>fromX：动画开始X坐标上的伸缩尺度；
toX：动画结束X坐标上的伸缩尺度；
fromY：动画开始Y坐标上的伸缩尺度；
toY：动画结束Y坐标上的伸缩尺度；
pivotXType：X坐标上的伸缩模式，取值有：Animation<span class="class">.ABSOLUTE</span>, Animation<span class="class">.RELATIVE_TO_SELF</span>, Animation.RELATIVE_TO_PARENT；
pivotXValue：X坐标上的伸缩值；
pivotYType：Y坐标上的伸缩模式，取值有：Animation<span class="class">.ABSOLUTE</span>, Animation<span class="class">.RELATIVE_TO_SELF</span>, Animation.RELATIVE_TO_PARENT；
pivotYValue：Y坐标上的伸缩值；
</code></pre><h2 id="TranslateAnimation">TranslateAnimation</h2><p>主要控制位置变换的动画实现类，常使用TranslateAnimation(float fromXDelta, float toXDelta, float fromYDelta, float toYDelta)来构造；<br>    fromXDelta：动画开始的X坐标；<br>    toXDelta：动画结束的X坐标；<br>    fromYDelta：动画开始的Y坐标；<br>    toYDelta：动画结束的Y坐标；</p>
<h2 id="RotateAnimation">RotateAnimation</h2><p>主要控制旋转的动画实现类，常使用RotateAnimation(float fromDegrees, float toDegrees, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)来构造；<br>    fromDegrees：旋转开始角度；<br>    toDegrees：旋转结束角度；<br>    pivotXType, pivotXValue, pivotYType, pivotYValue与尺度变化动画ScaleAnimation类似；</p>
<p>用XML定义的动画放在/res/anim/文件夹内，XML文件的根元素可以为<alpha>,<scale>,<translate>,<rotate>,interpolator元素或<set>(表示以上几个动画的集合，set可以嵌套)。默认情况下，所有动画是同时进行的，可以通过startOffset属性设置各个动画的开始偏移（开始时间）来达到动画顺序播放的效果。<br>可以通过设置interpolator属性改变动画渐变的方式，如AccelerateInterpolator，开始时慢，然后逐渐加快。默认为AccelerateDecelerateInterpolator。<br>定义好动画的XML文件后，可以通过类似下面的代码对指定View应用动画。</set></rotate></translate></scale></alpha></p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ImageView <span class="variable">spaceshipImage =</span> (ImageView)findViewById(R.id.spaceshipImage);</span><br><span class="line">Animation <span class="variable">hyperspaceJumpAnimation=</span>AnimationUtils.loadAnimation(this, R.anim.hyperspace_jump);</span><br><span class="line">spaceshipImage.startAnimation(hyperspaceJumpAnimation);</span><br></pre></td></tr></table></figure>
<h1 id="Drawable_Animation（Frame_Animation）">Drawable Animation（Frame Animation）</h1><p>Drawable Animation（Frame Animation）：帧动画，就像GIF图片，通过一系列Drawable依次显示来模拟动画的效果。通过给控件设置setBackgroundResource实现,在XML中的定义方式如下：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;animation-list xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:<span class="variable">oneshot=</span><span class="string">"true"</span>&gt; //是否只播放一次</span><br><span class="line">    &lt;item android:<span class="variable">drawable=</span><span class="string">"@drawable/1"</span> android:<span class="variable">duration=</span><span class="string">"200"</span> /&gt;</span><br><span class="line">    &lt;item android:<span class="variable">drawable=</span><span class="string">"@drawable/2"</span> android:<span class="variable">duration=</span><span class="string">"200"</span> /&gt;</span><br><span class="line">    &lt;item android:<span class="variable">drawable=</span><span class="string">"@drawable/t3"</span> android:<span class="variable">duration=</span><span class="string">"200"</span> /&gt;</span><br><span class="line">&lt;/animation-list&gt;</span><br><span class="line">//必须以&lt;animation-list&gt;为根元素，以&lt;item&gt;表示要轮换显示的图片，duration属性表示各项显示的时间。XML文件要放在/res/drawable/目录下</span><br><span class="line"></span><br><span class="line">        <span class="variable">imageView =</span> (ImageView) findViewById(R.id.imageView);</span><br><span class="line">        imageView.setBackgroundResource(R.drawable.drawable_anim);</span><br><span class="line">        <span class="variable">anim =</span> (AnimationDrawable) imageView.getBackground();</span><br><span class="line">	anim.start();</span><br></pre></td></tr></table></figure></p>
<h1 id="Property_Animation">Property Animation</h1><p>属性动画，它更改的是对象的实际属性，在Tween Animation，其改变的是View的绘制效果，真正的View的属性保持不变，比如无论你在对话中如何缩放Button的大小，Button的有效点击区域还是没有应用动画时的区域，其位置与大小都不变。而在Property Animation中，改变的是对象的实际属性，如Button的缩放，Button的位置与大小属性值都改变了。而且Property Animation不止可以应用于View，还可以应用于任何对象。Property Animation只是表示一个值在一段时间内的改变，当值改变时要做什么事情完全是你自己决定的.</p>
<p>在Property Animation中，可以对动画应用以下属性：<br>    Duration：动画的持续时间<br>    TimeInterpolation：插值器<br>    TypeEvaluator：计算方式,根据属性的开始、结束值与TimeInterpolation计算出的因子计算出当前时间的属性值<br>    Repeat Count and behavoir：重复次数与方式<br>    Animation sets：动画集合，即可以同时对一个对象应用几个动画，这些动画可以同时播放也可以对不同动画设置不同开始偏移<br>    Frame refreash delay：多少时间刷新一次，即每隔多少时间计算一次属性值，默认为10ms，最终刷新时间还受系统进程调度与硬件的影响</p>
<h2 id="Property_Animation的工作方式">Property Animation的工作方式</h2><p>ValueAnimator 表示一个动画，包含动画的开始值，结束值，持续时间等属性。<br>ValueAnimator封装了一个TimeInterpolator，TimeInterpolator定义了属性值在开始值与结束值之间的插值方法。<br>ValueAnimator还封装了一个TypeAnimator，根据开始、结束值与TimeIniterpolator计算得到的值计算出属性值。<br>ValueAnimator根据动画已进行的时间跟动画总时间（duration）的比计算出一个客观时间比例（0~1），然后根据TimeInterpolator计算出插值后的时间因子，最后TypeAnimator通过这个因子计算出属性值<br>对于ValueAnimator有两种监听</p>
<p>Animator.AnimatorListener(可通过继承AnimatorListenerAdapter简化操作,该抽象类为接口的空实现)<br>onAnimationStart()<br>onAnimationEnd()<br>onAnimationRepeat()<br>//当动画被取消时调用，同时会调用onAnimationEnd().<br>onAnimationCancel()</p>
<p>ValueAnimator.AnimatorUpdateListener</p>
<p>onAnimationUpdate()　　//通过监听这个事件在属性的值更新时执行相应的操作，对于ValueAnimator一般要监听此事件执行相应的动作，不然Animation没意义，在ObjectAnimator（继承自ValueAnimator）中会自动更新属性，如无必要不必监听。在函数中会传递一个ValueAnimator参数，通过此参数的getAnimatedValue()取得当前动画属性值。</p>
<h2 id="ObjectAnimator">ObjectAnimator</h2><p>继承自ValueAnimator，要指定一个对象及该对象的一个属性，当属性值计算完成时自动设置为该对象的相应属性，即完成了Property Animation的全部两步操作。实际应用中一般都会用ObjectAnimator来改变某一对象的某一属性，但用ObjectAnimator有一定的限制，要想使用ObjectAnimator，应该满足以下条件：<br>    对象应该有一个setter函数：set<propertyname>（驼峰命名法）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tv=(TextView)findViewById(R.id.textview1);</span><br><span class="line">btn=(Button)findViewById(R.id.button1);</span><br><span class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">　　@<span class="function">Override</span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">　　　　ObjectAnimator oa=ObjectAnimator.ofFloat(tv, <span class="string">"alpha"</span>, <span class="number">0f</span>, <span class="number">1f</span>);</span><br><span class="line">　　　　oa.setDuration(<span class="number">3000</span>);</span><br><span class="line">　　　　oa.start();</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></propertyname></p>
<pre><code>如上面的例子中，像ofFloat之类的工场方法，第一个参数为对象名，第二个为属性名，后面的参数为可变参数，如果<span class="built_in">values</span>…参数只设置了一个值的话，那么会假定为目的值，属性值的变化范围为当前值到目的值，为了获得当前值，该对象要有相应属性的getter方法：<span class="built_in">get</span>&lt;PropertyName&gt;
如果有getter方法，其应返回值类型应与相应的setter方法的参数类型一致。
</code></pre><p>如果上述条件不满足（即没有get方法和set方法），则不能用ObjectAnimator，应用ValueAnimator代替。根据应用动画的对象或属性的不同，可能需要在onAnimationUpdate函数中调用invalidate()函数刷新视图。</p>
<h2 id="AnimationSet">AnimationSet</h2><p>AnimationSet提供了一个把多个动画组合成一个组合的机制，并可设置组中动画的时序关系，如同时播放，顺序播放等。<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnimatorSet</span> bouncer = <span class="keyword">new</span> <span class="type">AnimatorSet</span><span class="literal">()</span>;</span><br><span class="line">bouncer.play(anim1).before(anim2);</span><br><span class="line">bouncer.play(anim2).<span class="keyword">with</span>(anim3);</span><br><span class="line">bouncer.play(anim2).<span class="keyword">with</span>(anim4)</span><br><span class="line">bouncer.play(anim5).after(amin2);</span><br><span class="line">animatorSet.start<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="TypeEvalutors">TypeEvalutors</h2><p>根据属性的开始、结束值与TimeInterpolation计算出的因子计算出当前时间的属性值，android提供了以下几个evalutor：<br>    IntEvaluator：属性的值类型为int；<br>    FloatEvaluator：属性的值类型为float；<br>    ArgbEvaluator：属性的值类型为十六进制颜色值；<br>    TypeEvaluator：一个接口，可以通过实现该接口自定义Evaluator。<br>自定义TypeEvalutor很简单，只需要实现一个方法，如FloatEvalutor的定义：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FloatEvaluator implements TypeEvaluator &#123;</span><br><span class="line">    <span class="keyword">public</span> Object evaluate(<span class="built_in">float</span> <span class="built_in">fraction</span>, Object startValue, Object endValue) &#123;</span><br><span class="line">        <span class="built_in">float</span> startFloat = ((<span class="keyword">Number</span>) startValue).floatValue();</span><br><span class="line">        <span class="keyword">return</span> startFloat + <span class="built_in">fraction</span> * (((<span class="keyword">Number</span>) endValue).floatValue() - startFloat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="TimeInterplator">TimeInterplator</h2><pre><code>AccelerateInterpolator　　　　　     加速，开始时慢中间加速
DecelerateInterpolator　　　 　　   减速，开始时快然后减速
AccelerateDecelerateInterolator　   先加速后减速，开始结束时慢，中间加速
AnticipateInterpolator　　　　　　  反向 ，先向相反方向改变一段再加速播放
AnticipateOvershootInterpolator　   反向加回弹，先向相反方向改变，再加速播放，会超出目的值然后缓慢移动至目的值
BounceInterpolator　　　　　　　  跳跃，快到目的值时值会跳跃，如目的值100，后面的值可能依次为85，77，70，80，90，100
CycleIinterpolator　　　　　　　　 循环，动画循环一定次数，值的改变为一正弦函数：Math.sin(2 <span class="keyword">*</span> mCycles <span class="keyword">*</span> Math.PI <span class="keyword">*</span> input)
LinearInterpolator　　　　　　　　 线性，线性均匀改变
OvershottInterpolator　　　　　　  回弹，最后超出目的值然后缓慢改变到目的值
TimeInterpolator　　　　　　　　   一个接口，允许你自定义interpolator，以上几个都是实现了这个接口
</code></pre><h2 id="LayoutTransition">LayoutTransition</h2><p>Property animation系统还提供了对ViewGroup中的View改变加入动画的功能。当有子元素可见性改变时(VISIBLE、GONE)，可以向其应用动画，通过LayoutTransition类应用此类动画：<br>container.setLayoutTransition(mTransitioner);<br>mTransitioner.setAnimator(LayoutTransition.DISAPPEARING, customDisappearingAnim);<br>通过setAnimator应用动画，第一个参数表示应用的情境，可以以下4种类型：<br>    APPEARING　　　　　　　　当一个元素在其父元素中变为Visible时对这个元素应用动画<br>    CHANGE_APPEARING　　　 当一个元素在其父元素中变为Visible时，因系统要重新布局有一些元素需要移动，对这些要移动的元素应用动画<br>    DISAPPEARING　　　　　　 当一个元素在其父元素中变为GONE时对其应用动画<br>    CHANGE_DISAPPEARING　  当一个元素在其父元素中变为GONE时，因系统要重新布局有一些元素需要移动，这些要移动的元素应用动画.<br>第二个参数为一Animator。<br>mTransitioner.setStagger(LayoutTransition.CHANGE_APPEARING, 30);<br>此函数设置动画延迟时间，参数分别为类型与时间。</p>
<h2 id="Keyframes">Keyframes</h2><p>keyFrame是一个 时间/值 对，通过它可以定义一个在特定时间的特定状态，即关键帧，而且在两个keyFrame之间可以定义不同的Interpolator，就好像多个动画的拼接，第一个动画的结束点是第二个动画的开始点。KeyFrame是抽象类，要通过ofInt(),ofFloat(),ofObject()获得适当的KeyFrame，然后通过PropertyValuesHolder.ofKeyframe获得PropertyValuesHolder对象，如以下例子：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">Keyframe</span> kf0 = <span class="variable">Keyframe</span>.<span class="keyword">of</span><span class="variable">Int</span>(<span class="number">0</span>, <span class="number">400</span>);</span><br><span class="line"><span class="variable">Keyframe</span> kf1 = <span class="variable">Keyframe</span>.<span class="keyword">of</span><span class="variable">Int</span>(<span class="number">0.25</span>f, <span class="number">200</span>);</span><br><span class="line"><span class="variable">Keyframe</span> kf2 = <span class="variable">Keyframe</span>.<span class="keyword">of</span><span class="variable">Int</span>(<span class="number">0.5</span>f, <span class="number">400</span>);</span><br><span class="line"><span class="variable">Keyframe</span> kf4 = <span class="variable">Keyframe</span>.<span class="keyword">of</span><span class="variable">Int</span>(<span class="number">0.75</span>f, <span class="number">100</span>);</span><br><span class="line"><span class="variable">Keyframe</span> kf3 = <span class="variable">Keyframe</span>.<span class="keyword">of</span><span class="variable">Int</span>(<span class="number">1</span>f, <span class="number">500</span>);</span><br><span class="line"><span class="variable">PropertyValuesHolder</span> pvh<span class="variable">Rotation</span> = <span class="variable">PropertyValuesHolder</span>.<span class="keyword">of</span><span class="variable">Keyframe</span>(<span class="string">"width"</span>, kf0, kf1, kf2, kf4, kf3);</span><br><span class="line"><span class="variable">ObjectAnimator</span> rotation<span class="variable">Anim</span> = <span class="variable">ObjectAnimator</span>.<span class="keyword">of</span><span class="variable">PropertyValuesHolder</span>(btn2, pvh<span class="variable">Rotation</span>);</span><br><span class="line">rotation<span class="variable">Anim</span>.set<span class="variable">Duration</span>(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure></p>
<p>上述代码的意思为：设置btn对象的width属性值使其：<br>    开始时 Width=400<br>    动画开始1/4时 Width=200<br>    动画开始1/2时 Width=400<br>    动画开始3/4时 Width=100<br>    动画结束时 Width=500</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>android控件的动画分为三种,property animation,tween animation,frame animation，这三种动画模式在SDK中被称为property animation,view animation,drawable animation。(在3.0之前的系统中使用Property Animation可通过NineOldAndroids项目<a href="http://nineoldandroids.com/">http://nineoldandroids.com/</a> )</p>
<h1 id="Tween_Animation">Tween Animation</h1><p>View Animation（Tween Animation）：补间动画，给出两个关键帧，通过一些算法将给定属性值在给定的时间内在两个关键帧间渐变。<br>它只是改变了View对象的绘制，而没有改变View对象本身,分为以下四种动画:</p>
<h2 id="AlphaAnimation">AlphaAnimation</h2><p>渐变动画，主要控制透明度变化动画类，常使用AlphaAnimation(float fromAlpha, float toAlpha)来构造；<br>    fromAlpha：动画开始时的透明度（取值范围为0.0到1.0）；<br>    toAlpha：动画结束时的透明度；<br>]]>
    
    </summary>
    
      <category term="动画" scheme="http://coderrobin.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android自定义控件布局之OnLayout]]></title>
    <link href="http://coderrobin.com/2015/01/26/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%B8%83%E5%B1%80%E4%B9%8BOnLayout/"/>
    <id>http://coderrobin.com/2015/01/26/Android自定义控件布局之OnLayout/</id>
    <published>2015-01-26T14:56:32.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>在view的绘制过程中,会依次调用view的measure方法,layout方法,draw方法<br>其中layout方法即对子控件测量完成后确定每个子控件相对父控件的位置<br>注意到该方法为final方法,不可重写,其中调用到了onLayout,可在此方法中设置每个子视图的坐标<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># layout方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">boolean</span> changed = setFrame(l, t, r, b); <span class="comment">//保存相对于父视图的坐标轴 </span></span><br><span class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123; </span><br><span class="line">        <span class="keyword">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </span><br><span class="line">            ViewDebug.trace(<span class="keyword">this</span>, ViewDebug.HierarchyTraceType.ON_LAYOUT);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        onLayout(changed, l, t, r, b);<span class="comment">//回调onLayout函数 ，设置每个子视图的布局  </span></span><br><span class="line">        mPrivateFlags &amp;= ~LAYOUT_REQUIRED;  </span><br><span class="line">    &#125; </span><br><span class="line">    mPrivateFlags &amp;= ~FORCE_LAYOUT; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>layout方法中首先调用了setFrame方法,该方法作用为保存父控件传过来的坐标数据,以确定本控件的位置,其中在保存前和保存后两次invalidate进行绘制,且当位置有改变时调用onSizeChanged方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">boolean</span> <span class="title">setFrame</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;  </span><br><span class="line">  </span><br><span class="line">        ......  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (mLeft != left || mRight != right || mTop != top || mBottom != bottom) &#123;  </span><br><span class="line">            changed = <span class="keyword">true</span>;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// Remember our drawn bit  </span></span><br><span class="line">            <span class="keyword">int</span> drawn = mPrivateFlags &amp; DRAWN;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 绘制一次旧位置的视图</span></span><br><span class="line">            invalidate();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">int</span> oldWidth = mRight - mLeft;  </span><br><span class="line">            <span class="keyword">int</span> oldHeight = mBottom - mTop;  </span><br><span class="line">  </span><br><span class="line">            mLeft = left;  </span><br><span class="line">            mTop = top;  </span><br><span class="line">            mRight = right;  </span><br><span class="line">            mBottom = bottom;  </span><br><span class="line">  </span><br><span class="line">            mPrivateFlags |= HAS_BOUNDS;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">int</span> newWidth = right - left;  </span><br><span class="line">            <span class="keyword">int</span> newHeight = bottom - top;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (newWidth != oldWidth || newHeight != oldHeight) &#123;  </span><br><span class="line">                onSizeChanged(newWidth, newHeight, oldWidth, oldHeight);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> ((mViewFlags &amp; VISIBILITY_MASK) == VISIBLE) &#123;  </span><br><span class="line">                <span class="comment">// If we are visible, force the DRAWN bit to on so that  </span></span><br><span class="line">                <span class="comment">// this invalidate will go through (at least to our parent).  </span></span><br><span class="line">                <span class="comment">// This is because someone may have invalidated this view  </span></span><br><span class="line">                <span class="comment">// before this call to setFrame came in, therby clearing  </span></span><br><span class="line">                <span class="comment">// the DRAWN bit.  </span></span><br><span class="line">                mPrivateFlags |= DRAWN;  </span><br><span class="line">                invalidate();  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// Reset drawn bit to original value (invalidate turns it off)  </span></span><br><span class="line">            mPrivateFlags |= drawn;  </span><br><span class="line">  </span><br><span class="line">            mBackgroundSizeChanged = <span class="keyword">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> changed;  </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    ...... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="onLayout方法">onLayout方法</h1><p>layout()调用了onLayout方法,该方法确定子控件的位置<br>    @Override<br>    protected abstract void onLayout(boolean changed, int l, int t, int r, int b);<br>该方法被定义为抽象方法，在继承ViewGroup时必须要重写该方法。<br>以下以frameLayout的onLayout和LinearLayout的onLayout方法举例自定义的onLayout方法要怎么写</p>
<h2 id="FrameLayout中的onLayout">FrameLayout中的onLayout</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onLayout(<span class="built_in">boolean</span> changed, <span class="built_in">int</span> left, <span class="built_in">int</span> top, <span class="built_in">int</span> right, <span class="built_in">int</span> bottom) &#123;  </span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> count = getChildCount();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> parentLeft = mPaddingLeft + mForegroundPaddingLeft;  </span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> parentRight = right - left - mPaddingRight - mForegroundPaddingRight;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> parentTop = mPaddingTop + mForegroundPaddingTop;  </span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> parentBottom = bottom - top - mPaddingBottom - mForegroundPaddingBottom;  </span><br><span class="line">  </span><br><span class="line">        mForegroundBoundsChanged = <span class="keyword">true</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;  </span><br><span class="line">            <span class="keyword">final</span> View child = getChildAt(i);  </span><br><span class="line">            <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;  </span><br><span class="line">                <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();  </span><br><span class="line">  </span><br><span class="line">                <span class="keyword">final</span> <span class="built_in">int</span> <span class="variable">width</span> = child.getMeasuredWidth();  </span><br><span class="line">                <span class="keyword">final</span> <span class="built_in">int</span> <span class="variable">height</span> = child.getMeasuredHeight();  </span><br><span class="line">  </span><br><span class="line">                <span class="built_in">int</span> childLeft = parentLeft;  </span><br><span class="line">                <span class="built_in">int</span> childTop = parentTop;  </span><br><span class="line">  </span><br><span class="line">                <span class="keyword">final</span> <span class="built_in">int</span> gravity = lp.gravity;  </span><br><span class="line">  </span><br><span class="line">                <span class="keyword">if</span> (gravity != -<span class="number">1</span>) &#123;  </span><br><span class="line">                    <span class="keyword">final</span> <span class="built_in">int</span> horizontalGravity = gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK;  </span><br><span class="line">                    <span class="keyword">final</span> <span class="built_in">int</span> verticalGravity = gravity &amp; Gravity.VERTICAL_GRAVITY_MASK;  </span><br><span class="line">                 <span class="comment">//根据gravity计算childLeft和childTop</span></span><br><span class="line">                    <span class="keyword">switch</span> (horizontalGravity) &#123;  </span><br><span class="line">                        <span class="keyword">case</span> Gravity.LEFT:  </span><br><span class="line">                            childLeft = parentLeft + lp.leftMargin;  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        <span class="keyword">case</span> Gravity.CENTER_HORIZONTAL:  </span><br><span class="line">                            childLeft = parentLeft + (parentRight - parentLeft - <span class="variable">width</span>) / <span class="number">2</span> +  </span><br><span class="line">                                    lp.leftMargin - lp.rightMargin;  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        <span class="keyword">case</span> Gravity.RIGHT:  </span><br><span class="line">                            childLeft = parentRight - <span class="variable">width</span> - lp.rightMargin;  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        <span class="keyword">default</span>:  </span><br><span class="line">                            childLeft = parentLeft + lp.leftMargin;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">switch</span> (verticalGravity) &#123;  </span><br><span class="line">                        <span class="keyword">case</span> Gravity.TOP:  </span><br><span class="line">                            childTop = parentTop + lp.topMargin;  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        <span class="keyword">case</span> Gravity.CENTER_VERTICAL:  </span><br><span class="line">                            childTop = parentTop + (parentBottom - parentTop - <span class="variable">height</span>) / <span class="number">2</span> +  </span><br><span class="line">                                    lp.topMargin - lp.bottomMargin;  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        <span class="keyword">case</span> Gravity.BOTTOM:  </span><br><span class="line">                            childTop = parentBottom - <span class="variable">height</span> - lp.bottomMargin;  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        <span class="keyword">default</span>:  </span><br><span class="line">                            childTop = parentTop + lp.topMargin;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">  <span class="comment">//设置child的layout</span></span><br><span class="line">                child.layout(childLeft, childTop, childLeft + <span class="variable">width</span>, childTop + <span class="variable">height</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    ......  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="LinearLayout中的onLayout">LinearLayout中的onLayout</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span> </span><br><span class="line">   <span class="keyword">protected</span> <span class="typename">void</span> onLayout(<span class="typename">boolean</span> changed, <span class="typename">int</span> l, <span class="typename">int</span> t, <span class="typename">int</span> r, <span class="typename">int</span> b) &#123; </span><br><span class="line">       <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;  </span><br><span class="line">           layoutVertical();  </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">           layoutHorizontal();  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line"><span class="typename">void</span> layoutVertical() &#123; </span><br><span class="line">        <span class="keyword">final</span> <span class="typename">int</span> paddingLeft = mPaddingLeft;  </span><br><span class="line">        <span class="typename">int</span> childTop = mPaddingTop;  </span><br><span class="line">        <span class="typename">int</span> childLeft;  </span><br><span class="line">        <span class="comment">// Where right end of child should go  </span></span><br><span class="line">        <span class="keyword">final</span> <span class="typename">int</span> width = mRight - mLeft;  </span><br><span class="line">        <span class="typename">int</span> childRight = width - mPaddingRight;  </span><br><span class="line">        <span class="comment">// Space available for child  </span></span><br><span class="line">        <span class="typename">int</span> childSpace = width - paddingLeft - mPaddingRight;  </span><br><span class="line">        <span class="keyword">final</span> <span class="typename">int</span> count = getVirtualChildCount();  </span><br><span class="line">        <span class="keyword">final</span> <span class="typename">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;  </span><br><span class="line">        <span class="keyword">final</span> <span class="typename">int</span> minorGravity = mGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK;  </span><br><span class="line">        <span class="keyword">if</span> (majorGravity != Gravity.TOP) &#123;  </span><br><span class="line">           <span class="keyword">switch</span> (majorGravity) &#123;  </span><br><span class="line">               <span class="keyword">case</span> Gravity.<span class="string">BOTTOM:</span>  </span><br><span class="line">                   <span class="comment">// mTotalLength contains the padding already, we add the top  </span></span><br><span class="line">                   <span class="comment">// padding to compensate  </span></span><br><span class="line">                   childTop = mBottom - mTop + mPaddingTop - mTotalLength;  </span><br><span class="line">                   <span class="keyword">break</span>;  </span><br><span class="line">               <span class="keyword">case</span> Gravity.<span class="string">CENTER_VERTICAL:</span>  </span><br><span class="line">                   childTop += ((mBottom - mTop)  - mTotalLength) / <span class="number">2</span>;  </span><br><span class="line">                   <span class="keyword">break</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="typename">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;  </span><br><span class="line">            <span class="keyword">final</span> View child = getVirtualChildAt(i);  </span><br><span class="line">            <span class="keyword">if</span> (child == <span class="literal">null</span>) &#123;  </span><br><span class="line">                childTop += measureNullChild(i);  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;  </span><br><span class="line">                <span class="keyword">final</span> <span class="typename">int</span> childWidth = child.getMeasuredWidth();  </span><br><span class="line">                <span class="keyword">final</span> <span class="typename">int</span> childHeight = child.getMeasuredHeight();  </span><br><span class="line">                <span class="keyword">final</span> LinearLayout.LayoutParams lp =  </span><br><span class="line">                        (LinearLayout.LayoutParams) child.getLayoutParams();  </span><br><span class="line">                <span class="typename">int</span> gravity = lp.gravity;  </span><br><span class="line">                <span class="keyword">if</span> (gravity &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                    gravity = minorGravity;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">switch</span> (gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;  </span><br><span class="line">                    <span class="keyword">case</span> Gravity.<span class="string">LEFT:</span>  </span><br><span class="line">                        childLeft = paddingLeft + lp.leftMargin;  </span><br><span class="line">                        <span class="keyword">break</span>;  </span><br><span class="line">                    <span class="keyword">case</span> Gravity.<span class="string">CENTER_HORIZONTAL:</span>  </span><br><span class="line">                        childLeft = paddingLeft + ((childSpace - childWidth) / <span class="number">2</span>)  </span><br><span class="line">                                + lp.leftMargin - lp.rightMargin;  </span><br><span class="line">                        <span class="keyword">break</span>;  </span><br><span class="line">                    <span class="keyword">case</span> Gravity.<span class="string">RIGHT:</span>  </span><br><span class="line">                        childLeft = childRight - childWidth - lp.rightMargin;  </span><br><span class="line">                        <span class="keyword">break</span>;  </span><br><span class="line"><span class="label">                    default:</span>  </span><br><span class="line">                        childLeft = paddingLeft;  </span><br><span class="line">                        <span class="keyword">break</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">                childTop += lp.topMargin;  </span><br><span class="line">                setChildFrame(child, childLeft, childTop + getLocationOffset(child),  </span><br><span class="line">                        childWidth, childHeight);  </span><br><span class="line">                childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);  </span><br><span class="line">                i += getChildrenSkipCount(child, i);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1><p>自定义控件时，在onLayout方法中，需根据父控件的padding、子控件的margin以及父控件的gravity以及子控件的lp.gravity(即layout gravity）、子控件的getMeasuredWidth和getMeasuredHeight确定各子控件的位置。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在view的绘制过程中,会依次调用view的measure方法,layout方法,draw方法<br>其中layout方法即对子控件测量完成后确定每个子控件相对父控件的位置<br>注意到该方法为final方法,不可重写,其中调用到了onLayout,可在此方法中设置每个子视图的坐标<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># layout方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">boolean</span> changed = setFrame(l, t, r, b); <span class="comment">//保存相对于父视图的坐标轴 </span></span><br><span class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123; </span><br><span class="line">        <span class="keyword">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </span><br><span class="line">            ViewDebug.trace(<span class="keyword">this</span>, ViewDebug.HierarchyTraceType.ON_LAYOUT);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        onLayout(changed, l, t, r, b);<span class="comment">//回调onLayout函数 ，设置每个子视图的布局  </span></span><br><span class="line">        mPrivateFlags &amp;= ~LAYOUT_REQUIRED;  </span><br><span class="line">    &#125; </span><br><span class="line">    mPrivateFlags &amp;= ~FORCE_LAYOUT; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="自定义控件布局" scheme="http://coderrobin.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%B8%83%E5%B1%80/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android自定义控件之OnMeasure]]></title>
    <link href="http://coderrobin.com/2015/01/25/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E4%B9%8BOnMeasure/"/>
    <id>http://coderrobin.com/2015/01/25/Android自定义控件之OnMeasure/</id>
    <published>2015-01-25T15:18:57.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>在自定义控件中,要重写OnMeasure,onDraw方法,自定义布局还要重写onLayout方法以确定子控件位置,本篇博文讲述自定义控件应如何重写OnMeasure方法.</p>
<p>onMeasure(int widthMeasureSpec, int heightMeasureSpec)方法两个形参widthMeasureSpec和heightMeasureSpec表示布局期望的子控件MeasureSpec（规格）</p>
<h1 id="MeasureSpec介绍">MeasureSpec介绍</h1><p>以下为MeasureSpec源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureSpec</span> </span>&#123; </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_SHIFT = <span class="number">30</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MASK  = <span class="number">0x3</span> &lt;&lt; MODE_SHIFT;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY     = <span class="number">1</span> &lt;&lt; MODE_SHIFT;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST     = <span class="number">2</span> &lt;&lt; MODE_SHIFT;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> mode)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> size + mode;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析源码可知measureSpec为int值，总共4个字节,高2位表示mode,低30位表示size，可通过静态方法getMod和getSize方法,获得mode和size</p>
<p>MeasureSpec有三种模式分别是UNSPECIFIED, EXACTLY和AT_MOST。<br><a id="more"></a></p>
<h3 id="EXACTLY">EXACTLY</h3><p>表示父视图希望子视图的大小应该是由specSize的值来决定的，系统默认会按照这个规则来设置子视图的大小，开发人员当然也可以按照自己的意愿设置成任意的大小。</p>
<h3 id="AT_MOST">AT_MOST</h3><p>表示子视图最多只能是specSize中指定的大小，开发人员应该尽可能小得去设置这个视图，并且保证不会超过specSize。系统默认会按照这个规则来设置子视图的大小，开发人员当然也可以按照自己的意愿设置成任意的大小。</p>
<h3 id="UNSPECIFIED">UNSPECIFIED</h3><p>表示开发人员可以将视图按照自己的意愿设置成任意的大小，没有任何限制。这种情况比较少见，不太会用到。</p>
<h2 id="measureSpec参数计算过程">measureSpec参数计算过程</h2><p>接下来分析子控件onMeasure方法的MeasureSpec父控件是怎么就算出来的,以下为viewRroup中测量部分的源码<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"> * Ask all of the children of <span class="keyword">this</span> view to measure themselves, taking into </span><br><span class="line"> * account both the MeasureSpec requirements <span class="keyword">for</span> <span class="keyword">this</span> view and its padding. </span><br><span class="line"> * We skip children that are in the GONE state The heavy lifting is done in </span><br><span class="line"> * getChildMeasureSpec. </span><br><span class="line"> * </span><br><span class="line"> * @param widthMeasureSpec The <span class="variable">width</span> requirements <span class="keyword">for</span> <span class="keyword">this</span> view </span><br><span class="line"> * @param heightMeasureSpec The <span class="variable">height</span> requirements <span class="keyword">for</span> <span class="keyword">this</span> view </span><br><span class="line"> */ </span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> measureChildren(<span class="built_in">int</span> widthMeasureSpec, <span class="built_in">int</span> heightMeasureSpec) &#123; </span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">size</span> = mChildrenCount;  </span><br><span class="line">    <span class="keyword">final</span> View[] children = mChildren;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;  </span><br><span class="line">        <span class="keyword">final</span> View child = children[i];  </span><br><span class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;  </span><br><span class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span><br><span class="line"> * Ask one of the children of this view to measure itself, taking into </span><br><span class="line"> * account both the MeasureSpec requirements for this view and its padding. </span><br><span class="line"> * The heavy lifting is done in getChildMeasureSpec. </span><br><span class="line"> * </span><br><span class="line"> * @param child The child to measure </span><br><span class="line"> * @param parentWidthMeasureSpec The width requirements for this view </span><br><span class="line"> * @param parentHeightMeasureSpec The height requirements for this view </span><br><span class="line"> */</span> </span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> measureChild(View child, <span class="built_in">int</span> parentWidthMeasureSpec, </span><br><span class="line">        <span class="built_in">int</span> parentHeightMeasureSpec) &#123;  </span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,  </span><br><span class="line">            mPaddingLeft + mPaddingRight, lp.<span class="variable">width</span>);  </span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,  </span><br><span class="line">            mPaddingTop + mPaddingBottom, lp.<span class="variable">height</span>);  </span><br><span class="line">  </span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> getChildMeasureSpec(<span class="built_in">int</span> spec, <span class="built_in">int</span> padding, <span class="built_in">int</span> childDimension) &#123;</span><br><span class="line">    <span class="built_in">int</span> specMode = MeasureSpec.getMode(spec);  </span><br><span class="line">    <span class="built_in">int</span> specSize = MeasureSpec.getSize(spec);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">size</span> = Math.<span class="built_in">max</span>(<span class="number">0</span>, specSize - padding);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">int</span> resultSize = <span class="number">0</span>;  </span><br><span class="line">    <span class="built_in">int</span> resultMode = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;  </span><br><span class="line">    <span class="comment">// Parent has imposed an exact size on us  </span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:  </span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">            resultSize = childDimension;  </span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;  </span><br><span class="line">            <span class="comment">// Child wants to be our size. So be it.  </span></span><br><span class="line">            resultSize = <span class="built_in">size</span>;  </span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be  </span></span><br><span class="line">            <span class="comment">// bigger than us.  </span></span><br><span class="line">            resultSize = <span class="built_in">size</span>;  </span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Parent has imposed a maximum size on us  </span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:  </span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="comment">// Child wants a specific size... so be it  </span></span><br><span class="line">            resultSize = childDimension;  </span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;  </span><br><span class="line">            <span class="comment">// Child wants to be our size, but our size is not fixed.  </span></span><br><span class="line">            <span class="comment">// Constrain child to not be bigger than us.  </span></span><br><span class="line">            resultSize = <span class="built_in">size</span>;  </span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be  </span></span><br><span class="line">            <span class="comment">// bigger than us.  </span></span><br><span class="line">            resultSize = <span class="built_in">size</span>;  </span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Parent asked to see how big we want to be  </span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:  </span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="comment">// Child wants a specific size... let him have it  </span></span><br><span class="line">            resultSize = childDimension;  </span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;  </span><br><span class="line">            <span class="comment">// Child wants to be our size... find out how big it should  </span></span><br><span class="line">            <span class="comment">// be  </span></span><br><span class="line">            resultSize = <span class="number">0</span>;  </span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </span><br><span class="line">            <span class="comment">// Child wants to determine its own size.... find out how  </span></span><br><span class="line">            <span class="comment">// big it should be  </span></span><br><span class="line">            resultSize = <span class="number">0</span>;  </span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="viewGroup调用view的measure方法">viewGroup调用view的measure方法</h1><p>view measure方法<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">    public final <span class="type">void</span> measure(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec) &#123;</span><br><span class="line">        // 省略部分代码……  </span><br><span class="line">      </span><br><span class="line">        /* </span><br><span class="line">         * 判断当前mPrivateFlags是否带有<span class="type">PFLAG_FORCE_LAYOUT</span>强制布局标记 </span><br><span class="line">         * 判断当前widthMeasureSpec和heightMeasureSpec是否发生了改变 </span><br><span class="line">         */  </span><br><span class="line">        <span class="keyword">if</span> ((mPrivateFlags &amp; <span class="type">PFLAG_FORCE_LAYOUT</span>) == <span class="type">PFLAG_FORCE_LAYOUT</span> ||  </span><br><span class="line">                widthMeasureSpec != mOldWidthMeasureSpec ||  </span><br><span class="line">                heightMeasureSpec != mOldHeightMeasureSpec) &#123;  </span><br><span class="line">      </span><br><span class="line">            // 如果发生了改变表示需要重新进行测量此时清除掉mPrivateFlags中已测量的标识位<span class="type">PFLAG_MEASURED_DIMENSION_SET</span>  </span><br><span class="line">            mPrivateFlags &amp;= ~<span class="type">PFLAG_MEASURED_DIMENSION_SET</span>;  </span><br><span class="line">      </span><br><span class="line">            resolveRtlPropertiesIfNeeded();  </span><br><span class="line">      </span><br><span class="line">            <span class="type">int</span> cacheIndex = (mPrivateFlags &amp; <span class="type">PFLAG_FORCE_LAYOUT</span>) == <span class="type">PFLAG_FORCE_LAYOUT</span> ? -<span class="number">1</span> :  </span><br><span class="line">                    mMeasureCache.indexOfKey(key);  </span><br><span class="line">            <span class="keyword">if</span> (cacheIndex &lt; <span class="number">0</span> || sIgnoreMeasureCache) &#123;  </span><br><span class="line">                // 测量<span class="type">View</span>的尺寸  </span><br><span class="line">                onMeasure(widthMeasureSpec, heightMeasureSpec);  </span><br><span class="line">                mPrivateFlags3 &amp;= ~<span class="type">PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                long value = mMeasureCache.valueAt(cacheIndex);  </span><br><span class="line">      </span><br><span class="line">                setMeasuredDimension((<span class="type">int</span>) (value &gt;&gt; <span class="number">32</span>), (<span class="type">int</span>) value);  </span><br><span class="line">                mPrivateFlags3 |= <span class="type">PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">      </span><br><span class="line">            /* </span><br><span class="line">             * 如果mPrivateFlags里没有表示已测量的标识位<span class="type">PFLAG_MEASURED_DIMENSION_SET</span>则会抛出异常 </span><br><span class="line">             */  </span><br><span class="line">            <span class="keyword">if</span> ((mPrivateFlags &amp; <span class="type">PFLAG_MEASURED_DIMENSION_SET</span>) != <span class="type">PFLAG_MEASURED_DIMENSION_SET</span>) &#123;  </span><br><span class="line">                throw new <span class="type">IllegalStateException</span>(<span class="string">"onMeasure() did not set the"</span>  </span><br><span class="line">                        + <span class="string">" measured dimension by calling"</span>  </span><br><span class="line">                        + <span class="string">" setMeasuredDimension()"</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">      </span><br><span class="line">            // 如果已测量<span class="type">View</span>那么就可以往mPrivateFlags添加标识位<span class="type">PFLAG_LAYOUT_REQUIRED</span>表示可以进行布局了  </span><br><span class="line">            mPrivateFlags |= <span class="type">PFLAG_LAYOUT_REQUIRED</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">      </span><br><span class="line">        // 最后存储测量完成的测量规格  </span><br><span class="line">        mOldWidthMeasureSpec = widthMeasureSpec;  </span><br><span class="line">        mOldHeightMeasureSpec = heightMeasureSpec;  </span><br><span class="line">      </span><br><span class="line">        mMeasureCache.put(key, ((long) mMeasuredWidth) &lt;&lt; <span class="number">32</span> |  </span><br><span class="line">                (long) mMeasuredHeight &amp; <span class="number">0xffffffff</span>L); // suppress sign extension  </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">默认实现：</span><br><span class="line"></span><br><span class="line">    protected <span class="type">void</span> onMeasure(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec) &#123; </span><br><span class="line">        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),  </span><br><span class="line">                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));  </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    protected final <span class="type">void</span> setMeasuredDimension(<span class="type">int</span> measuredWidth, <span class="type">int</span> measuredHeight) &#123;</span><br><span class="line">        // 省去部分代码……  </span><br><span class="line">      </span><br><span class="line">        // 设置测量后的宽高  </span><br><span class="line">        mMeasuredWidth = measuredWidth;  </span><br><span class="line">        mMeasuredHeight = measuredHeight;  </span><br><span class="line">      </span><br><span class="line">        // 重新将已测量标识位存入mPrivateFlags标识测量的完成  </span><br><span class="line">        mPrivateFlags |= <span class="type">PFLAG_MEASURED_DIMENSION_SET</span>;  </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    protected <span class="type">int</span> getSuggestedMinimumWidth() &#123; </span><br><span class="line">        <span class="keyword">return</span> (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="type">int</span> getDefaultSize(<span class="type">int</span> size, <span class="type">int</span> measureSpec) &#123;</span><br><span class="line">        // 将我们获得的最小值赋给<span class="literal">result</span>  </span><br><span class="line">        <span class="type">int</span> <span class="literal">result</span> = size;  </span><br><span class="line">      </span><br><span class="line">        // 从measureSpec中解算出测量规格的模式和尺寸  </span><br><span class="line">        <span class="type">int</span> specMode = <span class="type">MeasureSpec</span>.getMode(measureSpec);  </span><br><span class="line">        <span class="type">int</span> specSize = <span class="type">MeasureSpec</span>.getSize(measureSpec);  </span><br><span class="line">      </span><br><span class="line">        /* </span><br><span class="line">         * 根据测量规格模式确定最终的测量尺寸 </span><br><span class="line">         */  </span><br><span class="line">        switch (specMode) &#123;  </span><br><span class="line">        <span class="keyword">case</span> <span class="type">MeasureSpec</span>.<span class="type">UNSPECIFIED</span>:  </span><br><span class="line">            <span class="literal">result</span> = size;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> <span class="type">MeasureSpec</span>.<span class="type">AT_MOST</span>:  </span><br><span class="line">        <span class="keyword">case</span> <span class="type">MeasureSpec</span>.<span class="type">EXACTLY</span>:  </span><br><span class="line">            <span class="literal">result</span> = specSize;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span>;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="自定义控件重写onMeasure例子">自定义控件重写onMeasure例子</h1><p>由以上源码分析可得出,重写onMeasure即根据widthMeasureSpec和heightMeasureSpec确定自己的大小,以下为例子<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">       int <span class="variable">resultWidth =</span> <span class="number">0</span>;  </span><br><span class="line">       int <span class="variable">modeWidth =</span> MeasureSpec.getMode(widthMeasureSpec);    </span><br><span class="line">       int <span class="variable">sizeWidth =</span> MeasureSpec.getSize(widthMeasureSpec);  </span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">modeWidth =</span>= MeasureSpec.EXACTLY) &#123; </span><br><span class="line">           <span class="variable">resultWidth =</span> sizeWidth;  </span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="keyword">else</span> &#123;  </span><br><span class="line">           <span class="variable">resultWidth =</span>***;//确定自己部分大小  </span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">modeWidth =</span>= MeasureSpec.AT_MOST) &#123;  </span><br><span class="line">               <span class="variable">resultWidth =</span> Math.min(resultWidth, sizeWidth);  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">     </span><br><span class="line">       int <span class="variable">resultHeight =</span> <span class="number">0</span>;  </span><br><span class="line">       int <span class="variable">modeHeight =</span> MeasureSpec.getMode(heightMeasureSpec);  </span><br><span class="line">       int <span class="variable">sizeHeight =</span> MeasureSpec.getSize(heightMeasureSpec);  </span><br><span class="line">     </span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">modeHeight =</span>= MeasureSpec.EXACTLY) &#123;  </span><br><span class="line">           <span class="variable">resultHeight =</span> sizeHeight;  </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">           <span class="variable">resultHeight =</span> mBitmap.getHeight();  </span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">modeHeight =</span>= MeasureSpec.AT_MOST) &#123;  </span><br><span class="line">               <span class="variable">resultHeight =</span> Math.min(resultHeight, sizeHeight);  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">     </span><br><span class="line">       // 设置测量尺寸,一定要设置,否则无用且报错  </span><br><span class="line">       setMeasuredDimension(resultWidth, resultHeight);  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在自定义控件中,要重写OnMeasure,onDraw方法,自定义布局还要重写onLayout方法以确定子控件位置,本篇博文讲述自定义控件应如何重写OnMeasure方法.</p>
<p>onMeasure(int widthMeasureSpec, int heightMeasureSpec)方法两个形参widthMeasureSpec和heightMeasureSpec表示布局期望的子控件MeasureSpec（规格）</p>
<h1 id="MeasureSpec介绍">MeasureSpec介绍</h1><p>以下为MeasureSpec源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureSpec</span> </span>&#123; </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_SHIFT = <span class="number">30</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MASK  = <span class="number">0x3</span> &lt;&lt; MODE_SHIFT;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY     = <span class="number">1</span> &lt;&lt; MODE_SHIFT;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST     = <span class="number">2</span> &lt;&lt; MODE_SHIFT;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> mode)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> size + mode;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析源码可知measureSpec为int值，总共4个字节,高2位表示mode,低30位表示size，可通过静态方法getMod和getSize方法,获得mode和size</p>
<p>MeasureSpec有三种模式分别是UNSPECIFIED, EXACTLY和AT_MOST。<br>]]>
    
    </summary>
    
      <category term="自定义控件" scheme="http://coderrobin.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fragment多语言问题]]></title>
    <link href="http://coderrobin.com/2015/01/19/fragment%E5%A4%9A%E8%AF%AD%E8%A8%80%E9%97%AE%E9%A2%98/"/>
    <id>http://coderrobin.com/2015/01/19/fragment多语言问题/</id>
    <published>2015-01-19T15:36:22.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>在切换语言时,activity会被系统回收后重新创建,</p>
<p>此时原先依附于该activity的fragment也会被系统destroy掉,</p>
<p>但系统会自动创建新的fragment的实例attach到新的activity中,</p>
<p>若此时用户在activity中手动创建fragment,则会导致程序fragment管理混乱.</p>
<p>因此,建议用如下方法创建fragment<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FragmentFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fragment <span class="title">getFragmentByTag</span><span class="params">(Context pContext,String pTag)</span></span>&#123;</span><br><span class="line">       FragmentManager fm = pContext.getSupportFragmentManager();</span><br><span class="line">	<span class="comment">//查找是否已存在,已存在则不需要重发创建,切换语言时系统会自动重新创建并attch,无需手动创建</span></span><br><span class="line">       Fragment fragment = fm.findFragmentByTag(pTag);</span><br><span class="line">       <span class="keyword">if</span> (fragment != <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> fragment;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">	  <span class="keyword">if</span>(MyFragment.TAG.equals(pTAG))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyFragment(); </span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在切换语言时,activity会被系统回收后重新创建,</p>
<p>此时原先依附于该activity的fragment也会被系统destroy掉,</p>
<p>但系统会自动创建新的fragment的实例attach到新的activity中,</p>
<p>若此时用户在a]]>
    </summary>
    
      <category term="fragment" scheme="http://coderrobin.com/tags/fragment/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ViewPager禁止遥控切页]]></title>
    <link href="http://coderrobin.com/2015/01/17/ViewPager%E7%A6%81%E6%AD%A2%E9%81%A5%E6%8E%A7%E5%88%87%E9%A1%B5/"/>
    <id>http://coderrobin.com/2015/01/17/ViewPager禁止遥控切页/</id>
    <published>2015-01-17T15:50:01.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>在做app对遥控（实体按键）的支持时，发现在viewpager子布局中按遥控左右键会翻页。<br>查看viewpager源码，可以看到如下代码段<br><a id="more"></a><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> dispatchKeyEvent(KeyEvent event) &#123;</span><br><span class="line">       <span class="comment">// Let the focused view and/or our descendants get the key first</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.dispatchKeyEvent(event) || executeKeyEvent(event);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span><br><span class="line">    * You can call this function yourself to have the scroll view perform</span><br><span class="line">    * scrolling from a key event, just as if the event had been dispatched to</span><br><span class="line">    * it by the view hierarchy.</span><br><span class="line">    *</span><br><span class="line">    * @param event The key event to execute.</span><br><span class="line">    * @return Return true if the event was handled, else false.</span><br><span class="line">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> executeKeyEvent(KeyEvent event) &#123;</span><br><span class="line">       <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">if</span> (event.getAction() == KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line">           <span class="keyword">switch</span> (event.getKeyCode()) &#123;</span><br><span class="line">               <span class="keyword">case</span> KeyEvent.KEYCODE_DPAD_LEFT:</span><br><span class="line">                   handled = arrowScroll(FOCUS_LEFT);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> KeyEvent.KEYCODE_DPAD_RIGHT:</span><br><span class="line">                   handled = arrowScroll(FOCUS_RIGHT);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> KeyEvent.KEYCODE_TAB:</span><br><span class="line">                   <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">11</span>) &#123;</span><br><span class="line">                       <span class="comment">// The focus finder had a bug handling FOCUS_FORWARD and FOCUS_BACKWARD</span></span><br><span class="line">                       <span class="comment">// before Android 3.0. Ignore the tab key on those devices.</span></span><br><span class="line">                       <span class="keyword">if</span> (KeyEventCompat.hasNoModifiers(event)) &#123;</span><br><span class="line">                           handled = arrowScroll(FOCUS_FORWARD);</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (KeyEventCompat.hasModifiers(event, KeyEvent.META_SHIFT_ON)) &#123;</span><br><span class="line">                           handled = arrowScroll(FOCUS_BACKWARD);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> handled;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> arrowScroll(<span class="keyword">int</span> direction) &#123;</span><br><span class="line">       View currentFocused = findFocus();</span><br><span class="line">       <span class="keyword">if</span> (currentFocused == <span class="keyword">this</span>) &#123;</span><br><span class="line">           currentFocused = <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentFocused != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">boolean</span> isChild = <span class="keyword">false</span>;</span><br><span class="line">           <span class="keyword">for</span> (ViewParent parent = currentFocused.getParent(); parent <span class="keyword">instanceof</span> ViewGroup;</span><br><span class="line">                   parent = parent.getParent()) &#123;</span><br><span class="line">               <span class="keyword">if</span> (parent == <span class="keyword">this</span>) &#123;</span><br><span class="line">                   isChild = <span class="keyword">true</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (!isChild) &#123;</span><br><span class="line">               <span class="comment">// This would cause the focus search down below to fail in fun ways.</span></span><br><span class="line">               <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">               sb.<span class="keyword">append</span>(currentFocused.getClass().getSimpleName());</span><br><span class="line">               <span class="keyword">for</span> (ViewParent parent = currentFocused.getParent(); parent <span class="keyword">instanceof</span> ViewGroup;</span><br><span class="line">                       parent = parent.getParent()) &#123;</span><br><span class="line">                   sb.<span class="keyword">append</span>(<span class="string">" =&gt; "</span>).<span class="keyword">append</span>(parent.getClass().getSimpleName());</span><br><span class="line">               &#125;</span><br><span class="line">               Log.e(TAG, <span class="string">"arrowScroll tried to find focus based on non-child "</span> +</span><br><span class="line">                       <span class="string">"current focused view "</span> + sb.toString());</span><br><span class="line">               currentFocused = <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       View nextFocused = FocusFinder.getInstance().findNextFocus(<span class="keyword">this</span>, currentFocused,</span><br><span class="line">               direction);</span><br><span class="line">       <span class="keyword">if</span> (nextFocused != <span class="keyword">null</span> &amp;&amp; nextFocused != currentFocused) &#123;</span><br><span class="line">           <span class="keyword">if</span> (direction == View.FOCUS_LEFT) &#123;</span><br><span class="line">               <span class="comment">// If there is nothing to the left, or this is causing us to</span></span><br><span class="line">               <span class="comment">// jump to the right, then what we really want to do is page left.</span></span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">int</span> nextLeft = getChildRectInPagerCoordinates(mTempRect, nextFocused).left;</span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">int</span> currLeft = getChildRectInPagerCoordinates(mTempRect, currentFocused).left;</span><br><span class="line">               <span class="keyword">if</span> (currentFocused != <span class="keyword">null</span> &amp;&amp; nextLeft &gt;= currLeft) &#123;</span><br><span class="line">                   handled = pageLeft();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   handled = nextFocused.requestFocus();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == View.FOCUS_RIGHT) &#123;</span><br><span class="line">               <span class="comment">// If there is nothing to the right, or this is causing us to</span></span><br><span class="line">               <span class="comment">// jump to the left, then what we really want to do is page right.</span></span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">int</span> nextLeft = getChildRectInPagerCoordinates(mTempRect, nextFocused).left;</span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">int</span> currLeft = getChildRectInPagerCoordinates(mTempRect, currentFocused).left;</span><br><span class="line">               <span class="keyword">if</span> (currentFocused != <span class="keyword">null</span> &amp;&amp; nextLeft &lt;= currLeft) &#123;</span><br><span class="line">                   handled = pageRight();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   handled = nextFocused.requestFocus();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == FOCUS_LEFT || direction == FOCUS_BACKWARD) &#123;</span><br><span class="line">           <span class="comment">// Trying to move left and nothing there; try to page.</span></span><br><span class="line">           handled = pageLeft();</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == FOCUS_RIGHT || direction == FOCUS_FORWARD) &#123;</span><br><span class="line">           <span class="comment">// Trying to move right and nothing there; try to page.</span></span><br><span class="line">           handled = pageRight();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (handled) &#123;</span><br><span class="line">           playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> handled;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p> 分析以上代码调用可知dispatchKeyEvent方法拦截了左右和tab按键，得到nextFocused后requestFocus，导致切页</p>
<p> 禁止遥控切页的方法：继承viewpager后重写executeKeyEvent或arrowScroll方法，返回false即可 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在做app对遥控（实体按键）的支持时，发现在viewpager子布局中按遥控左右键会翻页。<br>查看viewpager源码，可以看到如下代码段<br>]]>
    
    </summary>
    
      <category term="viewpager" scheme="http://coderrobin.com/tags/viewpager/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读书笔记-现代操作系统:linux]]></title>
    <link href="http://coderrobin.com/2015/01/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-linux/"/>
    <id>http://coderrobin.com/2015/01/17/读书笔记-现代操作系统-linux/</id>
    <published>2015-01-17T15:46:28.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="模式切换">模式切换</h1><pre><code>内核模式下可以调用所有指令

用户模式下只能调用部分指令

用户通过把参数写入寄存器<span class="comment">(栈)</span>进行系统调用,发出陷阱指令,从用户模式切换到内核模式
</code></pre><a id="more"></a>
<h1 id="shell">shell</h1><pre><code>通配符*

管道<span class="string">|:将上一个命令(进程)作为下一个命令输入</span>
</code></pre><h1 id="系统组成">系统组成</h1><h2 id="i/o:">i/o:</h2><pre><code>虚拟文件系统

<span class="number">1.</span>终端-字节\行规则-字符设备驱动

<span class="number">2.</span>套接字-网络协议-网络设备驱动<span class="comment">(属于字符设备驱动)</span>

<span class="number">3.</span>文件系统-通用块层-io调度器-块设备驱动
</code></pre><h2 id="内存管理:虚拟内存\页面替换\页面缓存">内存管理:虚拟内存\页面替换\页面缓存</h2><h2 id="进程管理:信号管理\进程创建与终止\cpu调度">进程管理:信号管理\进程创建与终止\cpu调度</h2><h1 id="进程间通信">进程间通信</h1><pre><code>管道<span class="comment">(pipe)</span>:没有读取到数据阻塞

信号:一个进程只可以给该进程的所在进程组的进程发信号
</code></pre><h1 id="fork在子进程中会只会产生一个线程">fork在子进程中会只会产生一个线程</h1><h1 id="启动linux系统:bios-boot-内核">启动linux系统:bios-boot-内核</h1><h1 id="mmap映射文件到内存,方便读写和在多个进程中共享数据">mmap映射文件到内存,方便读写和在多个进程中共享数据</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="模式切换">模式切换</h1><pre><code>内核模式下可以调用所有指令

用户模式下只能调用部分指令

用户通过把参数写入寄存器<span class="comment">(栈)</span>进行系统调用,发出陷阱指令,从用户模式切换到内核模式
</code></pre>]]>
    
    </summary>
    
      <category term="操作系统" scheme="http://coderrobin.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="读书笔记" scheme="http://coderrobin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android自定义控件属性]]></title>
    <link href="http://coderrobin.com/2015/01/17/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%B1%9E%E6%80%A7/"/>
    <id>http://coderrobin.com/2015/01/17/Android自定义控件属性/</id>
    <published>2015-01-17T15:42:03.000Z</published>
    <updated>2015-03-30T15:20:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="在res/values文件下attrs-xml下增加属性：">在res/values文件下attrs.xml下增加属性：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">declare-styleable</span> <span class="attribute">name</span>=<span class="value">"stylename"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attrname"</span> <span class="attribute">format</span>=<span class="value">"**"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">declare-styleable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br><span class="line">   format支持类型</span><br><span class="line">1. reference：参考某一资源ID。</span><br><span class="line">2. color：颜色值。</span><br><span class="line">3. boolean：布尔值。</span><br><span class="line">   4. dimension：尺寸值</span><br><span class="line">   5. float：浮点值。</span><br><span class="line">   6. integer：整型值。</span><br><span class="line">   7. string：字符串。</span><br><span class="line">   8. fraction：百分数。</span><br><span class="line">   9. enum：枚举值。</span><br><span class="line">   10. flag：位或运算。</span><br><span class="line">   属性定义时可以指定多种类型值。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="在布局xml中使用该属性:">在布局xml中使用该属性:</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:stylename</span>=<span class="value">"xmlns:app="</span><span class="value">http:</span>//<span class="attribute">schemas.android.com</span>/<span class="attribute">apk</span>/<span class="attribute">res-auto</span>"</span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">com.robin.custimizewidget</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">stylename:attrname</span>=<span class="value">"**"</span></span><br><span class="line">       <span class="attribute">_</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="在自定义组件构造方法中，可以如下获得xml中定义的值：">在自定义组件构造方法中，可以如下获得xml中定义的值：</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TypedArray a = context.obtainStyledAttributes(attrs,R.styleable.stylename);</span><br><span class="line">a.getInt(R.styleable.stylename_<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>, 0);</span><br><span class="line">a.getResourceId(R.styleable.stylename_<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>, -1);</span><br><span class="line">a.recycle();//注意回收、</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="在res/values文件下attrs-xml下增加属性：">在res/values文件下attrs.xml下增加属性：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">declare-styleable</span> <span class="attribute">name</span>=<span class="value">"stylename"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attrname"</span> <span class="attribute">format</span>=<span class="value">"**"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">declare-styleable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br><span class="line">   format支持类型</span><br><span class="line">1. reference：参考某一资源ID。</span><br><span class="line">2. color：颜色值。</span><br><span class="line">3. boolean：布尔值。</span><br><span class="line">   4. dimension：尺寸值</span><br><span class="line">   5. float：浮点值。</span><br><span class="line">   6. integer：整型值。</span><br><span class="line">   7. string：字符串。</span><br><span class="line">   8. fraction：百分数。</span><br><span class="line">   9. enum：枚举值。</span><br><span class="line">   10. flag：位或运算。</span><br><span class="line">   属性定义时可以指定多种类型值。</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="自定义控件" scheme="http://coderrobin.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="Android" scheme="http://coderrobin.com/categories/Android/"/>
    
  </entry>
  
</feed>